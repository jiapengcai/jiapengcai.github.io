<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>InnoDB 锁类型</title>
    <url>/posts/45568/</url>
    <content><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2>
<p>本文译自<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-shared-exclusive-locks">MySQL 5.7官方文档的章节14.7.1，InnoDB的锁类型</a>。</p>
<h2 id="译文"><a class="markdownIt-Anchor" href="#译文"></a> 译文</h2>
<p>本章节介绍了InnoDB所使用的锁类型。</p>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-shared-exclusive-locks">共享锁和排他锁（Shared and Exclusive Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-intention-locks">意向锁（Intention Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-record-locks">记录锁（Record Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-gap-locks">间隙锁（Gap Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-next-key-locks">临键锁（Next-Key Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-insert-intention-locks">插入意向锁（Insert Intention Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-auto-inc-locks">自增锁（AUTO-INC Locks）</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-predicate-locks">空间索引的谓词锁（Predicate Locks for Spatial Indexes）</a></li>
</ul>
<span id="more"></span>
<h3 id="共享锁和排他锁shared-and-exclusive-locks"><a class="markdownIt-Anchor" href="#共享锁和排他锁shared-and-exclusive-locks"></a> 共享锁和排他锁（Shared and Exclusive Locks）</h3>
<p>InnoDB实现了两种标准的行级锁：共享锁（也称为S锁）和排他锁（也称为X锁）。</p>
<ul>
<li>共享锁允许持有该锁的事务读取一行记录。</li>
<li>排他锁允许持有该锁的事务更新或者删除一行记录。</li>
</ul>
<p>如果事务T1在记录r上持有一个共享锁，那么，如果此时另一个不同的事务T2发起了申请记录r的锁的请求，将会被这样处理：</p>
<ul>
<li>如果T2申请的是共享锁，那么将会立即被满足。此时，T1和T2都持有一个r的共享锁。</li>
<li>如果T2申请的是排他锁，那么将不会被立即满足。</li>
</ul>
<p>如果事务T1持有记录r的排他锁，那么，如果此时另一个不同的事务T2无论发起了申请记录r的哪一类的锁请求，都将不会被立即满足。事务T2必须等待事务T1释放它在记录r上的锁。</p>
<h3 id="意向锁intention-locks"><a class="markdownIt-Anchor" href="#意向锁intention-locks"></a> 意向锁（Intention Locks）</h3>
<p>InnoDB支持多种粒度的锁，允许了行级锁和表级锁的共存。例如，类似于<a href="https://dev.mysql.com/doc/refman/5.7/en/lock-tables.html">LOCK TABLES … WRITE</a>的语句会在指定表上加上排他锁（X锁）。为了使得多种粒度级别的锁变得可行，InnoDB使用了意向锁。意向锁是表级别的锁，它指明了一个事务对表中的记录将需要哪种类型的锁（共享还是排他）。意向锁有两类：</p>
<ul>
<li>意向共享锁（即IS锁），指明一个事务将会在表的某些行上设置一个共享锁。</li>
<li>意向排他锁（即IX锁），指明一个事务将会在表的某些行上设置一个排他锁。</li>
</ul>
<p>例如，<a href="https://dev.mysql.com/doc/refman/5.7/en/select.html">SELECT … LOCK IN SHARE MODE</a>设置了一个意向共享锁，<a href="https://dev.mysql.com/doc/refman/5.7/en/select.html">SELECT … FOR UPDATE</a>设置了一个意向排他锁。</p>
<p>意向锁的协议有以下两点：</p>
<ul>
<li>一个事务在获取表的一行记录的共享锁之前，它首先必须获取该表的意向共享锁或者更强级别的锁。</li>
<li>一个事务在获取表的一行记录的排他锁之前，它首先必须获取该表的意向排他锁。</li>
</ul>
<p>表级别的锁类型之间的兼容性可以用下表来表示：</p>
<table>
<thead>
<tr>
<th></th>
<th>X</th>
<th>IX</th>
<th>S</th>
<th>IS</th>
</tr>
</thead>
<tbody>
<tr>
<td>X</td>
<td>冲突</td>
<td>冲突</td>
<td>冲突</td>
<td>冲突</td>
</tr>
<tr>
<td>IX</td>
<td>冲突</td>
<td>兼容</td>
<td>冲突</td>
<td>兼容</td>
</tr>
<tr>
<td>S</td>
<td>冲突</td>
<td>冲突</td>
<td>兼容</td>
<td>兼容</td>
</tr>
<tr>
<td>IS</td>
<td>冲突</td>
<td>兼容</td>
<td>兼容</td>
<td>兼容</td>
</tr>
</tbody>
</table>
<p>一个事务在申请锁时，如果申请的锁与当前存在的锁兼容，那么这个申请将会得到满足。如果锁冲突，则事务会等待已存在的锁被释放。如果一个锁请求与当前存在的锁产生了冲突并且由于会引发<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_deadlock">死锁</a>而得不到满足，此时就发生了错误。</p>
<p>意向锁不会阻塞全表请求（例如，<a href="https://dev.mysql.com/doc/refman/5.7/en/lock-tables.html">LOCK TABLES … WRITE</a>）之外的任务东西。意向锁的主要目的是表明有事务正锁着某行记录，或者将要锁住表的某行记录。</p>
<p>意向锁的事务数据在<a href="https://dev.mysql.com/doc/refman/5.7/en/show-engine.html">SHOW ENGINE INNODB STATUS</a>和<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-standard-monitor.html">InnoDB 监视器</a>输出中的显示内容类似于如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TABLE</span> LOCK <span class="keyword">table</span> `test`.`t` trx id <span class="number">10080</span> lock mode IX</span><br></pre></td></tr></table></figure>
<h3 id="记录锁record-locks"><a class="markdownIt-Anchor" href="#记录锁record-locks"></a> 记录锁（Record Locks）</h3>
<p>记录锁是一种在索引记录上的锁。例如，SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE; 这条语句阻止了其它事务对条件为t.c1值为10的记录进行插入，更新或者删除操作。</p>
<p>记录锁总是锁定索引的记录，即使表里并没有定义索引。在这种情况下，InnoDB创建了一个隐藏的聚簇索引并使用这个索引来锁定记录。详见<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html">章节14.6.2.1，“聚簇索引和二级索引”</a></p>
<p>记录锁的事务数据在<a href="https://dev.mysql.com/doc/refman/5.7/en/show-engine.html">SHOW ENGINE INNODB STATUS</a>和<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-standard-monitor.html">InnoDB 监视器</a>输出中的显示内容类似于如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RECORD LOCKS space id <span class="number">58</span> page <span class="keyword">no</span> <span class="number">3</span> n bits <span class="number">72</span> index `<span class="keyword">PRIMARY</span>` <span class="keyword">of</span> <span class="keyword">table</span> `test`.`t`</span><br><span class="line">trx id <span class="number">10078</span> lock_mode X locks rec but <span class="keyword">not</span> gap</span><br><span class="line">Record lock, heap <span class="keyword">no</span> <span class="number">2</span> PHYSICAL RECORD: n_fields <span class="number">3</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">4</span>; hex <span class="number">8000000</span>a; <span class="keyword">asc</span>     ;;</span><br><span class="line"> <span class="number">1</span>: len <span class="number">6</span>; hex <span class="number">00000000274</span>f; <span class="keyword">asc</span>     <span class="string">&#x27;O;;</span></span><br><span class="line"><span class="string"> 2: len 7; hex b60000019d0110; asc        ;;</span></span><br></pre></td></tr></table></figure>
<h3 id="间隙锁gap-locks"><a class="markdownIt-Anchor" href="#间隙锁gap-locks"></a> 间隙锁（Gap Locks）</h3>
<p>间隙锁是在索引记录之间的间隙上的锁，或者是在第一条索引记录之前或最后一条索引记录之后的间隙上的锁。例如，SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE; 这条语句阻止了其它事务将值15插入列t.c1，无论该列是否已经有这个值。这是因为，这个范围内的所有间隙都被锁了。</p>
<p>一个间隙可能会跨越单个索引值，多个索引值，甚至是空的。</p>
<p>间隙锁是性能与并发之间的折中手段之一，被用于某些事务隔离级别。</p>
<p>使用唯一索引来查找特定记录行的语句不需要间隙锁。例如，如果id列包含了唯一索引，那么下列这条语句对于id值为100的记录行仅使用了索引记录锁，至于其它会话是否在前面的间隙里插入记录则无关紧要：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> child <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>如果id没有加索引或者具有非唯一的索引，那么上述这条语句就会给前面的间隙加上锁。</p>
<p>这里还有一个值得注意的地方，不同的事务可以在间隙上持有冲突的锁。例如，在事务A在一个间隙上持有一个共享间隙锁（也称为间隙S锁）的同时，事务B可以在同一个间隙上持有一个排他间隙锁（也称为间隙X锁）。允许间隙锁冲突的原因在于，如果一条记录通过索引被清除了，那么不同的事务在这条记录上所持有的间隙锁必须被合并。</p>
<p>InnoDB中的间隙锁纯粹是为了抑制，意思是说，间隙锁唯一的目的是为了防止其它事务往间隙里插入数据。间隙锁可以彼此共存。</p>
<p>你可以通过把事务隔离级别设置为<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_read-committed">READ COMMITTED（读提交）</a>或者启用<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog">innodb_locks_unsafe_for_binlog</a>系统参数（目前这个参数已经过时），来禁用间隙锁。在这种情况下，间隙锁对搜索和索引扫描禁用，仅用于外键约束检查和重复键检查。</p>
<p>使用<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_read-committed">READ COMMITTED（读提交）</a>或者启用<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_locks_unsafe_for_binlog">innodb_locks_unsafe_for_binlog</a>还有其它的影响。在MySQL评估WHERE条件后，对于不匹配的记录行，记录锁将会被释放。对于UPDATE语句，InnoDB会进行“半一致性”读，这样它将返回最新的提交版本给到MySQL，以便MySQL确定该记录行是否符合该条UPDATE语句的WHERE条件。</p>
<h3 id="临键锁next-key-locks"><a class="markdownIt-Anchor" href="#临键锁next-key-locks"></a> 临键锁（Next-Key Locks）</h3>
<p>临键锁是索引记录上的记录锁和索引前的间隙上的间隙锁的组合。</p>
<p>InnoDB以这样的一种方式来执行行级锁：当它搜索或者扫描表索引时，它会在它遇到的索引记录上设置共享或排他锁。因此，行级锁实际上是索引记录锁。一个索引记录上的临键锁也会影响该索引记录前的间隙。也就是说，临键锁是索引记录锁加上索引记录前面的间隙上的间隙锁。如果一个会话在索引中的记录行R上持有一个共享或者排他锁，那么其它会话则不能在索引顺序中R前面的间隙中插入新的索引记录。</p>
<p>假设一个索引包含了值10，11，13和20。这个索引可能存在的临键锁包含一下几个区间，其中圆括号表示不包含区间端点，方括号表示包含区间端点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(负无穷, 10]</span><br><span class="line">(10, 11]</span><br><span class="line">(11, 13]</span><br><span class="line">(13, 20]</span><br><span class="line">(20, 正无穷)</span><br></pre></td></tr></table></figure>
<p>对于最后一个区间，临键锁锁定索引中最大值上的间隙，并且“最高”伪记录的值高于索引中的任何实际值。这个最高值不是一个真正的记录，所以这个临键锁实际上只锁定了最大索引值之后的间隙。</p>
<p>InnoDB的默认事务隔离级别为<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read">REPEATABLE READ（可重复读）</a>。在这种条件下，InnoDB采用临键锁来搜索和索引扫描，从而避免了幻读（详见<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html">章节14.7.4，“幻行记录”</a>）。</p>
<p>临键锁的事务数据在<a href="https://dev.mysql.com/doc/refman/5.7/en/show-engine.html">SHOW ENGINE INNODB STATUS</a>和<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-standard-monitor.html">InnoDB 监视器</a>输出中的显示内容类似于如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RECORD LOCKS space id <span class="number">58</span> page <span class="keyword">no</span> <span class="number">3</span> n bits <span class="number">72</span> index `<span class="keyword">PRIMARY</span>` <span class="keyword">of</span> <span class="keyword">table</span> `test`.`t`</span><br><span class="line">trx id <span class="number">10080</span> lock_mode X</span><br><span class="line">Record lock, heap <span class="keyword">no</span> <span class="number">1</span> PHYSICAL RECORD: n_fields <span class="number">1</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">8</span>; hex <span class="number">73757072656</span>d756d; <span class="keyword">asc</span> supremum;;</span><br><span class="line"></span><br><span class="line">Record lock, heap <span class="keyword">no</span> <span class="number">2</span> PHYSICAL RECORD: n_fields <span class="number">3</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">4</span>; hex <span class="number">8000000</span>a; <span class="keyword">asc</span>     ;;</span><br><span class="line"> <span class="number">1</span>: len <span class="number">6</span>; hex <span class="number">00000000274</span>f; <span class="keyword">asc</span>     <span class="string">&#x27;O;;</span></span><br><span class="line"><span class="string"> 2: len 7; hex b60000019d0110; asc        ;;</span></span><br></pre></td></tr></table></figure>
<h3 id="插入意向锁insert-intention-locks"><a class="markdownIt-Anchor" href="#插入意向锁insert-intention-locks"></a> 插入意向锁（Insert Intention Locks）</h3>
<p>插入意向锁是一种在插入行之前由<a href="https://dev.mysql.com/doc/refman/5.7/en/insert.html">INSERT</a>操作设置的间隙锁。此锁表示插入的意图：如果插入到同一索引间隙中的多个事务未插入到间隙内的同一位置，则它们无需相互等待。 假设有两条索引记录，值分别为4和7的。此时，同时有两个单独事务，分别尝试插入值5和6，在获得插入行的排他锁之前，每个事务使用插入意向锁锁定4和7之间的间隙，但不会相互阻塞，因为行是不冲突的。</p>
<p>以下这个示例演示了一个在获取到被插入行记录的排他锁之前先获取插入意向锁的事务。示例里包含了两个客户端，A和B。</p>
<p>客户端A创建了一个包含两条索引记录（90和102）的表，然后开启一个事务，该事务在ID大于100的索引记录上放置了一个排他锁。这个排他锁包含了记录102之前的间隙锁：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> child (id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="keyword">PRIMARY</span> KEY(id)) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> child (id) <span class="keyword">values</span> (<span class="number">90</span>),(<span class="number">102</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> child <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure>
<p>客户端B开启一个在这个间隙里插入一条记录的事务。这个事务在等待获取排他锁时拿到了一个插入意向锁。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> child (id) <span class="keyword">VALUES</span> (<span class="number">101</span>);</span><br></pre></td></tr></table></figure>
<p>插入意向锁的事务数据在<a href="https://dev.mysql.com/doc/refman/5.7/en/show-engine.html">SHOW ENGINE INNODB STATUS</a>和<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-standard-monitor.html">InnoDB 监视器</a>输出中的显示内容类似于如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RECORD LOCKS space id <span class="number">31</span> page <span class="keyword">no</span> <span class="number">3</span> n bits <span class="number">72</span> index `<span class="keyword">PRIMARY</span>` <span class="keyword">of</span> <span class="keyword">table</span> `test`.`child`</span><br><span class="line">trx id <span class="number">8731</span> lock_mode X locks gap before rec <span class="keyword">insert</span> intention waiting</span><br><span class="line">Record lock, heap <span class="keyword">no</span> <span class="number">3</span> PHYSICAL RECORD: n_fields <span class="number">3</span>; compact format; info bits <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">4</span>; hex <span class="number">80000066</span>; <span class="keyword">asc</span>    f;;</span><br><span class="line"> <span class="number">1</span>: len <span class="number">6</span>; hex <span class="number">000000002215</span>; <span class="keyword">asc</span>     &quot; ;;</span><br><span class="line"> 2: len 7; hex 9000000172011c; asc     r  ;;...</span><br></pre></td></tr></table></figure>
<h3 id="自增锁auto-inc-locks"><a class="markdownIt-Anchor" href="#自增锁auto-inc-locks"></a> 自增锁（AUTO-INC Locks）</h3>
<p>自增锁是一种特殊的表级锁，由插入到具有AUTO_INCREMENT列的表中的事务使用。在最简单的情况下，如果一个事务正在向表中插入值，则任何其他事务如果要向该表进行插入则都必须等待，以便第一个事务插入的行能收到连续的主键值。</p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_autoinc_lock_mode">innodb_autoinc_lock_mode</a>参数控制着自增锁所采用的算法。这个参数允许你选择如何在可预测的自增值序列和插入操作的最大并发之间做权衡。</p>
<p>更多信息详见<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-auto-increment-handling.html">章节14.6.1.6，“InnoDB中的自增处理”</a>。</p>
<h3 id="空间索引的谓词锁predicate-locks-for-spatial-indexes"><a class="markdownIt-Anchor" href="#空间索引的谓词锁predicate-locks-for-spatial-indexes"></a> 空间索引的谓词锁（Predicate Locks for Spatial Indexes）</h3>
<p>InnoDB支持对包含空间数据的列进行空间索引（详见<a href="https://dev.mysql.com/doc/refman/5.7/en/optimizing-spatial-analysis.html">章节11.4.8，“优化空间分析”</a>）</p>
<p>为了处理涉及空间索引的操作的锁，临键锁定不能很好地支持<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read">REPEATABLE READ（可重复读）</a>或<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_serializable">SERIALIZABLE（序列化）</a>事务隔离级别。多维数据中没有绝对的排序概念，所以无法定义哪个是临键。</p>
<p>为了使具有空间索引的表支持隔离级别，InnoDB使用了谓词锁。空间索引包含最小边界矩形 (MBR) 值，因此InnoDB通过在用于查询的MBR值上设置谓词锁来强制对索引进行一致读取。 其他事务则无法插入或修改与查询条件匹配的行。</p>
<h2 id="原文"><a class="markdownIt-Anchor" href="#原文"></a> 原文</h2>
<blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-shared-exclusive-locks">MySQL 5.7 Reference Manual 14.7.1 InnoDB Locking</a></p>
</blockquote>
]]></content>
      <categories>
        <category>翻译</category>
        <category>MySQL官方文档</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis key淘汰策略</title>
    <url>/posts/59880/</url>
    <content><![CDATA[<p>当Redis作为缓存来用时，如果能让它在我们添加新数据时自动淘汰老数据，将会给我们带来很大的便利。这种行为在开发者社区里广为人知，毕竟memcached系统的默认行为。</p>
<p>本文涵盖了Redis <strong>maxmemory</strong>指令相关的主题内容，这条指令用于将内存使用限制到一个固定的值。除此之外，本文还着重介绍了Redis的LRU淘汰算法，与单纯的LRU算法基本一致。</p>
<h2 id="maxmemory配置指令"><a class="markdownIt-Anchor" href="#maxmemory配置指令"></a> maxmemory配置指令</h2>
<p><strong>maxmemory</strong>配置指令为Redis指定了固定的能用于存储数据的内存大小。你可以通过在redis.conf文件里设置这个值，也可以在运行时通过<strong>CONFIG SET</strong>指令来设置。</p>
<p>例如，如果要把内存使用限制在100mb，你可以在redis.conf文件里使用以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory 100mb</span><br></pre></td></tr></table></figure>
<p>如果把<strong>maxmemory</strong>的值设置为0，则意味着对内存的使用是无限制的。这个是64位系统的默认行为，与此同时，32位系统隐含的内存使用上限不能超过3GB。</p>
<p>当内存使用量达到指定值时，<strong>淘汰策略</strong>的配置决定了默认如何淘汰旧数据。对于会导致超出内存限制的命令，Redis会返回错误，或者在新增数据时会淘汰旧数据来满足内存使用限制。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Redis官方文档</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap</title>
    <url>/posts/58651/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamField;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.AbstractMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.Spliterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.DoubleBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.LongBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToDoubleBiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToDoubleFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToIntBiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToIntFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToLongBiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToLongFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A hash table supporting full concurrency of retrievals and</span></span><br><span class="line"><span class="comment"> * high expected concurrency for updates. This class obeys the</span></span><br><span class="line"><span class="comment"> * same functional specification as &#123;<span class="doctag">@link</span> java.util.Hashtable&#125;, and</span></span><br><span class="line"><span class="comment"> * includes versions of methods corresponding to each method of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Hashtable&#125;. However, even though all operations are</span></span><br><span class="line"><span class="comment"> * thread-safe, retrieval operations do &lt;em&gt;not&lt;/em&gt; entail locking,</span></span><br><span class="line"><span class="comment"> * and there is &lt;em&gt;not&lt;/em&gt; any support for locking the entire table</span></span><br><span class="line"><span class="comment"> * in a way that prevents all access.  This class is fully</span></span><br><span class="line"><span class="comment"> * interoperable with &#123;<span class="doctag">@code</span> Hashtable&#125; in programs that rely on its</span></span><br><span class="line"><span class="comment"> * thread safety but not on its synchronization details.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Retrieval operations (including &#123;<span class="doctag">@code</span> get&#125;) generally do not</span></span><br><span class="line"><span class="comment"> * block, so may overlap with update operations (including &#123;<span class="doctag">@code</span> put&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@code</span> remove&#125;). Retrievals reflect the results of the most</span></span><br><span class="line"><span class="comment"> * recently &lt;em&gt;completed&lt;/em&gt; update operations holding upon their</span></span><br><span class="line"><span class="comment"> * onset. (More formally, an update operation for a given key bears a</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;happens-before&lt;/em&gt; relation with any (non-null) retrieval for</span></span><br><span class="line"><span class="comment"> * that key reporting the updated value.)  For aggregate operations</span></span><br><span class="line"><span class="comment"> * such as &#123;<span class="doctag">@code</span> putAll&#125; and &#123;<span class="doctag">@code</span> clear&#125;, concurrent retrievals may</span></span><br><span class="line"><span class="comment"> * reflect insertion or removal of only some entries.  Similarly,</span></span><br><span class="line"><span class="comment"> * Iterators, Spliterators and Enumerations return elements reflecting the</span></span><br><span class="line"><span class="comment"> * state of the hash table at some point at or since the creation of the</span></span><br><span class="line"><span class="comment"> * iterator/enumeration.  They do &lt;em&gt;not&lt;/em&gt; throw &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.ConcurrentModificationException ConcurrentModificationException&#125;.</span></span><br><span class="line"><span class="comment"> * However, iterators are designed to be used by only one thread at a time.</span></span><br><span class="line"><span class="comment"> * Bear in mind that the results of aggregate status methods including</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> size&#125;, &#123;<span class="doctag">@code</span> isEmpty&#125;, and &#123;<span class="doctag">@code</span> containsValue&#125; are typically</span></span><br><span class="line"><span class="comment"> * useful only when a map is not undergoing concurrent updates in other threads.</span></span><br><span class="line"><span class="comment"> * Otherwise the results of these methods reflect transient states</span></span><br><span class="line"><span class="comment"> * that may be adequate for monitoring or estimation purposes, but not</span></span><br><span class="line"><span class="comment"> * for program control.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The table is dynamically expanded when there are too many</span></span><br><span class="line"><span class="comment"> * collisions (i.e., keys that have distinct hash codes but fall into</span></span><br><span class="line"><span class="comment"> * the same slot modulo the table size), with the expected average</span></span><br><span class="line"><span class="comment"> * effect of maintaining roughly two bins per mapping (corresponding</span></span><br><span class="line"><span class="comment"> * to a 0.75 load factor threshold for resizing). There may be much</span></span><br><span class="line"><span class="comment"> * variance around this average as mappings are added and removed, but</span></span><br><span class="line"><span class="comment"> * overall, this maintains a commonly accepted time/space tradeoff for</span></span><br><span class="line"><span class="comment"> * hash tables.  However, resizing this or any other kind of hash</span></span><br><span class="line"><span class="comment"> * table may be a relatively slow operation. When possible, it is a</span></span><br><span class="line"><span class="comment"> * good idea to provide a size estimate as an optional &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * initialCapacity&#125; constructor argument. An additional optional</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> loadFactor&#125; constructor argument provides a further means of</span></span><br><span class="line"><span class="comment"> * customizing initial table capacity by specifying the table density</span></span><br><span class="line"><span class="comment"> * to be used in calculating the amount of space to allocate for the</span></span><br><span class="line"><span class="comment"> * given number of elements.  Also, for compatibility with previous</span></span><br><span class="line"><span class="comment"> * versions of this class, constructors may optionally specify an</span></span><br><span class="line"><span class="comment"> * expected &#123;<span class="doctag">@code</span> concurrencyLevel&#125; as an additional hint for</span></span><br><span class="line"><span class="comment"> * internal sizing.  Note that using many keys with exactly the same</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> hashCode()&#125; is a sure way to slow down performance of any</span></span><br><span class="line"><span class="comment"> * hash table. To ameliorate impact, when keys are &#123;<span class="doctag">@link</span> Comparable&#125;,</span></span><br><span class="line"><span class="comment"> * this class may use comparison order among keys to help break ties.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A &#123;<span class="doctag">@link</span> Set&#125; projection of a ConcurrentHashMap may be created</span></span><br><span class="line"><span class="comment"> * (using &#123;<span class="doctag">@link</span> #newKeySet()&#125; or &#123;<span class="doctag">@link</span> #newKeySet(int)&#125;), or viewed</span></span><br><span class="line"><span class="comment"> * (using &#123;<span class="doctag">@link</span> #keySet(Object)&#125; when only keys are of interest, and the</span></span><br><span class="line"><span class="comment"> * mapped values are (perhaps transiently) not used or all take the</span></span><br><span class="line"><span class="comment"> * same mapping value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A ConcurrentHashMap can be used as scalable frequency map (a</span></span><br><span class="line"><span class="comment"> * form of histogram or multiset) by using &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.concurrent.atomic.LongAdder&#125; values and initializing via</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #computeIfAbsent computeIfAbsent&#125;. For example, to add a count</span></span><br><span class="line"><span class="comment"> * to a &#123;<span class="doctag">@code</span> ConcurrentHashMap&lt;String,LongAdder&gt; freqs&#125;, you can use</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> freqs.computeIfAbsent(k -&gt; new LongAdder()).increment();&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This class and its views and iterators implement all of the</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;optional&lt;/em&gt; methods of the &#123;<span class="doctag">@link</span> Map&#125; and &#123;<span class="doctag">@link</span> Iterator&#125;</span></span><br><span class="line"><span class="comment"> * interfaces.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Like &#123;<span class="doctag">@link</span> Hashtable&#125; but unlike &#123;<span class="doctag">@link</span> HashMap&#125;, this class</span></span><br><span class="line"><span class="comment"> * does &lt;em&gt;not&lt;/em&gt; allow &#123;<span class="doctag">@code</span> null&#125; to be used as a key or value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;ConcurrentHashMaps support a set of sequential and parallel bulk</span></span><br><span class="line"><span class="comment"> * operations that, unlike most &#123;<span class="doctag">@link</span> Stream&#125; methods, are designed</span></span><br><span class="line"><span class="comment"> * to be safely, and often sensibly, applied even with maps that are</span></span><br><span class="line"><span class="comment"> * being concurrently updated by other threads; for example, when</span></span><br><span class="line"><span class="comment"> * computing a snapshot summary of the values in a shared registry.</span></span><br><span class="line"><span class="comment"> * There are three kinds of operation, each with four forms, accepting</span></span><br><span class="line"><span class="comment"> * functions with Keys, Values, Entries, and (Key, Value) arguments</span></span><br><span class="line"><span class="comment"> * and/or return values. Because the elements of a ConcurrentHashMap</span></span><br><span class="line"><span class="comment"> * are not ordered in any particular way, and may be processed in</span></span><br><span class="line"><span class="comment"> * different orders in different parallel executions, the correctness</span></span><br><span class="line"><span class="comment"> * of supplied functions should not depend on any ordering, or on any</span></span><br><span class="line"><span class="comment"> * other objects or values that may transiently change while</span></span><br><span class="line"><span class="comment"> * computation is in progress; and except for forEach actions, should</span></span><br><span class="line"><span class="comment"> * ideally be side-effect-free. Bulk operations on &#123;<span class="doctag">@link</span> java.util.Map.Entry&#125;</span></span><br><span class="line"><span class="comment"> * objects do not support method &#123;<span class="doctag">@code</span> setValue&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; forEach: Perform a given action on each element.</span></span><br><span class="line"><span class="comment"> * A variant form applies a given transformation on each element</span></span><br><span class="line"><span class="comment"> * before performing the action.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; search: Return the first available non-null result of</span></span><br><span class="line"><span class="comment"> * applying a given function on each element; skipping further</span></span><br><span class="line"><span class="comment"> * search when a result is found.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; reduce: Accumulate each element.  The supplied reduction</span></span><br><span class="line"><span class="comment"> * function cannot rely on ordering (more formally, it should be</span></span><br><span class="line"><span class="comment"> * both associative and commutative).  There are five variants:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; Plain reductions. (There is not a form of this method for</span></span><br><span class="line"><span class="comment"> * (key, value) function arguments since there is no corresponding</span></span><br><span class="line"><span class="comment"> * return type.)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; Mapped reductions that accumulate the results of a given</span></span><br><span class="line"><span class="comment"> * function applied to each element.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; Reductions to scalar doubles, longs, and ints, using a</span></span><br><span class="line"><span class="comment"> * given basis value.&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;These bulk operations accept a &#123;<span class="doctag">@code</span> parallelismThreshold&#125;</span></span><br><span class="line"><span class="comment"> * argument. Methods proceed sequentially if the current map size is</span></span><br><span class="line"><span class="comment"> * estimated to be less than the given threshold. Using a value of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Long.MAX_VALUE&#125; suppresses all parallelism.  Using a value</span></span><br><span class="line"><span class="comment"> * of &#123;<span class="doctag">@code</span> 1&#125; results in maximal parallelism by partitioning into</span></span><br><span class="line"><span class="comment"> * enough subtasks to fully utilize the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * ForkJoinPool#commonPool()&#125; that is used for all parallel</span></span><br><span class="line"><span class="comment"> * computations. Normally, you would initially choose one of these</span></span><br><span class="line"><span class="comment"> * extreme values, and then measure performance of using in-between</span></span><br><span class="line"><span class="comment"> * values that trade off overhead versus throughput.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The concurrency properties of bulk operations follow</span></span><br><span class="line"><span class="comment"> * from those of ConcurrentHashMap: Any non-null result returned</span></span><br><span class="line"><span class="comment"> * from &#123;<span class="doctag">@code</span> get(key)&#125; and related access methods bears a</span></span><br><span class="line"><span class="comment"> * happens-before relation with the associated insertion or</span></span><br><span class="line"><span class="comment"> * update.  The result of any bulk operation reflects the</span></span><br><span class="line"><span class="comment"> * composition of these per-element relations (but is not</span></span><br><span class="line"><span class="comment"> * necessarily atomic with respect to the map as a whole unless it</span></span><br><span class="line"><span class="comment"> * is somehow known to be quiescent).  Conversely, because keys</span></span><br><span class="line"><span class="comment"> * and values in the map are never null, null serves as a reliable</span></span><br><span class="line"><span class="comment"> * atomic indicator of the current lack of any result.  To</span></span><br><span class="line"><span class="comment"> * maintain this property, null serves as an implicit basis for</span></span><br><span class="line"><span class="comment"> * all non-scalar reduction operations. For the double, long, and</span></span><br><span class="line"><span class="comment"> * int versions, the basis should be one that, when combined with</span></span><br><span class="line"><span class="comment"> * any other value, returns that other value (more formally, it</span></span><br><span class="line"><span class="comment"> * should be the identity element for the reduction). Most common</span></span><br><span class="line"><span class="comment"> * reductions have these properties; for example, computing a sum</span></span><br><span class="line"><span class="comment"> * with basis 0 or a minimum with basis MAX_VALUE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Search and transformation functions provided as arguments</span></span><br><span class="line"><span class="comment"> * should similarly return null to indicate the lack of any result</span></span><br><span class="line"><span class="comment"> * (in which case it is not used). In the case of mapped</span></span><br><span class="line"><span class="comment"> * reductions, this also enables transformations to serve as</span></span><br><span class="line"><span class="comment"> * filters, returning null (or, in the case of primitive</span></span><br><span class="line"><span class="comment"> * specializations, the identity basis) if the element should not</span></span><br><span class="line"><span class="comment"> * be combined. You can create compound transformations and</span></span><br><span class="line"><span class="comment"> * filterings by composing them yourself under this &quot;null means</span></span><br><span class="line"><span class="comment"> * there is nothing there now&quot; rule before using them in search or</span></span><br><span class="line"><span class="comment"> * reduce operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Methods accepting and/or returning Entry arguments maintain</span></span><br><span class="line"><span class="comment"> * key-value associations. They may be useful for example when</span></span><br><span class="line"><span class="comment"> * finding the key for the greatest value. Note that &quot;plain&quot; Entry</span></span><br><span class="line"><span class="comment"> * arguments can be supplied using &#123;<span class="doctag">@code</span> new</span></span><br><span class="line"><span class="comment"> * AbstractMap.SimpleEntry(k,v)&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Bulk operations may complete abruptly, throwing an</span></span><br><span class="line"><span class="comment"> * exception encountered in the application of a supplied</span></span><br><span class="line"><span class="comment"> * function. Bear in mind when handling such exceptions that other</span></span><br><span class="line"><span class="comment"> * concurrently executing functions could also have thrown</span></span><br><span class="line"><span class="comment"> * exceptions, or would have done so if the first exception had</span></span><br><span class="line"><span class="comment"> * not occurred.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Speedups for parallel compared to sequential forms are common</span></span><br><span class="line"><span class="comment"> * but not guaranteed.  Parallel operations involving brief functions</span></span><br><span class="line"><span class="comment"> * on small maps may execute more slowly than sequential forms if the</span></span><br><span class="line"><span class="comment"> * underlying work to parallelize the computation is more expensive</span></span><br><span class="line"><span class="comment"> * than the computation itself.  Similarly, parallelization may not</span></span><br><span class="line"><span class="comment"> * lead to much actual parallelism if all processors are busy</span></span><br><span class="line"><span class="comment"> * performing unrelated tasks.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All arguments to all task methods must be non-null.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This class is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/collections/index.html&quot;&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; the type of keys maintained by this map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; the type of mapped values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K,V&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Overview:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The primary design goal of this hash table is to maintain</span></span><br><span class="line"><span class="comment">     * concurrent readability (typically method get(), but also</span></span><br><span class="line"><span class="comment">     * iterators and related methods) while minimizing update</span></span><br><span class="line"><span class="comment">     * contention. Secondary goals are to keep space consumption about</span></span><br><span class="line"><span class="comment">     * the same or better than java.util.HashMap, and to support high</span></span><br><span class="line"><span class="comment">     * initial insertion rates on an empty table by many threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This map usually acts as a binned (bucketed) hash table.  Each</span></span><br><span class="line"><span class="comment">     * key-value mapping is held in a Node.  Most nodes are instances</span></span><br><span class="line"><span class="comment">     * of the basic Node class with hash, key, value, and next</span></span><br><span class="line"><span class="comment">     * fields. However, various subclasses exist: TreeNodes are</span></span><br><span class="line"><span class="comment">     * arranged in balanced trees, not lists.  TreeBins hold the roots</span></span><br><span class="line"><span class="comment">     * of sets of TreeNodes. ForwardingNodes are placed at the heads</span></span><br><span class="line"><span class="comment">     * of bins during resizing. ReservationNodes are used as</span></span><br><span class="line"><span class="comment">     * placeholders while establishing values in computeIfAbsent and</span></span><br><span class="line"><span class="comment">     * related methods.  The types TreeBin, ForwardingNode, and</span></span><br><span class="line"><span class="comment">     * ReservationNode do not hold normal user keys, values, or</span></span><br><span class="line"><span class="comment">     * hashes, and are readily distinguishable during search etc</span></span><br><span class="line"><span class="comment">     * because they have negative hash fields and null key and value</span></span><br><span class="line"><span class="comment">     * fields. (These special nodes are either uncommon or transient,</span></span><br><span class="line"><span class="comment">     * so the impact of carrying around some unused fields is</span></span><br><span class="line"><span class="comment">     * insignificant.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The table is lazily initialized to a power-of-two size upon the</span></span><br><span class="line"><span class="comment">     * first insertion.  Each bin in the table normally contains a</span></span><br><span class="line"><span class="comment">     * list of Nodes (most often, the list has only zero or one Node).</span></span><br><span class="line"><span class="comment">     * Table accesses require volatile/atomic reads, writes, and</span></span><br><span class="line"><span class="comment">     * CASes.  Because there is no other way to arrange this without</span></span><br><span class="line"><span class="comment">     * adding further indirections, we use intrinsics</span></span><br><span class="line"><span class="comment">     * (sun.misc.Unsafe) operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * We use the top (sign) bit of Node hash fields for control</span></span><br><span class="line"><span class="comment">     * purposes -- it is available anyway because of addressing</span></span><br><span class="line"><span class="comment">     * constraints.  Nodes with negative hash fields are specially</span></span><br><span class="line"><span class="comment">     * handled or ignored in map methods.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Insertion (via put or its variants) of the first node in an</span></span><br><span class="line"><span class="comment">     * empty bin is performed by just CASing it to the bin.  This is</span></span><br><span class="line"><span class="comment">     * by far the most common case for put operations under most</span></span><br><span class="line"><span class="comment">     * key/hash distributions.  Other update operations (insert,</span></span><br><span class="line"><span class="comment">     * delete, and replace) require locks.  We do not want to waste</span></span><br><span class="line"><span class="comment">     * the space required to associate a distinct lock object with</span></span><br><span class="line"><span class="comment">     * each bin, so instead use the first node of a bin list itself as</span></span><br><span class="line"><span class="comment">     * a lock. Locking support for these locks relies on builtin</span></span><br><span class="line"><span class="comment">     * &quot;synchronized&quot; monitors.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Using the first node of a list as a lock does not by itself</span></span><br><span class="line"><span class="comment">     * suffice though: When a node is locked, any update must first</span></span><br><span class="line"><span class="comment">     * validate that it is still the first node after locking it, and</span></span><br><span class="line"><span class="comment">     * retry if not. Because new nodes are always appended to lists,</span></span><br><span class="line"><span class="comment">     * once a node is first in a bin, it remains first until deleted</span></span><br><span class="line"><span class="comment">     * or the bin becomes invalidated (upon resizing).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The main disadvantage of per-bin locks is that other update</span></span><br><span class="line"><span class="comment">     * operations on other nodes in a bin list protected by the same</span></span><br><span class="line"><span class="comment">     * lock can stall, for example when user equals() or mapping</span></span><br><span class="line"><span class="comment">     * functions take a long time.  However, statistically, under</span></span><br><span class="line"><span class="comment">     * random hash codes, this is not a common problem.  Ideally, the</span></span><br><span class="line"><span class="comment">     * frequency of nodes in bins follows a Poisson distribution</span></span><br><span class="line"><span class="comment">     * (http://en.wikipedia.org/wiki/Poisson_distribution) with a</span></span><br><span class="line"><span class="comment">     * parameter of about 0.5 on average, given the resizing threshold</span></span><br><span class="line"><span class="comment">     * of 0.75, although with a large variance because of resizing</span></span><br><span class="line"><span class="comment">     * granularity. Ignoring variance, the expected occurrences of</span></span><br><span class="line"><span class="comment">     * list size k are (exp(-0.5) * pow(0.5, k) / factorial(k)). The</span></span><br><span class="line"><span class="comment">     * first values are:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 0:    0.60653066</span></span><br><span class="line"><span class="comment">     * 1:    0.30326533</span></span><br><span class="line"><span class="comment">     * 2:    0.07581633</span></span><br><span class="line"><span class="comment">     * 3:    0.01263606</span></span><br><span class="line"><span class="comment">     * 4:    0.00157952</span></span><br><span class="line"><span class="comment">     * 5:    0.00015795</span></span><br><span class="line"><span class="comment">     * 6:    0.00001316</span></span><br><span class="line"><span class="comment">     * 7:    0.00000094</span></span><br><span class="line"><span class="comment">     * 8:    0.00000006</span></span><br><span class="line"><span class="comment">     * more: less than 1 in ten million</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Lock contention probability for two threads accessing distinct</span></span><br><span class="line"><span class="comment">     * elements is roughly 1 / (8 * #elements) under random hashes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Actual hash code distributions encountered in practice</span></span><br><span class="line"><span class="comment">     * sometimes deviate significantly from uniform randomness.  This</span></span><br><span class="line"><span class="comment">     * includes the case when N &gt; (1&lt;&lt;30), so some keys MUST collide.</span></span><br><span class="line"><span class="comment">     * Similarly for dumb or hostile usages in which multiple keys are</span></span><br><span class="line"><span class="comment">     * designed to have identical hash codes or ones that differs only</span></span><br><span class="line"><span class="comment">     * in masked-out high bits. So we use a secondary strategy that</span></span><br><span class="line"><span class="comment">     * applies when the number of nodes in a bin exceeds a</span></span><br><span class="line"><span class="comment">     * threshold. These TreeBins use a balanced tree to hold nodes (a</span></span><br><span class="line"><span class="comment">     * specialized form of red-black trees), bounding search time to</span></span><br><span class="line"><span class="comment">     * O(log N).  Each search step in a TreeBin is at least twice as</span></span><br><span class="line"><span class="comment">     * slow as in a regular list, but given that N cannot exceed</span></span><br><span class="line"><span class="comment">     * (1&lt;&lt;64) (before running out of addresses) this bounds search</span></span><br><span class="line"><span class="comment">     * steps, lock hold times, etc, to reasonable constants (roughly</span></span><br><span class="line"><span class="comment">     * 100 nodes inspected per operation worst case) so long as keys</span></span><br><span class="line"><span class="comment">     * are Comparable (which is very common -- String, Long, etc).</span></span><br><span class="line"><span class="comment">     * TreeBin nodes (TreeNodes) also maintain the same &quot;next&quot;</span></span><br><span class="line"><span class="comment">     * traversal pointers as regular nodes, so can be traversed in</span></span><br><span class="line"><span class="comment">     * iterators in the same way.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The table is resized when occupancy exceeds a percentage</span></span><br><span class="line"><span class="comment">     * threshold (nominally, 0.75, but see below).  Any thread</span></span><br><span class="line"><span class="comment">     * noticing an overfull bin may assist in resizing after the</span></span><br><span class="line"><span class="comment">     * initiating thread allocates and sets up the replacement array.</span></span><br><span class="line"><span class="comment">     * However, rather than stalling, these other threads may proceed</span></span><br><span class="line"><span class="comment">     * with insertions etc.  The use of TreeBins shields us from the</span></span><br><span class="line"><span class="comment">     * worst case effects of overfilling while resizes are in</span></span><br><span class="line"><span class="comment">     * progress.  Resizing proceeds by transferring bins, one by one,</span></span><br><span class="line"><span class="comment">     * from the table to the next table. However, threads claim small</span></span><br><span class="line"><span class="comment">     * blocks of indices to transfer (via field transferIndex) before</span></span><br><span class="line"><span class="comment">     * doing so, reducing contention.  A generation stamp in field</span></span><br><span class="line"><span class="comment">     * sizeCtl ensures that resizings do not overlap. Because we are</span></span><br><span class="line"><span class="comment">     * using power-of-two expansion, the elements from each bin must</span></span><br><span class="line"><span class="comment">     * either stay at same index, or move with a power of two</span></span><br><span class="line"><span class="comment">     * offset. We eliminate unnecessary node creation by catching</span></span><br><span class="line"><span class="comment">     * cases where old nodes can be reused because their next fields</span></span><br><span class="line"><span class="comment">     * won&#x27;t change.  On average, only about one-sixth of them need</span></span><br><span class="line"><span class="comment">     * cloning when a table doubles. The nodes they replace will be</span></span><br><span class="line"><span class="comment">     * garbage collectable as soon as they are no longer referenced by</span></span><br><span class="line"><span class="comment">     * any reader thread that may be in the midst of concurrently</span></span><br><span class="line"><span class="comment">     * traversing table.  Upon transfer, the old table bin contains</span></span><br><span class="line"><span class="comment">     * only a special forwarding node (with hash field &quot;MOVED&quot;) that</span></span><br><span class="line"><span class="comment">     * contains the next table as its key. On encountering a</span></span><br><span class="line"><span class="comment">     * forwarding node, access and update operations restart, using</span></span><br><span class="line"><span class="comment">     * the new table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Each bin transfer requires its bin lock, which can stall</span></span><br><span class="line"><span class="comment">     * waiting for locks while resizing. However, because other</span></span><br><span class="line"><span class="comment">     * threads can join in and help resize rather than contend for</span></span><br><span class="line"><span class="comment">     * locks, average aggregate waits become shorter as resizing</span></span><br><span class="line"><span class="comment">     * progresses.  The transfer operation must also ensure that all</span></span><br><span class="line"><span class="comment">     * accessible bins in both the old and new table are usable by any</span></span><br><span class="line"><span class="comment">     * traversal.  This is arranged in part by proceeding from the</span></span><br><span class="line"><span class="comment">     * last bin (table.length - 1) up towards the first.  Upon seeing</span></span><br><span class="line"><span class="comment">     * a forwarding node, traversals (see class Traverser) arrange to</span></span><br><span class="line"><span class="comment">     * move to the new table without revisiting nodes.  To ensure that</span></span><br><span class="line"><span class="comment">     * no intervening nodes are skipped even when moved out of order,</span></span><br><span class="line"><span class="comment">     * a stack (see class TableStack) is created on first encounter of</span></span><br><span class="line"><span class="comment">     * a forwarding node during a traversal, to maintain its place if</span></span><br><span class="line"><span class="comment">     * later processing the current table. The need for these</span></span><br><span class="line"><span class="comment">     * save/restore mechanics is relatively rare, but when one</span></span><br><span class="line"><span class="comment">     * forwarding node is encountered, typically many more will be.</span></span><br><span class="line"><span class="comment">     * So Traversers use a simple caching scheme to avoid creating so</span></span><br><span class="line"><span class="comment">     * many new TableStack nodes. (Thanks to Peter Levart for</span></span><br><span class="line"><span class="comment">     * suggesting use of a stack here.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The traversal scheme also applies to partial traversals of</span></span><br><span class="line"><span class="comment">     * ranges of bins (via an alternate Traverser constructor)</span></span><br><span class="line"><span class="comment">     * to support partitioned aggregate operations.  Also, read-only</span></span><br><span class="line"><span class="comment">     * operations give up if ever forwarded to a null table, which</span></span><br><span class="line"><span class="comment">     * provides support for shutdown-style clearing, which is also not</span></span><br><span class="line"><span class="comment">     * currently implemented.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Lazy table initialization minimizes footprint until first use,</span></span><br><span class="line"><span class="comment">     * and also avoids resizings when the first operation is from a</span></span><br><span class="line"><span class="comment">     * putAll, constructor with map argument, or deserialization.</span></span><br><span class="line"><span class="comment">     * These cases attempt to override the initial capacity settings,</span></span><br><span class="line"><span class="comment">     * but harmlessly fail to take effect in cases of races.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The element count is maintained using a specialization of</span></span><br><span class="line"><span class="comment">     * LongAdder. We need to incorporate a specialization rather than</span></span><br><span class="line"><span class="comment">     * just use a LongAdder in order to access implicit</span></span><br><span class="line"><span class="comment">     * contention-sensing that leads to creation of multiple</span></span><br><span class="line"><span class="comment">     * CounterCells.  The counter mechanics avoid contention on</span></span><br><span class="line"><span class="comment">     * updates but can encounter cache thrashing if read too</span></span><br><span class="line"><span class="comment">     * frequently during concurrent access. To avoid reading so often,</span></span><br><span class="line"><span class="comment">     * resizing under contention is attempted only upon adding to a</span></span><br><span class="line"><span class="comment">     * bin already holding two or more nodes. Under uniform hash</span></span><br><span class="line"><span class="comment">     * distributions, the probability of this occurring at threshold</span></span><br><span class="line"><span class="comment">     * is around 13%, meaning that only about 1 in 8 puts check</span></span><br><span class="line"><span class="comment">     * threshold (and after resizing, many fewer do so).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TreeBins use a special form of comparison for search and</span></span><br><span class="line"><span class="comment">     * related operations (which is the main reason we cannot use</span></span><br><span class="line"><span class="comment">     * existing collections such as TreeMaps). TreeBins contain</span></span><br><span class="line"><span class="comment">     * Comparable elements, but may contain others, as well as</span></span><br><span class="line"><span class="comment">     * elements that are Comparable but not necessarily Comparable for</span></span><br><span class="line"><span class="comment">     * the same T, so we cannot invoke compareTo among them. To handle</span></span><br><span class="line"><span class="comment">     * this, the tree is ordered primarily by hash value, then by</span></span><br><span class="line"><span class="comment">     * Comparable.compareTo order if applicable.  On lookup at a node,</span></span><br><span class="line"><span class="comment">     * if elements are not comparable or compare as 0 then both left</span></span><br><span class="line"><span class="comment">     * and right children may need to be searched in the case of tied</span></span><br><span class="line"><span class="comment">     * hash values. (This corresponds to the full list search that</span></span><br><span class="line"><span class="comment">     * would be necessary if all elements were non-Comparable and had</span></span><br><span class="line"><span class="comment">     * tied hashes.) On insertion, to keep a total ordering (or as</span></span><br><span class="line"><span class="comment">     * close as is required here) across rebalancings, we compare</span></span><br><span class="line"><span class="comment">     * classes and identityHashCodes as tie-breakers. The red-black</span></span><br><span class="line"><span class="comment">     * balancing code is updated from pre-jdk-collections</span></span><br><span class="line"><span class="comment">     * (http://gee.cs.oswego.edu/dl/classes/collections/RBCell.java)</span></span><br><span class="line"><span class="comment">     * based in turn on Cormen, Leiserson, and Rivest &quot;Introduction to</span></span><br><span class="line"><span class="comment">     * Algorithms&quot; (CLR).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TreeBins also require an additional locking mechanism.  While</span></span><br><span class="line"><span class="comment">     * list traversal is always possible by readers even during</span></span><br><span class="line"><span class="comment">     * updates, tree traversal is not, mainly because of tree-rotations</span></span><br><span class="line"><span class="comment">     * that may change the root node and/or its linkages.  TreeBins</span></span><br><span class="line"><span class="comment">     * include a simple read-write lock mechanism parasitic on the</span></span><br><span class="line"><span class="comment">     * main bin-synchronization strategy: Structural adjustments</span></span><br><span class="line"><span class="comment">     * associated with an insertion or removal are already bin-locked</span></span><br><span class="line"><span class="comment">     * (and so cannot conflict with other writers) but must wait for</span></span><br><span class="line"><span class="comment">     * ongoing readers to finish. Since there can be only one such</span></span><br><span class="line"><span class="comment">     * waiter, we use a simple scheme using a single &quot;waiter&quot; field to</span></span><br><span class="line"><span class="comment">     * block writers.  However, readers need never block.  If the root</span></span><br><span class="line"><span class="comment">     * lock is held, they proceed along the slow traversal path (via</span></span><br><span class="line"><span class="comment">     * next-pointers) until the lock becomes available or the list is</span></span><br><span class="line"><span class="comment">     * exhausted, whichever comes first. These cases are not fast, but</span></span><br><span class="line"><span class="comment">     * maximize aggregate expected throughput.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Maintaining API and serialization compatibility with previous</span></span><br><span class="line"><span class="comment">     * versions of this class introduces several oddities. Mainly: We</span></span><br><span class="line"><span class="comment">     * leave untouched but unused constructor arguments refering to</span></span><br><span class="line"><span class="comment">     * concurrencyLevel. We accept a loadFactor constructor argument,</span></span><br><span class="line"><span class="comment">     * but apply it only to initial table capacity (which is the only</span></span><br><span class="line"><span class="comment">     * time that we can guarantee to honor it.) We also declare an</span></span><br><span class="line"><span class="comment">     * unused &quot;Segment&quot; class that is instantiated in minimal form</span></span><br><span class="line"><span class="comment">     * only when serializing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Also, solely for compatibility with previous versions of this</span></span><br><span class="line"><span class="comment">     * class, it extends AbstractMap, even though all of its methods</span></span><br><span class="line"><span class="comment">     * are overridden, so it is just useless baggage.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This file is organized to make things a little easier to follow</span></span><br><span class="line"><span class="comment">     * while reading than they might otherwise: First the main static</span></span><br><span class="line"><span class="comment">     * declarations and utilities, then fields, then main public</span></span><br><span class="line"><span class="comment">     * methods (with a few factorings of multiple public methods into</span></span><br><span class="line"><span class="comment">     * internal ones), then sizing methods, trees, traversers, and</span></span><br><span class="line"><span class="comment">     * bulk operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Constants -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The largest possible table capacity.  This value must be</span></span><br><span class="line"><span class="comment">     * exactly 1&lt;&lt;30 to stay within Java array allocation and indexing</span></span><br><span class="line"><span class="comment">     * bounds for power of two table sizes, and is further required</span></span><br><span class="line"><span class="comment">     * because the top two bits of 32bit hash fields are used for</span></span><br><span class="line"><span class="comment">     * control purposes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial table capacity.  Must be a power of 2</span></span><br><span class="line"><span class="comment">     * (i.e., at least 1) and at most MAXIMUM_CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The largest possible (non-power of two) array size.</span></span><br><span class="line"><span class="comment">     * Needed by toArray and related methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default concurrency level for this table. Unused but</span></span><br><span class="line"><span class="comment">     * defined for compatibility with previous versions of this class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor for this table. Overrides of this value in</span></span><br><span class="line"><span class="comment">     * constructors affect only the initial table capacity.  The</span></span><br><span class="line"><span class="comment">     * actual floating point value isn&#x27;t normally used -- it is</span></span><br><span class="line"><span class="comment">     * simpler to use expressions such as &#123;<span class="doctag">@code</span> n - (n &gt;&gt;&gt; 2)&#125; for</span></span><br><span class="line"><span class="comment">     * the associated resizing threshold.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2, and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * The value should be at least 4 * TREEIFY_THRESHOLD to avoid</span></span><br><span class="line"><span class="comment">     * conflicts between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Minimum number of rebinnings per transfer step. Ranges are</span></span><br><span class="line"><span class="comment">     * subdivided to allow multiple resizer threads.  This value</span></span><br><span class="line"><span class="comment">     * serves as a lower bound to avoid resizers encountering</span></span><br><span class="line"><span class="comment">     * excessive memory contention.  The value should be at least</span></span><br><span class="line"><span class="comment">     * DEFAULT_CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TRANSFER_STRIDE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of bits used for generation stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     * Must be at least 6 for 32bit arrays.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_BITS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum number of threads that can help resize.</span></span><br><span class="line"><span class="comment">     * Must fit in 32 - RESIZE_STAMP_BITS bits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESIZERS</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bit shift for recording size stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_SHIFT</span> <span class="operator">=</span> <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Encodings for Node hash fields. See above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOVED</span>     <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEBIN</span>   <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// hash for roots of trees</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVED</span>  <span class="operator">=</span> -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HASH_BITS</span> <span class="operator">=</span> <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of CPUS, to place bounds on some sizings */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** For serialization compatibility. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(<span class="string">&quot;segments&quot;</span>, Segment[].class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(<span class="string">&quot;segmentMask&quot;</span>, Integer.TYPE),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(<span class="string">&quot;segmentShift&quot;</span>, Integer.TYPE)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Nodes -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Key-value entry.  This class is never exported out as a</span></span><br><span class="line"><span class="comment">     * user-mutable Map.Entry (i.e., one supporting setValue; see</span></span><br><span class="line"><span class="comment">     * MapEntry below), but can be used for read-only traversals used</span></span><br><span class="line"><span class="comment">     * in bulk tasks.  Subclasses of Node with a negative hash field</span></span><br><span class="line"><span class="comment">     * are special, and contain null keys and values (but are never</span></span><br><span class="line"><span class="comment">     * exported).  Otherwise, keys and vals are never null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">volatile</span> V val;</span><br><span class="line">        <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>       &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>     &#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>   &#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                    (v == (u = val) || v.equals(u)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Virtualized support for map.get(); overridden in subclasses.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e = <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    K ek;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Static utilities -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spreads (XORs) higher bits of hash to lower and also forces top</span></span><br><span class="line"><span class="comment">     * bit to 0. Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment">     * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment">     * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment">     * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment">     * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment">     * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment">     * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment">     * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment">     * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment">     * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment">     * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment">     * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment">     * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">spread</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two table size for the given desired capacity.</span></span><br><span class="line"><span class="comment">     * See Hackers Delight, sec 3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns x&#x27;s Class if it is of the form &quot;class C implements</span></span><br><span class="line"><span class="comment">     * Comparable&lt;C&gt;&quot;, else null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">            Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">            <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                        ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                         Comparable.class) &amp;&amp;</span><br><span class="line">                        (as = p.getActualTypeArguments()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                        as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                        <span class="keyword">return</span> c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns k.compareTo(x) if x matches kc (k&#x27;s screened comparable</span></span><br><span class="line"><span class="comment">     * class), else 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span> <span class="comment">// for cast to Comparable</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x == <span class="literal">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">                ((Comparable)k).compareTo(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Table element access -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Volatile access methods are used for table elements as well as</span></span><br><span class="line"><span class="comment">     * elements of in-progress next table while resizing.  All uses of</span></span><br><span class="line"><span class="comment">     * the tab arguments must be null checked by callers.  All callers</span></span><br><span class="line"><span class="comment">     * also paranoically precheck that tab&#x27;s length is not zero (or an</span></span><br><span class="line"><span class="comment">     * equivalent check), thus ensuring that any index argument taking</span></span><br><span class="line"><span class="comment">     * the form of a hash value anded with (length - 1) is a valid</span></span><br><span class="line"><span class="comment">     * index.  Note that, to be correct wrt arbitrary concurrency</span></span><br><span class="line"><span class="comment">     * errors by users, these checks must operate on local variables,</span></span><br><span class="line"><span class="comment">     * which accounts for some odd-looking inline assignments below.</span></span><br><span class="line"><span class="comment">     * Note that calls to setTabAt always occur within locked regions,</span></span><br><span class="line"><span class="comment">     * and so in principle require only release ordering, not</span></span><br><span class="line"><span class="comment">     * full volatile semantics, but are currently coded as volatile</span></span><br><span class="line"><span class="comment">     * writes to be conservative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i,</span></span><br><span class="line"><span class="params">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">        U.putObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class="line"><span class="comment">     * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table to use; non-null only while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">     * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">     * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> baseCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">     * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">     * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">     * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">     * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">     * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table index (plus one) to split while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// views</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> KeySetView&lt;K,V&gt; keySet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ValuesView&lt;K,V&gt; values;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> EntrySetView&lt;K,V&gt; entrySet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with the default initial table size (16).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with an initial table size</span></span><br><span class="line"><span class="comment">     * accommodating the specified number of elements without the need</span></span><br><span class="line"><span class="comment">     * to dynamically resize.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity The implementation performs internal</span></span><br><span class="line"><span class="comment">     * sizing to accommodate this many elements.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment">     * elements is negative</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new map with the same mappings as the given map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with an initial table size based on</span></span><br><span class="line"><span class="comment">     * the given number of elements (&#123;<span class="doctag">@code</span> initialCapacity&#125;) and</span></span><br><span class="line"><span class="comment">     * initial table density (&#123;<span class="doctag">@code</span> loadFactor&#125;).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity the initial capacity. The implementation</span></span><br><span class="line"><span class="comment">     * performs internal sizing to accommodate this many elements,</span></span><br><span class="line"><span class="comment">     * given the specified load factor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor the load factor (table density) for</span></span><br><span class="line"><span class="comment">     * establishing the initial table size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment">     * elements is negative or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with an initial table size based on</span></span><br><span class="line"><span class="comment">     * the given number of elements (&#123;<span class="doctag">@code</span> initialCapacity&#125;), table</span></span><br><span class="line"><span class="comment">     * density (&#123;<span class="doctag">@code</span> loadFactor&#125;), and number of concurrently</span></span><br><span class="line"><span class="comment">     * updating threads (&#123;<span class="doctag">@code</span> concurrencyLevel&#125;).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity the initial capacity. The implementation</span></span><br><span class="line"><span class="comment">     * performs internal sizing to accommodate this many elements,</span></span><br><span class="line"><span class="comment">     * given the specified load factor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor the load factor (table density) for</span></span><br><span class="line"><span class="comment">     * establishing the initial table size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> concurrencyLevel the estimated number of concurrently</span></span><br><span class="line"><span class="comment">     * updating threads. The implementation may use this value as</span></span><br><span class="line"><span class="comment">     * a sizing hint.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is</span></span><br><span class="line"><span class="comment">     * negative or the load factor or concurrencyLevel are</span></span><br><span class="line"><span class="comment">     * nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                             <span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">            initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">            MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Original (since JDK1.2) Map methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> sumCount();</span><br><span class="line">        <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">                (n &gt; (<span class="type">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">                (<span class="type">int</span>)n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sumCount() &lt;= <span class="number">0L</span>; <span class="comment">// ignore transient negative values</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> key.equals(k)&#125;,</span></span><br><span class="line"><span class="comment">     * then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise it returns</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="type">int</span> n, eh; K ek;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (p = e.find(h, key)) != <span class="literal">null</span> ? p.val : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tests if the specified object is a key in this table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key possible key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the specified object</span></span><br><span class="line"><span class="comment">     *         is a key in this table, as determined by the</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> equals&#125; method; &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     * specified value. Note: This method may require a full traversal</span></span><br><span class="line"><span class="comment">     * of the map, and is much slower than method &#123;<span class="doctag">@code</span> containsKey&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     *         specified value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                V v;</span><br><span class="line">                <span class="keyword">if</span> ((v = p.val) == value || (v != <span class="literal">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps the specified key to the specified value in this table.</span></span><br><span class="line"><span class="comment">     * Neither the key nor the value can be null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The value can be retrieved by calling the &#123;<span class="doctag">@code</span> get&#125; method</span></span><br><span class="line"><span class="comment">     * with a key that is equal to the original key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="literal">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Copies all of the mappings from the specified map to this one.</span></span><br><span class="line"><span class="comment">     * These mappings replace any mappings that this map had for any of the</span></span><br><span class="line"><span class="comment">     * keys currently in the specified map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m mappings to be stored in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        tryPresize(m.size());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet())</span><br><span class="line">            putVal(e.getKey(), e.getValue(), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the key (and its corresponding value) from this map.</span></span><br><span class="line"><span class="comment">     * This method does nothing if the key is not in the map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key the key that needs to be removed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> replaceNode(key, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implementation for the four public remove/replace methods:</span></span><br><span class="line"><span class="comment">     * Replaces node value with v, conditional upon match of cv if</span></span><br><span class="line"><span class="comment">     * non-null.  If resulting value is null, delete.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">replaceNode</span><span class="params">(Object key, V value, Object cv)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                (f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">validated</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            validated = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="literal">null</span>;;) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    <span class="type">V</span> <span class="variable">ev</span> <span class="operator">=</span> e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (cv == <span class="literal">null</span> || cv == ev ||</span><br><span class="line">                                        (ev != <span class="literal">null</span> &amp;&amp; cv.equals(ev))) &#123;</span><br><span class="line">                                        oldVal = ev;</span><br><span class="line">                                        <span class="keyword">if</span> (value != <span class="literal">null</span>)</span><br><span class="line">                                            e.val = value;</span><br><span class="line">                                        <span class="keyword">else</span> <span class="keyword">if</span> (pred != <span class="literal">null</span>)</span><br><span class="line">                                            pred.next = e.next;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, e.next);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>)</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            validated = <span class="literal">true</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                (p = r.findTreeNode(hash, key, <span class="literal">null</span>)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">                                <span class="keyword">if</span> (cv == <span class="literal">null</span> || cv == pv ||</span><br><span class="line">                                    (pv != <span class="literal">null</span> &amp;&amp; cv.equals(pv))) &#123;</span><br><span class="line">                                    oldVal = pv;</span><br><span class="line">                                    <span class="keyword">if</span> (value != <span class="literal">null</span>)</span><br><span class="line">                                        p.val = value;</span><br><span class="line">                                    <span class="keyword">else</span> <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                        setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (validated) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">                            addCount(-<span class="number">1L</span>, -<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">delta</span> <span class="operator">=</span> <span class="number">0L</span>; <span class="comment">// negative number of deletions</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Node&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="keyword">while</span> (tab != <span class="literal">null</span> &amp;&amp; i &lt; tab.length) &#123;</span><br><span class="line">            <span class="type">int</span> fh;</span><br><span class="line">            Node&lt;K,V&gt; f = tabAt(tab, i);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">                ++i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) &#123;</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">                i = <span class="number">0</span>; <span class="comment">// restart</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p = (fh &gt;= <span class="number">0</span> ? f :</span><br><span class="line">                                       (f <span class="keyword">instanceof</span> TreeBin) ?</span><br><span class="line">                                       ((TreeBin&lt;K,V&gt;)f).first : <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                            --delta;</span><br><span class="line">                            p = p.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, i++, <span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0L</span>)</span><br><span class="line">            addCount(delta, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the keys contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa. The set supports element</span></span><br><span class="line"><span class="comment">     * removal, which removes the corresponding mapping from this map,</span></span><br><span class="line"><span class="comment">     * via the &#123;<span class="doctag">@code</span> Iterator.remove&#125;, &#123;<span class="doctag">@code</span> Set.remove&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> removeAll&#125;, &#123;<span class="doctag">@code</span> retainAll&#125;, and &#123;<span class="doctag">@code</span> clear&#125;</span></span><br><span class="line"><span class="comment">     * operations.  It does not support the &#123;<span class="doctag">@code</span> add&#125; or</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> addAll&#125; operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s iterators and spliterators are</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s &#123;<span class="doctag">@code</span> spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#CONCURRENT&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#DISTINCT&#125;, and &#123;<span class="doctag">@link</span> Spliterator#NONNULL&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> KeySetView&lt;K,V&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">        KeySetView&lt;K,V&gt; ks;</span><br><span class="line">        <span class="keyword">return</span> (ks = keySet) != <span class="literal">null</span> ? ks : (keySet = <span class="keyword">new</span> <span class="title class_">KeySetView</span>&lt;K,V&gt;(<span class="built_in">this</span>, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Collection&#125; view of the values contained in this map.</span></span><br><span class="line"><span class="comment">     * The collection is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the collection, and vice-versa.  The collection</span></span><br><span class="line"><span class="comment">     * supports element removal, which removes the corresponding</span></span><br><span class="line"><span class="comment">     * mapping from this map, via the &#123;<span class="doctag">@code</span> Iterator.remove&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Collection.remove&#125;, &#123;<span class="doctag">@code</span> removeAll&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> retainAll&#125;, and &#123;<span class="doctag">@code</span> clear&#125; operations.  It does not</span></span><br><span class="line"><span class="comment">     * support the &#123;<span class="doctag">@code</span> add&#125; or &#123;<span class="doctag">@code</span> addAll&#125; operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s iterators and spliterators are</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s &#123;<span class="doctag">@code</span> spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#CONCURRENT&#125;</span></span><br><span class="line"><span class="comment">     * and &#123;<span class="doctag">@link</span> Spliterator#NONNULL&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the collection view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">        ValuesView&lt;K,V&gt; vs;</span><br><span class="line">        <span class="keyword">return</span> (vs = values) != <span class="literal">null</span> ? vs : (values = <span class="keyword">new</span> <span class="title class_">ValuesView</span>&lt;K,V&gt;(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the mappings contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa.  The set supports element</span></span><br><span class="line"><span class="comment">     * removal, which removes the corresponding mapping from the map,</span></span><br><span class="line"><span class="comment">     * via the &#123;<span class="doctag">@code</span> Iterator.remove&#125;, &#123;<span class="doctag">@code</span> Set.remove&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> removeAll&#125;, &#123;<span class="doctag">@code</span> retainAll&#125;, and &#123;<span class="doctag">@code</span> clear&#125;</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s iterators and spliterators are</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s &#123;<span class="doctag">@code</span> spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#CONCURRENT&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#DISTINCT&#125;, and &#123;<span class="doctag">@link</span> Spliterator#NONNULL&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        EntrySetView&lt;K,V&gt; es;</span><br><span class="line">        <span class="keyword">return</span> (es = entrySet) != <span class="literal">null</span> ? es : (entrySet = <span class="keyword">new</span> <span class="title class_">EntrySetView</span>&lt;K,V&gt;(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the hash code value for this &#123;<span class="doctag">@link</span> Map&#125;, i.e.,</span></span><br><span class="line"><span class="comment">     * the sum of, for each key-value pair in the map,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> key.hashCode() ^ value.hashCode()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the hash code value for this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                h += p.key.hashCode() ^ p.val.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a string representation of this map.  The string</span></span><br><span class="line"><span class="comment">     * representation consists of a list of key-value mappings (in no</span></span><br><span class="line"><span class="comment">     * particular order) enclosed in braces (&quot;&#123;<span class="doctag">@code</span> &#123;&#125;&#125;&quot;).  Adjacent</span></span><br><span class="line"><span class="comment">     * mappings are separated by the characters &#123;<span class="doctag">@code</span> &quot;, &quot;&#125; (comma</span></span><br><span class="line"><span class="comment">     * and space).  Each key-value mapping is rendered as the key</span></span><br><span class="line"><span class="comment">     * followed by an equals sign (&quot;&#123;<span class="doctag">@code</span> =&#125;&quot;) followed by the</span></span><br><span class="line"><span class="comment">     * associated value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a string representation of this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = it.advance()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">                <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">                sb.append(k == <span class="built_in">this</span> ? <span class="string">&quot;(this Map)&quot;</span> : k);</span><br><span class="line">                sb.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                sb.append(v == <span class="built_in">this</span> ? <span class="string">&quot;(this Map)&quot;</span> : v);</span><br><span class="line">                <span class="keyword">if</span> ((p = it.advance()) == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.append(<span class="string">&#x27;&#125;&#x27;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares the specified object with this map for equality.</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if the given object is a map with the same</span></span><br><span class="line"><span class="comment">     * mappings as this map.  This operation may return misleading</span></span><br><span class="line"><span class="comment">     * results if either map is concurrently modified during execution</span></span><br><span class="line"><span class="comment">     * of this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o object to be compared for equality with this map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the specified object is equal to this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">val</span> <span class="operator">=</span> p.val;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> m.get(p.key);</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="literal">null</span> || (v != val &amp;&amp; !v.equals(val)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;?,?&gt; e : m.entrySet()) &#123;</span><br><span class="line">                Object mk, mv, v;</span><br><span class="line">                <span class="keyword">if</span> ((mk = e.getKey()) == <span class="literal">null</span> ||</span><br><span class="line">                    (mv = e.getValue()) == <span class="literal">null</span> ||</span><br><span class="line">                    (v = get(mk)) == <span class="literal">null</span> ||</span><br><span class="line">                    (mv != v &amp;&amp; !mv.equals(v)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stripped-down version of helper class used in previous version,</span></span><br><span class="line"><span class="comment">     * declared for the sake of serialization compatibility</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Segment</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2249069246763182397L</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line">        Segment(<span class="type">float</span> lf) &#123; <span class="built_in">this</span>.loadFactor = lf; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Saves the state of the &#123;<span class="doctag">@code</span> ConcurrentHashMap&#125; instance to a</span></span><br><span class="line"><span class="comment">     * stream (i.e., serializes it).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s the stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.io.IOException if an I/O error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span></span></span><br><span class="line"><span class="comment">     * the key (Object) and value (Object)</span></span><br><span class="line"><span class="comment">     * for each key-value mapping, followed by a null pair.</span></span><br><span class="line"><span class="comment">     * The key-value mappings are emitted in no particular order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">// For serialization compatibility</span></span><br><span class="line">        <span class="comment">// Emulate segment calculation from previous version of this class</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sshift</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ssize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (ssize &lt; DEFAULT_CONCURRENCY_LEVEL) &#123;</span><br><span class="line">            ++sshift;</span><br><span class="line">            ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">segmentShift</span> <span class="operator">=</span> <span class="number">32</span> - sshift;</span><br><span class="line">        <span class="type">int</span> <span class="variable">segmentMask</span> <span class="operator">=</span> ssize - <span class="number">1</span>;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Segment&lt;K,V&gt;[] segments = (Segment&lt;K,V&gt;[])</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Segment</span>&lt;?,?&gt;[DEFAULT_CONCURRENCY_LEVEL];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; segments.length; ++i)</span><br><span class="line">            segments[i] = <span class="keyword">new</span> <span class="title class_">Segment</span>&lt;K,V&gt;(LOAD_FACTOR);</span><br><span class="line">        s.putFields().put(<span class="string">&quot;segments&quot;</span>, segments);</span><br><span class="line">        s.putFields().put(<span class="string">&quot;segmentShift&quot;</span>, segmentShift);</span><br><span class="line">        s.putFields().put(<span class="string">&quot;segmentMask&quot;</span>, segmentMask);</span><br><span class="line">        s.writeFields();</span><br><span class="line"></span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                s.writeObject(p.key);</span><br><span class="line">                s.writeObject(p.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.writeObject(<span class="literal">null</span>);</span><br><span class="line">        s.writeObject(<span class="literal">null</span>);</span><br><span class="line">        segments = <span class="literal">null</span>; <span class="comment">// throw away</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitutes the instance from a stream (that is, deserializes it).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s the stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException if the class of a serialized object</span></span><br><span class="line"><span class="comment">     *         could not be found</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.io.IOException if an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * To improve performance in typical cases, we create nodes</span></span><br><span class="line"><span class="comment">         * while reading, then place in table once size is known.</span></span><br><span class="line"><span class="comment">         * However, we must also validate uniqueness and deal with</span></span><br><span class="line"><span class="comment">         * overpopulated bins while doing so, which requires</span></span><br><span class="line"><span class="comment">         * specialized versions of putVal mechanics.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sizeCtl = -<span class="number">1</span>; <span class="comment">// force exclusion for table construction</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        Node&lt;K,V&gt; p = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="literal">null</span> &amp;&amp; v != <span class="literal">null</span>) &#123;</span><br><span class="line">                p = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(spread(k.hashCode()), k, v, p);</span><br><span class="line">                ++size;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0L</span>)</span><br><span class="line">            sizeCtl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (size &gt;= (<span class="type">long</span>)(MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>))</span><br><span class="line">                n = MAXIMUM_CAPACITY;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> (<span class="type">int</span>)size;</span><br><span class="line">                n = tableSizeFor(sz + (sz &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">            <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">added</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> insertAtFront;</span><br><span class="line">                Node&lt;K,V&gt; next = p.next, first;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> p.hash, j = h &amp; mask;</span><br><span class="line">                <span class="keyword">if</span> ((first = tabAt(tab, j)) == <span class="literal">null</span>)</span><br><span class="line">                    insertAtFront = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">                    <span class="keyword">if</span> (first.hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)first;</span><br><span class="line">                        <span class="keyword">if</span> (t.putTreeVal(h, k, p.val) == <span class="literal">null</span>)</span><br><span class="line">                            ++added;</span><br><span class="line">                        insertAtFront = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                        insertAtFront = <span class="literal">true</span>;</span><br><span class="line">                        Node&lt;K,V&gt; q; K qk;</span><br><span class="line">                        <span class="keyword">for</span> (q = first; q != <span class="literal">null</span>; q = q.next) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (q.hash == h &amp;&amp;</span><br><span class="line">                                ((qk = q.key) == k ||</span><br><span class="line">                                 (qk != <span class="literal">null</span> &amp;&amp; k.equals(qk)))) &#123;</span><br><span class="line">                                insertAtFront = <span class="literal">false</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ++binCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (insertAtFront &amp;&amp; binCount &gt;= TREEIFY_THRESHOLD) &#123;</span><br><span class="line">                            insertAtFront = <span class="literal">false</span>;</span><br><span class="line">                            ++added;</span><br><span class="line">                            p.next = first;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">                            <span class="keyword">for</span> (q = p; q != <span class="literal">null</span>; q = q.next) &#123;</span><br><span class="line">                                TreeNode&lt;K,V&gt; t = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;</span><br><span class="line">                                    (q.hash, q.key, q.val, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((t.prev = tl) == <span class="literal">null</span>)</span><br><span class="line">                                    hd = t;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    tl.next = t;</span><br><span class="line">                                tl = t;</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(tab, j, <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hd));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (insertAtFront) &#123;</span><br><span class="line">                    ++added;</span><br><span class="line">                    p.next = first;</span><br><span class="line">                    setTabAt(tab, j, p);</span><br><span class="line">                &#125;</span><br><span class="line">                p = next;</span><br><span class="line">            &#125;</span><br><span class="line">            table = tab;</span><br><span class="line">            sizeCtl = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">            baseCount = added;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ConcurrentMap methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with the specified key,</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">putIfAbsent</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; replaceNode(key, <span class="literal">null</span>, value) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if any of the arguments are null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">replace</span><span class="params">(K key, V oldValue, V newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || oldValue == <span class="literal">null</span> || newValue == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> replaceNode(key, newValue, oldValue) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with the specified key,</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">replace</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> replaceNode(key, value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overrides of JDK8+ Map extension method defaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value to which the specified key is mapped, or the</span></span><br><span class="line"><span class="comment">     * given default value if this map contains no mapping for the</span></span><br><span class="line"><span class="comment">     * key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key whose associated value is to be returned</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue the value to return if this map contains</span></span><br><span class="line"><span class="comment">     * no mapping for the given key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the mapping for the key, if present; else the default value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> &#123;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">return</span> (v = get(key)) == <span class="literal">null</span> ? defaultValue : v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                action.accept(p.key, p.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceAll</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? extends V&gt; function)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (function == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> p.val;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> p.key;;) &#123;</span><br><span class="line">                    <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> function.apply(key, oldValue);</span><br><span class="line">                    <span class="keyword">if</span> (newValue == <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">                    <span class="keyword">if</span> (replaceNode(key, newValue, oldValue) != <span class="literal">null</span> ||</span><br><span class="line">                        (oldValue = get(key)) == <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If the specified key is not already associated with a value,</span></span><br><span class="line"><span class="comment">     * attempts to compute its value using the given mapping function</span></span><br><span class="line"><span class="comment">     * and enters it into this map unless &#123;<span class="doctag">@code</span> null&#125;.  The entire</span></span><br><span class="line"><span class="comment">     * method invocation is performed atomically, so the function is</span></span><br><span class="line"><span class="comment">     * applied at most once per key.  Some attempted update operations</span></span><br><span class="line"><span class="comment">     * on this map by other threads may be blocked while computation</span></span><br><span class="line"><span class="comment">     * is in progress, so the computation should be short and simple,</span></span><br><span class="line"><span class="comment">     * and must not attempt to update any other mappings of this map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappingFunction the function to compute a value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current (existing or computed) value associated with</span></span><br><span class="line"><span class="comment">     *         the specified key, or null if the computed value is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or mappingFunction</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the computation detectably</span></span><br><span class="line"><span class="comment">     *         attempts a recursive update to this map that would</span></span><br><span class="line"><span class="comment">     *         otherwise never complete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the mappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is left unestablished</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">computeIfAbsent</span><span class="params">(K key, Function&lt;? <span class="built_in">super</span> K, ? extends V&gt; mappingFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || mappingFunction == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">V</span> <span class="variable">val</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt; r = <span class="keyword">new</span> <span class="title class_">ReservationNode</span>&lt;K,V&gt;();</span><br><span class="line">                <span class="keyword">synchronized</span> (r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>, r)) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        Node&lt;K,V&gt; node = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((val = mappingFunction.apply(key)) != <span class="literal">null</span>)</span><br><span class="line">                                node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(h, key, val, <span class="literal">null</span>);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            setTabAt(tab, i, node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek; V ev;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = e.val;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((val = mappingFunction.apply(key)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        added = <span class="literal">true</span>;</span><br><span class="line">                                        pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(h, key, val, <span class="literal">null</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                (p = r.findTreeNode(h, key, <span class="literal">null</span>)) != <span class="literal">null</span>)</span><br><span class="line">                                val = p.val;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> ((val = mappingFunction.apply(key)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                added = <span class="literal">true</span>;</span><br><span class="line">                                t.putTreeVal(h, key, val);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (!added)</span><br><span class="line">                        <span class="keyword">return</span> val;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val != <span class="literal">null</span>)</span><br><span class="line">            addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If the value for the specified key is present, attempts to</span></span><br><span class="line"><span class="comment">     * compute a new mapping given the key and its current mapped</span></span><br><span class="line"><span class="comment">     * value.  The entire method invocation is performed atomically.</span></span><br><span class="line"><span class="comment">     * Some attempted update operations on this map by other threads</span></span><br><span class="line"><span class="comment">     * may be blocked while computation is in progress, so the</span></span><br><span class="line"><span class="comment">     * computation should be short and simple, and must not attempt to</span></span><br><span class="line"><span class="comment">     * update any other mappings of this map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which a value may be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remappingFunction the function to compute a value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new value associated with the specified key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or remappingFunction</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the computation detectably</span></span><br><span class="line"><span class="comment">     *         attempts a recursive update to this map that would</span></span><br><span class="line"><span class="comment">     *         otherwise never complete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the remappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is unchanged</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">computeIfPresent</span><span class="params">(K key, BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || remappingFunction == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">V</span> <span class="variable">val</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">delta</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="literal">null</span>;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(key, e.val);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="literal">null</span>)</span><br><span class="line">                                        e.val = val;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        delta = -<span class="number">1</span>;</span><br><span class="line">                                        Node&lt;K,V&gt; en = e.next;</span><br><span class="line">                                        <span class="keyword">if</span> (pred != <span class="literal">null</span>)</span><br><span class="line">                                            pred.next = en;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, en);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>)</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                (p = r.findTreeNode(h, key, <span class="literal">null</span>)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                val = remappingFunction.apply(key, p.val);</span><br><span class="line">                                <span class="keyword">if</span> (val != <span class="literal">null</span>)</span><br><span class="line">                                    p.val = val;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    delta = -<span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                        setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">            addCount((<span class="type">long</span>)delta, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to compute a mapping for the specified key and its</span></span><br><span class="line"><span class="comment">     * current mapped value (or &#123;<span class="doctag">@code</span> null&#125; if there is no current</span></span><br><span class="line"><span class="comment">     * mapping). The entire method invocation is performed atomically.</span></span><br><span class="line"><span class="comment">     * Some attempted update operations on this map by other threads</span></span><br><span class="line"><span class="comment">     * may be blocked while computation is in progress, so the</span></span><br><span class="line"><span class="comment">     * computation should be short and simple, and must not attempt to</span></span><br><span class="line"><span class="comment">     * update any other mappings of this Map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remappingFunction the function to compute a value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new value associated with the specified key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or remappingFunction</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the computation detectably</span></span><br><span class="line"><span class="comment">     *         attempts a recursive update to this map that would</span></span><br><span class="line"><span class="comment">     *         otherwise never complete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the remappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is unchanged</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(K key,</span></span><br><span class="line"><span class="params">                     BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || remappingFunction == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">V</span> <span class="variable">val</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">delta</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt; r = <span class="keyword">new</span> <span class="title class_">ReservationNode</span>&lt;K,V&gt;();</span><br><span class="line">                <span class="keyword">synchronized</span> (r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>, r)) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        Node&lt;K,V&gt; node = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((val = remappingFunction.apply(key, <span class="literal">null</span>)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                delta = <span class="number">1</span>;</span><br><span class="line">                                node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(h, key, val, <span class="literal">null</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            setTabAt(tab, i, node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="literal">null</span>;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(key, e.val);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="literal">null</span>)</span><br><span class="line">                                        e.val = val;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        delta = -<span class="number">1</span>;</span><br><span class="line">                                        Node&lt;K,V&gt; en = e.next;</span><br><span class="line">                                        <span class="keyword">if</span> (pred != <span class="literal">null</span>)</span><br><span class="line">                                            pred.next = en;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, en);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(key, <span class="literal">null</span>);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        delta = <span class="number">1</span>;</span><br><span class="line">                                        pred.next =</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(h, key, val, <span class="literal">null</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="literal">null</span>)</span><br><span class="line">                                p = r.findTreeNode(h, key, <span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                p = <span class="literal">null</span>;</span><br><span class="line">                            <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> (p == <span class="literal">null</span>) ? <span class="literal">null</span> : p.val;</span><br><span class="line">                            val = remappingFunction.apply(key, pv);</span><br><span class="line">                            <span class="keyword">if</span> (val != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (p != <span class="literal">null</span>)</span><br><span class="line">                                    p.val = val;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    delta = <span class="number">1</span>;</span><br><span class="line">                                    t.putTreeVal(h, key, val);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                                delta = -<span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                    setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">            addCount((<span class="type">long</span>)delta, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If the specified key is not already associated with a</span></span><br><span class="line"><span class="comment">     * (non-null) value, associates it with the given value.</span></span><br><span class="line"><span class="comment">     * Otherwise, replaces the value with the results of the given</span></span><br><span class="line"><span class="comment">     * remapping function, or removes if &#123;<span class="doctag">@code</span> null&#125;. The entire</span></span><br><span class="line"><span class="comment">     * method invocation is performed atomically.  Some attempted</span></span><br><span class="line"><span class="comment">     * update operations on this map by other threads may be blocked</span></span><br><span class="line"><span class="comment">     * while computation is in progress, so the computation should be</span></span><br><span class="line"><span class="comment">     * short and simple, and must not attempt to update any other</span></span><br><span class="line"><span class="comment">     * mappings of this Map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to use if absent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remappingFunction the function to recompute a value if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new value associated with the specified key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or the</span></span><br><span class="line"><span class="comment">     *         remappingFunction is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the remappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is unchanged</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">merge</span><span class="params">(K key, V value, BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span> || remappingFunction == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">V</span> <span class="variable">val</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">delta</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(h, key, value, <span class="literal">null</span>))) &#123;</span><br><span class="line">                    delta = <span class="number">1</span>;</span><br><span class="line">                    val = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="literal">null</span>;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(e.val, value);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="literal">null</span>)</span><br><span class="line">                                        e.val = val;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        delta = -<span class="number">1</span>;</span><br><span class="line">                                        Node&lt;K,V&gt; en = e.next;</span><br><span class="line">                                        <span class="keyword">if</span> (pred != <span class="literal">null</span>)</span><br><span class="line">                                            pred.next = en;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, en);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    delta = <span class="number">1</span>;</span><br><span class="line">                                    val = value;</span><br><span class="line">                                    pred.next =</span><br><span class="line">                                        <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(h, key, val, <span class="literal">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r = t.root;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p = (r == <span class="literal">null</span>) ? <span class="literal">null</span> :</span><br><span class="line">                                r.findTreeNode(h, key, <span class="literal">null</span>);</span><br><span class="line">                            val = (p == <span class="literal">null</span>) ? value :</span><br><span class="line">                                remappingFunction.apply(p.val, value);</span><br><span class="line">                            <span class="keyword">if</span> (val != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (p != <span class="literal">null</span>)</span><br><span class="line">                                    p.val = val;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    delta = <span class="number">1</span>;</span><br><span class="line">                                    t.putTreeVal(h, key, val);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                                delta = -<span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                    setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">            addCount((<span class="type">long</span>)delta, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable legacy methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Legacy method testing if some key maps into the specified value</span></span><br><span class="line"><span class="comment">     * in this table.  This method is identical in functionality to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #containsValue(Object)&#125;, and exists solely to ensure</span></span><br><span class="line"><span class="comment">     * full compatibility with class &#123;<span class="doctag">@link</span> java.util.Hashtable&#125;,</span></span><br><span class="line"><span class="comment">     * which supported this method prior to introduction of the</span></span><br><span class="line"><span class="comment">     * Java Collections framework.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  value a value to search for</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if some key maps to the</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> value&#125; argument in this table as</span></span><br><span class="line"><span class="comment">     *         determined by the &#123;<span class="doctag">@code</span> equals&#125; method;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> containsValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an enumeration of the keys in this table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an enumeration of the keys in this table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #keySet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Enumeration&lt;K&gt; <span class="title function_">keys</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an enumeration of the values in this table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an enumeration of the values in this table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #values()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Enumeration&lt;V&gt; <span class="title function_">elements</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ConcurrentHashMap-only methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of mappings. This method should be used</span></span><br><span class="line"><span class="comment">     * instead of &#123;<span class="doctag">@link</span> #size&#125; because a ConcurrentHashMap may</span></span><br><span class="line"><span class="comment">     * contain more mappings than can be represented as an int. The</span></span><br><span class="line"><span class="comment">     * value returned is an estimate; the actual count may differ if</span></span><br><span class="line"><span class="comment">     * there are concurrent insertions or removals.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of mappings</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">mappingCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> sumCount();</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0L</span>) ? <span class="number">0L</span> : n; <span class="comment">// ignore transient negative values</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@link</span> Set&#125; backed by a ConcurrentHashMap</span></span><br><span class="line"><span class="comment">     * from the given type to &#123;<span class="doctag">@code</span> Boolean.TRUE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; the element type of the returned set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; KeySetView&lt;K,Boolean&gt; <span class="title function_">newKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySetView</span>&lt;K,Boolean&gt;</span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;K,Boolean&gt;(), Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@link</span> Set&#125; backed by a ConcurrentHashMap</span></span><br><span class="line"><span class="comment">     * from the given type to &#123;<span class="doctag">@code</span> Boolean.TRUE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity The implementation performs internal</span></span><br><span class="line"><span class="comment">     * sizing to accommodate this many elements.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; the element type of the returned set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment">     * elements is negative</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; KeySetView&lt;K,Boolean&gt; <span class="title function_">newKeySet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySetView</span>&lt;K,Boolean&gt;</span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;K,Boolean&gt;(initialCapacity), Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the keys in this map, using the</span></span><br><span class="line"><span class="comment">     * given common mapped value for any additions (i.e., &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * Collection#add&#125; and &#123;<span class="doctag">@link</span> Collection#addAll(Collection)&#125;).</span></span><br><span class="line"><span class="comment">     * This is of course only appropriate if it is acceptable to use</span></span><br><span class="line"><span class="comment">     * the same value for all additions from this view.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedValue the mapped value to use for any additions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the mappedValue is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> KeySetView&lt;K,V&gt; <span class="title function_">keySet</span><span class="params">(V mappedValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mappedValue == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySetView</span>&lt;K,V&gt;(<span class="built_in">this</span>, mappedValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Special Nodes -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A node inserted at head of bins during transfer operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">        ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">            <span class="built_in">super</span>(MOVED, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">this</span>.nextTable = tab;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">            outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e; <span class="type">int</span> n;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="literal">null</span> || tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                    (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="type">int</span> eh; K ek;</span><br><span class="line">                    <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                    <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                            tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                            <span class="keyword">continue</span> outer;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A place-holder node used in computeIfAbsent and compute</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReservationNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">        ReservationNode() &#123;</span><br><span class="line">            <span class="built_in">super</span>(RESERVED, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Table Initialization and Resizing -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the stamp bits for resizing a table of size n.</span></span><br><span class="line"><span class="comment">     * Must be negative when shifted left by RESIZE_STAMP_SHIFT.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">resizeStamp</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.numberOfLeadingZeros(n) | (<span class="number">1</span> &lt;&lt; (RESIZE_STAMP_BITS - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds to count, and if table is too small and not already</span></span><br><span class="line"><span class="comment">     * resizing, initiates transfer. If already resizing, helps</span></span><br><span class="line"><span class="comment">     * perform transfer if work is available.  Rechecks occupancy</span></span><br><span class="line"><span class="comment">     * after a transfer to see if another resize is already needed</span></span><br><span class="line"><span class="comment">     * because resizings are lagging additions.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the count to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> check if &lt;0, don&#x27;t check resize, if &lt;= 1 only check if uncontended</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">addCount</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> check)</span> &#123;</span><br><span class="line">        CounterCell[] as; <span class="type">long</span> b, s;</span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="literal">null</span> ||</span><br><span class="line">            !U.compareAndSwapLong(<span class="built_in">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">            CounterCell a; <span class="type">long</span> v; <span class="type">int</span> m;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">                !(uncontended =</span><br><span class="line">                  U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">                fullAddCount(x, uncontended);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab, nt; <span class="type">int</span> n, sc;</span><br><span class="line">            <span class="keyword">while</span> (s &gt;= (<span class="type">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                   (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="literal">null</span>);</span><br><span class="line">                s = sumCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helps transfer if a resize is in progress.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] nextTab; <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="literal">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">            (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(tab.length);</span><br><span class="line">            <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">                   (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                    transfer(tab, nextTab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nextTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tries to presize table to accommodate the given number of elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size number of elements (doesn&#x27;t need to be perfectly accurate)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">tryPresize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">            tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab = table; <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">                n = (sc &gt; c) ? sc : c;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                            table = nt;</span><br><span class="line">                            sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        sizeCtl = sc;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt;[] nt;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class="line"><span class="comment">     * above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tab.length, stride;</span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="literal">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextn</span> <span class="operator">=</span> nextTab.length;</span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">advance</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">finishing</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> fh;</span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="type">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="built_in">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="type">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                    nextTable = <span class="literal">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="literal">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="literal">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="literal">null</span>, fwd);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="literal">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">runBit</span> <span class="operator">=</span> fh &amp; n;</span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">ph</span> <span class="operator">=</span> p.hash; <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key; <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Counter support -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A padded cell for distributing counts.  Adapted from LongAdder</span></span><br><span class="line"><span class="comment">     * and Striped64.  See their internal docs for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CounterCell</span> &#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">long</span> value;</span><br><span class="line">        CounterCell(<span class="type">long</span> x) &#123; value = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">sumCount</span><span class="params">()</span> &#123;</span><br><span class="line">        CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> baseCount;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    sum += a.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// See LongAdder version for explanation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">fullAddCount</span><span class="params">(<span class="type">long</span> x, <span class="type">boolean</span> wasUncontended)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">            ThreadLocalRandom.localInit();      <span class="comment">// force initialization</span></span><br><span class="line">            h = ThreadLocalRandom.getProbe();</span><br><span class="line">            wasUncontended = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">collide</span> <span class="operator">=</span> <span class="literal">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            CounterCell[] as; CounterCell a; <span class="type">int</span> n; <span class="type">long</span> v;</span><br><span class="line">            <span class="keyword">if</span> ((as = counterCells) != <span class="literal">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;            <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                        <span class="type">CounterCell</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CounterCell</span>(x); <span class="comment">// Optimistic create</span></span><br><span class="line">                        <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                            U.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                                CounterCell[] rs; <span class="type">int</span> m, j;</span><br><span class="line">                                <span class="keyword">if</span> ((rs = counterCells) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                    (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                    rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    rs[j] = r;</span><br><span class="line">                                    created = <span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                cellsBusy = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (created)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                    wasUncontended = <span class="literal">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class="line">                    collide = <span class="literal">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                    collide = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         U.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (counterCells == as) &#123;<span class="comment">// Expand table unless stale</span></span><br><span class="line">                            CounterCell[] rs = <span class="keyword">new</span> <span class="title class_">CounterCell</span>[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                                rs[i] = as[i];</span><br><span class="line">                            counterCells = rs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        cellsBusy = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">                &#125;</span><br><span class="line">                h = ThreadLocalRandom.advanceProbe(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                     U.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">init</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                    <span class="keyword">if</span> (counterCells == as) &#123;</span><br><span class="line">                        CounterCell[] rs = <span class="keyword">new</span> <span class="title class_">CounterCell</span>[<span class="number">2</span>];</span><br><span class="line">                        rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">CounterCell</span>(x);</span><br><span class="line">                        counterCells = rs;</span><br><span class="line">                        init = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (init)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="built_in">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">                <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Conversion from/to TreeBins -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces all linked nodes in bin at given index unless table is</span></span><br><span class="line"><span class="comment">     * too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; b; <span class="type">int</span> n, sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">                tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="literal">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p =</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                                  <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((p.prev = tl) == <span class="literal">null</span>)</span><br><span class="line">                                hd = p;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                tl.next = p;</span><br><span class="line">                            tl = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, index, <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hd));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list on non-TreeNodes replacing those in given list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">untreeify</span><span class="params">(Node&lt;K,V&gt; b)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; q = b; q != <span class="literal">null</span>; q = q.next) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(q.hash, q.key, q.val, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- TreeNodes -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Nodes for use in TreeBins</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="type">boolean</span> red;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</span><br><span class="line">                 TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findTreeNode(h, k, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the TreeNode (or null if not found) for the given key</span></span><br><span class="line"><span class="comment">         * starting at given root.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">findTreeNode</span><span class="params">(<span class="type">int</span> h, Object k, Class&lt;?&gt; kc)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>;</span><br><span class="line">                <span class="keyword">do</span>  &#123;</span><br><span class="line">                    <span class="type">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</span><br><span class="line">                    TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</span><br><span class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                        p = pl;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                        p = pr;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                        <span class="keyword">return</span> p;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="literal">null</span>)</span><br><span class="line">                        p = pr;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="literal">null</span>)</span><br><span class="line">                        p = pl;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="literal">null</span> ||</span><br><span class="line">                              (kc = comparableClassFor(k)) != <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">                             (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                        p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> q;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        p = pl;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- TreeBins -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TreeNodes used at the heads of bins. TreeBins do not hold user</span></span><br><span class="line"><span class="comment">     * keys or values, but instead point to list of TreeNodes and</span></span><br><span class="line"><span class="comment">     * their root. They also maintain a parasitic read-write lock</span></span><br><span class="line"><span class="comment">     * forcing writers (who hold bin lock) to wait for readers (who do</span></span><br><span class="line"><span class="comment">     * not) to complete before tree restructuring operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeBin</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; root;</span><br><span class="line">        <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">volatile</span> Thread waiter;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">int</span> lockState;</span><br><span class="line">        <span class="comment">// values for lockState</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WRITER</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// set while holding write lock</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WAITER</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// set when waiting for write lock</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">READER</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">// increment value for setting read lock</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tie-breaking utility for ordering insertions when equal</span></span><br><span class="line"><span class="comment">         * hashCodes and non-comparable. We don&#x27;t require a total</span></span><br><span class="line"><span class="comment">         * order, just a consistent insertion rule to maintain</span></span><br><span class="line"><span class="comment">         * equivalence across rebalancings. Tie-breaking further than</span></span><br><span class="line"><span class="comment">         * necessary simplifies testing a bit.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">tieBreakOrder</span><span class="params">(Object a, Object b)</span> &#123;</span><br><span class="line">            <span class="type">int</span> d;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="literal">null</span> || b == <span class="literal">null</span> ||</span><br><span class="line">                (d = a.getClass().getName().</span><br><span class="line">                 compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">                d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                     -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates bin with initial set of nodes headed by b.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TreeBin(TreeNode&lt;K,V&gt; b) &#123;</span><br><span class="line">            <span class="built_in">super</span>(TREEBIN, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">this</span>.first = b;</span><br><span class="line">            TreeNode&lt;K,V&gt; r = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="literal">null</span>; x = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">                x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.parent = <span class="literal">null</span>;</span><br><span class="line">                    x.red = <span class="literal">false</span>;</span><br><span class="line">                    r = x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</span><br><span class="line">                        <span class="type">int</span> dir, ph;</span><br><span class="line">                        <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                  (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line">                            TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                            x.parent = xp;</span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            r = balanceInsertion(r, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.root = r;</span><br><span class="line">            <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Acquires write lock for tree restructuring.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lockRoot</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!U.compareAndSwapInt(<span class="built_in">this</span>, LOCKSTATE, <span class="number">0</span>, WRITER))</span><br><span class="line">                contendedLock(); <span class="comment">// offload to separate method</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Releases write lock for tree restructuring.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">unlockRoot</span><span class="params">()</span> &#123;</span><br><span class="line">            lockState = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Possibly blocks awaiting root lock.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">contendedLock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">waiting</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> s;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((s = lockState) &amp; ~WAITER) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, LOCKSTATE, s, WRITER)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (waiting)</span><br><span class="line">                            waiter = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((s &amp; WAITER) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, LOCKSTATE, s, s | WAITER)) &#123;</span><br><span class="line">                        waiting = <span class="literal">true</span>;</span><br><span class="line">                        waiter = Thread.currentThread();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (waiting)</span><br><span class="line">                    LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns matching node or null if none. Tries to search</span></span><br><span class="line"><span class="comment">         * using tree comparisons from root, but continues linear</span></span><br><span class="line"><span class="comment">         * search when lock not available.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = first; e != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    <span class="type">int</span> s; K ek;</span><br><span class="line">                    <span class="keyword">if</span> (((s = lockState) &amp; (WAITER|WRITER)) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                            ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                            <span class="keyword">return</span> e;</span><br><span class="line">                        e = e.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, LOCKSTATE, s,</span><br><span class="line">                                                 s + READER)) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            p = ((r = root) == <span class="literal">null</span> ? <span class="literal">null</span> :</span><br><span class="line">                                 r.findTreeNode(h, k, <span class="literal">null</span>));</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            Thread w;</span><br><span class="line">                            <span class="keyword">if</span> (U.getAndAddInt(<span class="built_in">this</span>, LOCKSTATE, -READER) ==</span><br><span class="line">                                (READER|WAITER) &amp;&amp; (w = waiter) != <span class="literal">null</span>)</span><br><span class="line">                                LockSupport.unpark(w);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Finds or adds a node.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> null if added</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(<span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">                    first = root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(h, k, v, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                        searched = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.findTreeNode(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                            ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.findTreeNode(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; x, f = first;</span><br><span class="line">                    first = x = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(h, k, v, f, xp);</span><br><span class="line">                    <span class="keyword">if</span> (f != <span class="literal">null</span>)</span><br><span class="line">                        f.prev = x;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="keyword">if</span> (!xp.red)</span><br><span class="line">                        x.red = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        lockRoot();</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            root = balanceInsertion(root, x);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            unlockRoot();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the given node, that must be present before this</span></span><br><span class="line"><span class="comment">         * call.  This is messier than typical red-black deletion code</span></span><br><span class="line"><span class="comment">         * because we cannot swap the contents of an interior node</span></span><br><span class="line"><span class="comment">         * with a leaf successor that is pinned by &quot;next&quot; pointers</span></span><br><span class="line"><span class="comment">         * that are accessible independently of lock. So instead we</span></span><br><span class="line"><span class="comment">         * swap the tree linkages.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> true if now too small, so should be untreeified</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">removeTreeNode</span><span class="params">(TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; next = (TreeNode&lt;K,V&gt;)p.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; pred = p.prev;  <span class="comment">// unlink traversal pointers</span></span><br><span class="line">            TreeNode&lt;K,V&gt; r, rl;</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">                first = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = next;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="literal">null</span>)</span><br><span class="line">                next.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((r = root) == <span class="literal">null</span> || r.right == <span class="literal">null</span> || <span class="comment">// too small</span></span><br><span class="line">                (rl = r.left) == <span class="literal">null</span> || rl.left == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            lockRoot();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; replacement;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl = p.left;</span><br><span class="line">                TreeNode&lt;K,V&gt; pr = p.right;</span><br><span class="line">                <span class="keyword">if</span> (pl != <span class="literal">null</span> &amp;&amp; pr != <span class="literal">null</span>) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">                    <span class="keyword">while</span> ((sl = s.left) != <span class="literal">null</span>) <span class="comment">// find successor</span></span><br><span class="line">                        s = sl;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">                    TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">                    <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s&#x27;s direct parent</span></span><br><span class="line">                        p.parent = s;</span><br><span class="line">                        s.right = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">                        <span class="keyword">if</span> ((p.parent = sp) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                                sp.left = p;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                sp.right = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ((s.right = pr) != <span class="literal">null</span>)</span><br><span class="line">                            pr.parent = s;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p.left = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((p.right = sr) != <span class="literal">null</span>)</span><br><span class="line">                        sr.parent = p;</span><br><span class="line">                    <span class="keyword">if</span> ((s.left = pl) != <span class="literal">null</span>)</span><br><span class="line">                        pl.parent = s;</span><br><span class="line">                    <span class="keyword">if</span> ((s.parent = pp) == <span class="literal">null</span>)</span><br><span class="line">                        r = s;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = s;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        pp.right = s;</span><br><span class="line">                    <span class="keyword">if</span> (sr != <span class="literal">null</span>)</span><br><span class="line">                        replacement = sr;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        replacement = p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="literal">null</span>)</span><br><span class="line">                    replacement = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="literal">null</span>)</span><br><span class="line">                    replacement = pr;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    replacement = p;</span><br><span class="line">                <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">                    <span class="keyword">if</span> (pp == <span class="literal">null</span>)</span><br><span class="line">                        r = replacement;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = replacement;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        pp.right = replacement;</span><br><span class="line">                    p.left = p.right = p.parent = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                root = (p.red) ? r : balanceDeletion(r, replacement);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (p == replacement) &#123;  <span class="comment">// detach pointers</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; pp;</span><br><span class="line">                    <span class="keyword">if</span> ((pp = p.parent) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                            pp.left = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                            pp.right = <span class="literal">null</span>;</span><br><span class="line">                        p.parent = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlockRoot();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">        <span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                              TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (r = p.right) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="literal">null</span>)</span><br><span class="line">                    rl.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">                    (root = r).red = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                r.left = p;</span><br><span class="line">                p.parent = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                               TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (l = p.left) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="literal">null</span>)</span><br><span class="line">                    lr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">                    (root = l).red = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.parent = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                                    TreeNode&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">            x.red = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((xp = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xppr = xpp.right) != <span class="literal">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.red = <span class="literal">false</span>;</span><br><span class="line">                        xp.red = <span class="literal">false</span>;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                            root = rotateLeft(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="literal">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.red = <span class="literal">false</span>;</span><br><span class="line">                        xp.red = <span class="literal">false</span>;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                            root = rotateRight(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">balanceDeletion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                                   TreeNode&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="literal">null</span> || x == root)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">                    x.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xpr = xp.right) != <span class="literal">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                        xpr.red = <span class="literal">false</span>;</span><br><span class="line">                        xp.red = <span class="literal">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr == <span class="literal">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sr == <span class="literal">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                            (sl == <span class="literal">null</span> || !sl.red)) &#123;</span><br><span class="line">                            xpr.red = <span class="literal">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sr == <span class="literal">null</span> || !sr.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sl != <span class="literal">null</span>)</span><br><span class="line">                                    sl.red = <span class="literal">false</span>;</span><br><span class="line">                                xpr.red = <span class="literal">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpr);</span><br><span class="line">                                xpr = (xp = x.parent) == <span class="literal">null</span> ?</span><br><span class="line">                                    <span class="literal">null</span> : xp.right;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpr != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpr.red = (xp == <span class="literal">null</span>) ? <span class="literal">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sr = xpr.right) != <span class="literal">null</span>)</span><br><span class="line">                                    sr.red = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="literal">false</span>;</span><br><span class="line">                                root = rotateLeft(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="literal">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                        xpl.red = <span class="literal">false</span>;</span><br><span class="line">                        xp.red = <span class="literal">true</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl == <span class="literal">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sl == <span class="literal">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                            (sr == <span class="literal">null</span> || !sr.red)) &#123;</span><br><span class="line">                            xpl.red = <span class="literal">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sl == <span class="literal">null</span> || !sl.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sr != <span class="literal">null</span>)</span><br><span class="line">                                    sr.red = <span class="literal">false</span>;</span><br><span class="line">                                xpl.red = <span class="literal">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpl);</span><br><span class="line">                                xpl = (xp = x.parent) == <span class="literal">null</span> ?</span><br><span class="line">                                    <span class="literal">null</span> : xp.left;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpl != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpl.red = (xp == <span class="literal">null</span>) ? <span class="literal">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sl = xpl.left) != <span class="literal">null</span>)</span><br><span class="line">                                    sl.red = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="literal">false</span>;</span><br><span class="line">                                root = rotateRight(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Recursive invariant check</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">checkInvariants</span><span class="params">(TreeNode&lt;K,V&gt; t)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class="line">                tb = t.prev, tn = (TreeNode&lt;K,V&gt;)t.next;</span><br><span class="line">            <span class="keyword">if</span> (tb != <span class="literal">null</span> &amp;&amp; tb.next != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tn != <span class="literal">null</span> &amp;&amp; tn.prev != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tp != <span class="literal">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="literal">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="literal">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.red &amp;&amp; tl != <span class="literal">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class="literal">null</span> &amp;&amp; tr.red)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="literal">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="literal">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> LOCKSTATE;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">                Class&lt;?&gt; k = TreeBin.class;</span><br><span class="line">                LOCKSTATE = U.objectFieldOffset</span><br><span class="line">                    (k.getDeclaredField(<span class="string">&quot;lockState&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ----------------Table Traversal -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Records the table, its length, and current traversal index for a</span></span><br><span class="line"><span class="comment">     * traverser that must process a region of a forwarded table before</span></span><br><span class="line"><span class="comment">     * proceeding with current table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TableStack</span>&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        TableStack&lt;K,V&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encapsulates traversal for methods such as containsValue; also</span></span><br><span class="line"><span class="comment">     * serves as a base class for other iterators and spliterators.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Method advance visits once each still-valid node that was</span></span><br><span class="line"><span class="comment">     * reachable upon iterator construction. It might miss some that</span></span><br><span class="line"><span class="comment">     * were added to a bin after the bin was visited, which is OK wrt</span></span><br><span class="line"><span class="comment">     * consistency guarantees. Maintaining this property in the face</span></span><br><span class="line"><span class="comment">     * of possible ongoing resizes requires a fair amount of</span></span><br><span class="line"><span class="comment">     * bookkeeping state that is difficult to optimize away amidst</span></span><br><span class="line"><span class="comment">     * volatile accesses.  Even so, traversal maintains reasonable</span></span><br><span class="line"><span class="comment">     * throughput.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Normally, iteration proceeds bin-by-bin traversing lists.</span></span><br><span class="line"><span class="comment">     * However, if the table has been resized, then all future steps</span></span><br><span class="line"><span class="comment">     * must traverse both the bin at the current index as well as at</span></span><br><span class="line"><span class="comment">     * (index + baseSize); and so on for further resizings. To</span></span><br><span class="line"><span class="comment">     * paranoically cope with potential sharing by users of iterators</span></span><br><span class="line"><span class="comment">     * across threads, iteration terminates if a bounds checks fails</span></span><br><span class="line"><span class="comment">     * for a table read.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Traverser</span>&lt;K,V&gt; &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;        <span class="comment">// current table; updated if resized</span></span><br><span class="line">        Node&lt;K,V&gt; next;         <span class="comment">// the next entry to use</span></span><br><span class="line">        TableStack&lt;K,V&gt; stack, spare; <span class="comment">// to save/restore on ForwardingNodes</span></span><br><span class="line">        <span class="type">int</span> index;              <span class="comment">// index of bin to use next</span></span><br><span class="line">        <span class="type">int</span> baseIndex;          <span class="comment">// current index of initial table</span></span><br><span class="line">        <span class="type">int</span> baseLimit;          <span class="comment">// index bound for initial table</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> baseSize;     <span class="comment">// initial table size</span></span><br><span class="line"></span><br><span class="line">        Traverser(Node&lt;K,V&gt;[] tab, <span class="type">int</span> size, <span class="type">int</span> index, <span class="type">int</span> limit) &#123;</span><br><span class="line">            <span class="built_in">this</span>.tab = tab;</span><br><span class="line">            <span class="built_in">this</span>.baseSize = size;</span><br><span class="line">            <span class="built_in">this</span>.baseIndex = <span class="built_in">this</span>.index = index;</span><br><span class="line">            <span class="built_in">this</span>.baseLimit = limit;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Advances if possible, returning next valid node, or null if none.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">advance</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = next) != <span class="literal">null</span>)</span><br><span class="line">                e = e.next;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] t; <span class="type">int</span> i, n;  <span class="comment">// must use locals in checks</span></span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span>)</span><br><span class="line">                    <span class="type">return</span> <span class="variable">next</span> <span class="operator">=</span> e;</span><br><span class="line">                <span class="keyword">if</span> (baseIndex &gt;= baseLimit || (t = tab) == <span class="literal">null</span> ||</span><br><span class="line">                    (n = t.length) &lt;= (i = index) || i &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="type">return</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e = tabAt(t, i)) != <span class="literal">null</span> &amp;&amp; e.hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                        e = <span class="literal">null</span>;</span><br><span class="line">                        pushState(t, i, n);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeBin)</span><br><span class="line">                        e = ((TreeBin&lt;K,V&gt;)e).first;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        e = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack != <span class="literal">null</span>)</span><br><span class="line">                    recoverState(n);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((index = i + baseSize) &gt;= n)</span><br><span class="line">                    index = ++baseIndex; <span class="comment">// visit upper slots if present</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Saves traversal state upon encountering a forwarding node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushState</span><span class="params">(Node&lt;K,V&gt;[] t, <span class="type">int</span> i, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s = spare;  <span class="comment">// reuse if possible</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">                spare = s.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s = <span class="keyword">new</span> <span class="title class_">TableStack</span>&lt;K,V&gt;();</span><br><span class="line">            s.tab = t;</span><br><span class="line">            s.length = n;</span><br><span class="line">            s.index = i;</span><br><span class="line">            s.next = stack;</span><br><span class="line">            stack = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Possibly pops traversal state.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> n length of current table</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recoverState</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s; <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((s = stack) != <span class="literal">null</span> &amp;&amp; (index += (len = s.length)) &gt;= n) &#123;</span><br><span class="line">                n = len;</span><br><span class="line">                index = s.index;</span><br><span class="line">                tab = s.tab;</span><br><span class="line">                s.tab = <span class="literal">null</span>;</span><br><span class="line">                TableStack&lt;K,V&gt; next = s.next;</span><br><span class="line">                s.next = spare; <span class="comment">// save for reuse</span></span><br><span class="line">                stack = next;</span><br><span class="line">                spare = s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="literal">null</span> &amp;&amp; (index += baseSize) &gt;= n)</span><br><span class="line">                index = ++baseIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base of key, value, and entry Iterators. Adds fields to</span></span><br><span class="line"><span class="comment">     * Traverser to support iterator.remove.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Traverser</span>&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        Node&lt;K,V&gt; lastReturned;</span><br><span class="line">        BaseIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> size, <span class="type">int</span> index, <span class="type">int</span> limit,</span><br><span class="line">                    ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="built_in">this</span>.map = map;</span><br><span class="line">            advance();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123; <span class="keyword">return</span> next != <span class="literal">null</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasMoreElements</span><span class="params">()</span> &#123; <span class="keyword">return</span> next != <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = lastReturned) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            lastReturned = <span class="literal">null</span>;</span><br><span class="line">            map.replaceNode(p.key, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeyIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;K&gt;, Enumeration&lt;K&gt; &#123;</span><br><span class="line">        KeyIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                    ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">            lastReturned = p;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">nextElement</span><span class="params">()</span> &#123; <span class="keyword">return</span> next(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValueIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;V&gt;, Enumeration&lt;V&gt; &#123;</span><br><span class="line">        ValueIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                      ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">            lastReturned = p;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">nextElement</span><span class="params">()</span> &#123; <span class="keyword">return</span> next(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">        EntryIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                      ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">            <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">            lastReturned = p;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(k, v, map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Exported Entry for EntryIterator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> K key; <span class="comment">// non-null</span></span><br><span class="line">        V val;       <span class="comment">// non-null</span></span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        MapEntry(K key, V val, ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.map = map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>    &#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            Object k, v; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                    (v == val || v.equals(val)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Sets our entry&#x27;s value and writes through to the map. The</span></span><br><span class="line"><span class="comment">         * value to return is somewhat arbitrary here. Since we do not</span></span><br><span class="line"><span class="comment">         * necessarily track asynchronous changes, the most recent</span></span><br><span class="line"><span class="comment">         * &quot;previous&quot; value could be different from what we return (or</span></span><br><span class="line"><span class="comment">         * could even have been removed, in which case the put will</span></span><br><span class="line"><span class="comment">         * re-establish). We do not and cannot guarantee more.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> val;</span><br><span class="line">            val = value;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeySpliterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Traverser</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Spliterator</span>&lt;K&gt; &#123;</span><br><span class="line">        <span class="type">long</span> est;               <span class="comment">// size estimate</span></span><br><span class="line">        KeySpliterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> size, <span class="type">int</span> index, <span class="type">int</span> limit,</span><br><span class="line">                       <span class="type">long</span> est) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="built_in">this</span>.est = est;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;K&gt; <span class="title function_">trySplit</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> i, f, h;</span><br><span class="line">            <span class="keyword">return</span> (h = ((i = baseIndex) + (f = baseLimit)) &gt;&gt;&gt; <span class="number">1</span>) &lt;= i ? <span class="literal">null</span> :</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">KeySpliterator</span>&lt;K,V&gt;(tab, baseSize, baseLimit = h,</span><br><span class="line">                                        f, est &gt;&gt;&gt;= <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>;)</span><br><span class="line">                action.accept(p.key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAdvance</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            action.accept(p.key);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">estimateSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> est; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">characteristics</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.DISTINCT | Spliterator.CONCURRENT |</span><br><span class="line">                Spliterator.NONNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValueSpliterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Traverser</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Spliterator</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="type">long</span> est;               <span class="comment">// size estimate</span></span><br><span class="line">        ValueSpliterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> size, <span class="type">int</span> index, <span class="type">int</span> limit,</span><br><span class="line">                         <span class="type">long</span> est) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="built_in">this</span>.est = est;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;V&gt; <span class="title function_">trySplit</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> i, f, h;</span><br><span class="line">            <span class="keyword">return</span> (h = ((i = baseIndex) + (f = baseLimit)) &gt;&gt;&gt; <span class="number">1</span>) &lt;= i ? <span class="literal">null</span> :</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ValueSpliterator</span>&lt;K,V&gt;(tab, baseSize, baseLimit = h,</span><br><span class="line">                                          f, est &gt;&gt;&gt;= <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>;)</span><br><span class="line">                action.accept(p.val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAdvance</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            action.accept(p.val);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">estimateSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> est; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">characteristics</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.CONCURRENT | Spliterator.NONNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntrySpliterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Traverser</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Spliterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map; <span class="comment">// To export MapEntry</span></span><br><span class="line">        <span class="type">long</span> est;               <span class="comment">// size estimate</span></span><br><span class="line">        EntrySpliterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> size, <span class="type">int</span> index, <span class="type">int</span> limit,</span><br><span class="line">                         <span class="type">long</span> est, ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="built_in">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="built_in">this</span>.map = map;</span><br><span class="line">            <span class="built_in">this</span>.est = est;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; trySplit() &#123;</span><br><span class="line">            <span class="type">int</span> i, f, h;</span><br><span class="line">            <span class="keyword">return</span> (h = ((i = baseIndex) + (f = baseLimit)) &gt;&gt;&gt; <span class="number">1</span>) &lt;= i ? <span class="literal">null</span> :</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">EntrySpliterator</span>&lt;K,V&gt;(tab, baseSize, baseLimit = h,</span><br><span class="line">                                          f, est &gt;&gt;&gt;= <span class="number">1</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                action.accept(<span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAdvance</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            action.accept(<span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">estimateSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> est; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">characteristics</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.DISTINCT | Spliterator.CONCURRENT |</span><br><span class="line">                Spliterator.NONNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parallel bulk operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes initial batch value for bulk tasks. The returned value</span></span><br><span class="line"><span class="comment">     * is approximately exp2 of the number of times (minus one) to</span></span><br><span class="line"><span class="comment">     * split task by two before executing leaf action. This value is</span></span><br><span class="line"><span class="comment">     * faster to compute and more convenient to use as a guide to</span></span><br><span class="line"><span class="comment">     * splitting than is the depth, since it is used while dividing by</span></span><br><span class="line"><span class="comment">     * two anyway.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">batchFor</span><span class="params">(<span class="type">long</span> b)</span> &#123;</span><br><span class="line">        <span class="type">long</span> n;</span><br><span class="line">        <span class="keyword">if</span> (b == Long.MAX_VALUE || (n = sumCount()) &lt;= <span class="number">1L</span> || n &lt; b)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sp</span> <span class="operator">=</span> ForkJoinPool.getCommonPoolParallelism() &lt;&lt; <span class="number">2</span>; <span class="comment">// slack of 4</span></span><br><span class="line">        <span class="keyword">return</span> (b &lt;= <span class="number">0L</span> || (n /= b) &gt;= sp) ? sp : (<span class="type">int</span>)n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each (key, value).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                        BiConsumer&lt;? <span class="built_in">super</span> K,? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachMappingTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each (key, value).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                            BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                            Consumer&lt;? <span class="built_in">super</span> U&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachTransformedMappingTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each (key, value), or null if none.  Upon</span></span><br><span class="line"><span class="comment">     * success, further element processing is suppressed and the</span></span><br><span class="line"><span class="comment">     * results of any other parallel invocations of the search</span></span><br><span class="line"><span class="comment">     * function are ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each (key, value), or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">search</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                        BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? extends U&gt; searchFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SearchMappingsTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">reduce</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                        BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                        BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? extends U&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceMappingsTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">reduceToDouble</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                 ToDoubleBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer,</span></span><br><span class="line"><span class="params">                                 <span class="type">double</span> basis,</span></span><br><span class="line"><span class="params">                                 DoubleBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceMappingsToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">reduceToLong</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                             ToLongBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer,</span></span><br><span class="line"><span class="params">                             <span class="type">long</span> basis,</span></span><br><span class="line"><span class="params">                             LongBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceMappingsToLongTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reduceToInt</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                           ToIntBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer,</span></span><br><span class="line"><span class="params">                           <span class="type">int</span> basis,</span></span><br><span class="line"><span class="params">                           IntBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceMappingsToIntTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachKey</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                           Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachKeyTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">forEachKey</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                               Function&lt;? <span class="built_in">super</span> K, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                               Consumer&lt;? <span class="built_in">super</span> U&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachTransformedKeyTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each key, or null if none. Upon success,</span></span><br><span class="line"><span class="comment">     * further element processing is suppressed and the results of</span></span><br><span class="line"><span class="comment">     * any other parallel invocations of the search function are</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">searchKeys</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                            Function&lt;? <span class="built_in">super</span> K, ? extends U&gt; searchFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SearchKeysTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating all keys using the given</span></span><br><span class="line"><span class="comment">     * reducer to combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating all keys using the given</span></span><br><span class="line"><span class="comment">     * reducer to combine values, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">reduceKeys</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                        BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> K, ? extends K&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reducer == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReduceKeysTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, or</span></span><br><span class="line"><span class="comment">     * null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">reduceKeys</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                            Function&lt;? <span class="built_in">super</span> K, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">         BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? extends U&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceKeysTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, and</span></span><br><span class="line"><span class="comment">     * the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">reduceKeysToDouble</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                     ToDoubleFunction&lt;? <span class="built_in">super</span> K&gt; transformer,</span></span><br><span class="line"><span class="params">                                     <span class="type">double</span> basis,</span></span><br><span class="line"><span class="params">                                     DoubleBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceKeysToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, and</span></span><br><span class="line"><span class="comment">     * the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">reduceKeysToLong</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                 ToLongFunction&lt;? <span class="built_in">super</span> K&gt; transformer,</span></span><br><span class="line"><span class="params">                                 <span class="type">long</span> basis,</span></span><br><span class="line"><span class="params">                                 LongBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceKeysToLongTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, and</span></span><br><span class="line"><span class="comment">     * the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reduceKeysToInt</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                               ToIntFunction&lt;? <span class="built_in">super</span> K&gt; transformer,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> basis,</span></span><br><span class="line"><span class="params">                               IntBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceKeysToIntTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachValue</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                             Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachValueTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">forEachValue</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                 Function&lt;? <span class="built_in">super</span> V, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                                 Consumer&lt;? <span class="built_in">super</span> U&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachTransformedValueTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each value, or null if none.  Upon success,</span></span><br><span class="line"><span class="comment">     * further element processing is suppressed and the results of</span></span><br><span class="line"><span class="comment">     * any other parallel invocations of the search function are</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each value, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">searchValues</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                              Function&lt;? <span class="built_in">super</span> V, ? extends U&gt; searchFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SearchValuesTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating all values using the</span></span><br><span class="line"><span class="comment">     * given reducer to combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">reduceValues</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                          BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? extends V&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reducer == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReduceValuesTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values, or</span></span><br><span class="line"><span class="comment">     * null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">reduceValues</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                              Function&lt;? <span class="built_in">super</span> V, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                              BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? extends U&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceValuesTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">reduceValuesToDouble</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                       ToDoubleFunction&lt;? <span class="built_in">super</span> V&gt; transformer,</span></span><br><span class="line"><span class="params">                                       <span class="type">double</span> basis,</span></span><br><span class="line"><span class="params">                                       DoubleBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceValuesToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">reduceValuesToLong</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                   ToLongFunction&lt;? <span class="built_in">super</span> V&gt; transformer,</span></span><br><span class="line"><span class="params">                                   <span class="type">long</span> basis,</span></span><br><span class="line"><span class="params">                                   LongBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceValuesToLongTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reduceValuesToInt</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                 ToIntFunction&lt;? <span class="built_in">super</span> V&gt; transformer,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> basis,</span></span><br><span class="line"><span class="params">                                 IntBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceValuesToIntTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each entry.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachEntry</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                             Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachEntryTask</span>&lt;K,V&gt;(<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">                                  action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each entry.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">forEachEntry</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                 Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                                 Consumer&lt;? <span class="built_in">super</span> U&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ForEachTransformedEntryTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each entry, or null if none.  Upon success,</span></span><br><span class="line"><span class="comment">     * further element processing is suppressed and the results of</span></span><br><span class="line"><span class="comment">     * any other parallel invocations of the search function are</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each entry, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">searchEntries</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                               Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; searchFunction)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SearchEntriesTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating all entries using the</span></span><br><span class="line"><span class="comment">     * given reducer to combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;K,V&gt; <span class="title function_">reduceEntries</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                        BiFunction&lt;Map.Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? extends Map.Entry&lt;K,V&gt;&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reducer == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReduceEntriesTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; U <span class="title function_">reduceEntries</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                               Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer,</span></span><br><span class="line"><span class="params">                               BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? extends U&gt; reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceEntriesTask</span>&lt;K,V,U&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">reduceEntriesToDouble</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                        ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span></span><br><span class="line"><span class="params">                                        <span class="type">double</span> basis,</span></span><br><span class="line"><span class="params">                                        DoubleBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceEntriesToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">reduceEntriesToLong</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                    ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span></span><br><span class="line"><span class="params">                                    <span class="type">long</span> basis,</span></span><br><span class="line"><span class="params">                                    LongBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceEntriesToLongTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reduceEntriesToInt</span><span class="params">(<span class="type">long</span> parallelismThreshold,</span></span><br><span class="line"><span class="params">                                  ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span></span><br><span class="line"><span class="params">                                  <span class="type">int</span> basis,</span></span><br><span class="line"><span class="params">                                  IntBinaryOperator reducer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="literal">null</span> || reducer == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReduceEntriesToIntTask</span>&lt;K,V&gt;</span><br><span class="line">            (<span class="literal">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="literal">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ----------------Views -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base class for views.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CollectionView</span>&lt;K,V,E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246763182397L</span>;</span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        CollectionView(ConcurrentHashMap&lt;K,V&gt; map)  &#123; <span class="built_in">this</span>.map = map; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the map backing this view.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the map backing this view</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> ConcurrentHashMap&lt;K,V&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123; <span class="keyword">return</span> map; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes all of the elements from this view, by removing all</span></span><br><span class="line"><span class="comment">         * the mappings from the map backing this view.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>      &#123; map.clear(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>        &#123; <span class="keyword">return</span> map.size(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="keyword">return</span> map.isEmpty(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// implementations below rely on concrete classes supplying these</span></span><br><span class="line">        <span class="comment">// abstract methods</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns an iterator over the elements in this collection.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;The returned iterator is</span></span><br><span class="line"><span class="comment">         * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the elements in this collection</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">oomeMsg</span> <span class="operator">=</span> <span class="string">&quot;Required array size too large&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">sz</span> <span class="operator">=</span> map.mappingCount();</span><br><span class="line">            <span class="keyword">if</span> (sz &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>(oomeMsg);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>)sz;</span><br><span class="line">            Object[] r = <span class="keyword">new</span> <span class="title class_">Object</span>[n];</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (E e : <span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>(oomeMsg);</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE - (MAX_ARRAY_SIZE &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>)</span><br><span class="line">                        n = MAX_ARRAY_SIZE;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        n += (n &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                    r = Arrays.copyOf(r, n);</span><br><span class="line">                &#125;</span><br><span class="line">                r[i++] = e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (i == n) ? r : Arrays.copyOf(r, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">sz</span> <span class="operator">=</span> map.mappingCount();</span><br><span class="line">            <span class="keyword">if</span> (sz &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>(oomeMsg);</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">int</span>)sz;</span><br><span class="line">            T[] r = (a.length &gt;= m) ? a :</span><br><span class="line">                (T[])java.lang.reflect.Array</span><br><span class="line">                .newInstance(a.getClass().getComponentType(), m);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> r.length;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (E e : <span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>(oomeMsg);</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE - (MAX_ARRAY_SIZE &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>)</span><br><span class="line">                        n = MAX_ARRAY_SIZE;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        n += (n &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                    r = Arrays.copyOf(r, n);</span><br><span class="line">                &#125;</span><br><span class="line">                r[i++] = (T)e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a == r &amp;&amp; i &lt; n) &#123;</span><br><span class="line">                r[i] = <span class="literal">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (i == n) ? r : Arrays.copyOf(r, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns a string representation of this collection.</span></span><br><span class="line"><span class="comment">         * The string representation consists of the string representations</span></span><br><span class="line"><span class="comment">         * of the collection&#x27;s elements in the order they are returned by</span></span><br><span class="line"><span class="comment">         * its iterator, enclosed in square brackets (&#123;<span class="doctag">@code</span> &quot;[]&quot;&#125;).</span></span><br><span class="line"><span class="comment">         * Adjacent elements are separated by the characters &#123;<span class="doctag">@code</span> &quot;, &quot;&#125;</span></span><br><span class="line"><span class="comment">         * (comma and space).  Elements are converted to strings as by</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> String#valueOf(Object)&#125;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> a string representation of this collection</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            sb.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">            Iterator&lt;E&gt; it = iterator();</span><br><span class="line">            <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">e</span> <span class="operator">=</span> it.next();</span><br><span class="line">                    sb.append(e == <span class="built_in">this</span> ? <span class="string">&quot;(this Collection)&quot;</span> : e);</span><br><span class="line">                    <span class="keyword">if</span> (!it.hasNext())</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object e : c) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e == <span class="literal">null</span> || !contains(e))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;E&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    modified = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> modified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;E&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!c.contains(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    modified = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> modified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A view of a ConcurrentHashMap as a &#123;<span class="doctag">@link</span> Set&#125; of keys, in</span></span><br><span class="line"><span class="comment">     * which additions may optionally be enabled by mapping to a</span></span><br><span class="line"><span class="comment">     * common value.  This class cannot be directly instantiated.</span></span><br><span class="line"><span class="comment">     * See &#123;<span class="doctag">@link</span> #keySet() keySet()&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #keySet(Object) keySet(V)&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #newKeySet() newKeySet()&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #newKeySet(int) newKeySet(int)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">KeySetView</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">CollectionView</span>&lt;K,V,K&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;K&gt;, java.io.Serializable &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246763182397L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">        KeySetView(ConcurrentHashMap&lt;K,V&gt; map, V value) &#123;  <span class="comment">// non-public</span></span><br><span class="line">            <span class="built_in">super</span>(map);</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the default mapped value for additions,</span></span><br><span class="line"><span class="comment">         * or &#123;<span class="doctag">@code</span> null&#125; if additions are not supported.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the default mapped value for additions, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">         * if not supported</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">getMappedValue</span><span class="params">()</span> &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> map.containsKey(o); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the key from this map view, by removing the key (and its</span></span><br><span class="line"><span class="comment">         * corresponding value) from the backing map.  This method does</span></span><br><span class="line"><span class="comment">         * nothing if the key is not in the map.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  o the key to be removed from the backing map</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the backing map contained the specified key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> map.remove(o) != <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the keys of the backing map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Adds the specified key to this set view by mapping the key to</span></span><br><span class="line"><span class="comment">         * the default mapped value in the backing map, if defined.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e key to be added</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this set changed as a result of the call</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException if no default mapped value</span></span><br><span class="line"><span class="comment">         * for additions was provided</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(K e)</span> &#123;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> ((v = value) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">            <span class="keyword">return</span> map.putVal(e, v, <span class="literal">true</span>) == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Adds all of the elements in the specified collection to this set,</span></span><br><span class="line"><span class="comment">         * as if by calling &#123;<span class="doctag">@link</span> #add&#125; on each one.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> c the elements to be inserted into this set</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this set changed as a result of the call</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the collection or any of its</span></span><br><span class="line"><span class="comment">         * elements are &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException if no default mapped value</span></span><br><span class="line"><span class="comment">         * for additions was provided</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends K&gt; c)</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> ((v = value) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">            <span class="keyword">for</span> (K e : c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.putVal(e, v, <span class="literal">true</span>) == <span class="literal">null</span>)</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> added;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (K e : <span class="built_in">this</span>)</span><br><span class="line">                h += e.hashCode();</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            Set&lt;?&gt; c;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Set) &amp;&amp;</span><br><span class="line">                    ((c = (Set&lt;?&gt;)o) == <span class="built_in">this</span> ||</span><br><span class="line">                     (containsAll(c) &amp;&amp; c.containsAll(<span class="built_in">this</span>))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;K&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> m.sumCount();</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySpliterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    action.accept(p.key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A view of a ConcurrentHashMap as a &#123;<span class="doctag">@link</span> Collection&#125; of</span></span><br><span class="line"><span class="comment">     * values, in which additions are disabled. This class cannot be</span></span><br><span class="line"><span class="comment">     * directly instantiated. See &#123;<span class="doctag">@link</span> #values()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValuesView</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">CollectionView</span>&lt;K,V,V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;V&gt;, java.io.Serializable &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2249069246763182397L</span>;</span><br><span class="line">        ValuesView(ConcurrentHashMap&lt;K,V&gt; map) &#123; <span class="built_in">super</span>(map); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Iterator&lt;V&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                        it.remove();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(V e)</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends V&gt; c)</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;V&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> m.sumCount();</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueSpliterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    action.accept(p.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A view of a ConcurrentHashMap as a &#123;<span class="doctag">@link</span> Set&#125; of (key, value)</span></span><br><span class="line"><span class="comment">     * entries.  This class cannot be directly instantiated. See</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #entrySet()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntrySetView</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">CollectionView</span>&lt;K,V,Map.Entry&lt;K,V&gt;&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;Map.Entry&lt;K,V&gt;&gt;, java.io.Serializable &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2249069246763182397L</span>;</span><br><span class="line">        EntrySetView(ConcurrentHashMap&lt;K,V&gt; map) &#123; <span class="built_in">super</span>(map); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            Object k, v, r; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (r = map.get(k)) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (v == r || v.equals(r)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            Object k, v; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    map.remove(k, v));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the entries of the backing map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntryIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Entry&lt;K,V&gt; e)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.putVal(e.getKey(), e.getValue(), <span class="literal">false</span>) == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends Entry&lt;K,V&gt;&gt; c)</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e : c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (add(e))</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> added;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    h += p.hashCode();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            Set&lt;?&gt; c;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Set) &amp;&amp;</span><br><span class="line">                    ((c = (Set&lt;?&gt;)o) == <span class="built_in">this</span> ||</span><br><span class="line">                     (containsAll(c) &amp;&amp; c.containsAll(<span class="built_in">this</span>))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> m.sumCount();</span><br><span class="line">            <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySpliterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    action.accept(<span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base class for bulk tasks. Repeats some fields and code from</span></span><br><span class="line"><span class="comment">     * class Traverser, because we need to subclass CountedCompleter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BulkTask</span>&lt;K,V,R&gt; <span class="keyword">extends</span> <span class="title class_">CountedCompleter</span>&lt;R&gt; &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;        <span class="comment">// same as Traverser</span></span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">        TableStack&lt;K,V&gt; stack, spare;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="type">int</span> baseIndex;</span><br><span class="line">        <span class="type">int</span> baseLimit;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> baseSize;</span><br><span class="line">        <span class="type">int</span> batch;              <span class="comment">// split control</span></span><br><span class="line"></span><br><span class="line">        BulkTask(BulkTask&lt;K,V,?&gt; par, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t) &#123;</span><br><span class="line">            <span class="built_in">super</span>(par);</span><br><span class="line">            <span class="built_in">this</span>.batch = b;</span><br><span class="line">            <span class="built_in">this</span>.index = <span class="built_in">this</span>.baseIndex = i;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">this</span>.tab = t) == <span class="literal">null</span>)</span><br><span class="line">                <span class="built_in">this</span>.baseSize = <span class="built_in">this</span>.baseLimit = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (par == <span class="literal">null</span>)</span><br><span class="line">                <span class="built_in">this</span>.baseSize = <span class="built_in">this</span>.baseLimit = t.length;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.baseLimit = f;</span><br><span class="line">                <span class="built_in">this</span>.baseSize = par.baseSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Same as Traverser version</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">advance</span><span class="params">()</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = next) != <span class="literal">null</span>)</span><br><span class="line">                e = e.next;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] t; <span class="type">int</span> i, n;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span>)</span><br><span class="line">                    <span class="type">return</span> <span class="variable">next</span> <span class="operator">=</span> e;</span><br><span class="line">                <span class="keyword">if</span> (baseIndex &gt;= baseLimit || (t = tab) == <span class="literal">null</span> ||</span><br><span class="line">                    (n = t.length) &lt;= (i = index) || i &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="type">return</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e = tabAt(t, i)) != <span class="literal">null</span> &amp;&amp; e.hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                        e = <span class="literal">null</span>;</span><br><span class="line">                        pushState(t, i, n);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeBin)</span><br><span class="line">                        e = ((TreeBin&lt;K,V&gt;)e).first;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        e = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack != <span class="literal">null</span>)</span><br><span class="line">                    recoverState(n);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((index = i + baseSize) &gt;= n)</span><br><span class="line">                    index = ++baseIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushState</span><span class="params">(Node&lt;K,V&gt;[] t, <span class="type">int</span> i, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s = spare;</span><br><span class="line">            <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">                spare = s.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s = <span class="keyword">new</span> <span class="title class_">TableStack</span>&lt;K,V&gt;();</span><br><span class="line">            s.tab = t;</span><br><span class="line">            s.length = n;</span><br><span class="line">            s.index = i;</span><br><span class="line">            s.next = stack;</span><br><span class="line">            stack = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recoverState</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s; <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((s = stack) != <span class="literal">null</span> &amp;&amp; (index += (len = s.length)) &gt;= n) &#123;</span><br><span class="line">                n = len;</span><br><span class="line">                index = s.index;</span><br><span class="line">                tab = s.tab;</span><br><span class="line">                s.tab = <span class="literal">null</span>;</span><br><span class="line">                TableStack&lt;K,V&gt; next = s.next;</span><br><span class="line">                s.next = spare; <span class="comment">// save for reuse</span></span><br><span class="line">                stack = next;</span><br><span class="line">                spare = s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="literal">null</span> &amp;&amp; (index += baseSize) &gt;= n)</span><br><span class="line">                index = ++baseIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Task classes. Coded in a regular but ugly format/style to</span></span><br><span class="line"><span class="comment">     * simplify checks that each variant differs in the right way from</span></span><br><span class="line"><span class="comment">     * others. The null screenings exist because compilers cannot tell</span></span><br><span class="line"><span class="comment">     * that we&#x27;ve already null-checked task arguments, so we force</span></span><br><span class="line"><span class="comment">     * simplest hoisted bypass to help avoid convoluted traps.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachKeyTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> K&gt; action;</span><br><span class="line">        ForEachKeyTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Consumer&lt;? <span class="built_in">super</span> K&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> K&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachKeyTask</span>&lt;K,V&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>;)</span><br><span class="line">                    action.accept(p.key);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachValueTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> V&gt; action;</span><br><span class="line">        ForEachValueTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Consumer&lt;? <span class="built_in">super</span> V&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> V&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachValueTask</span>&lt;K,V&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>;)</span><br><span class="line">                    action.accept(p.val);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachEntryTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> Entry&lt;K,V&gt;&gt; action;</span><br><span class="line">        ForEachEntryTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Consumer&lt;? <span class="built_in">super</span> Entry&lt;K,V&gt;&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> Entry&lt;K,V&gt;&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachEntryTask</span>&lt;K,V&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    action.accept(p);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachMappingTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiConsumer&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; action;</span><br><span class="line">        ForEachMappingTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             BiConsumer&lt;? <span class="built_in">super</span> K,? <span class="built_in">super</span> V&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiConsumer&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachMappingTask</span>&lt;K,V&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    action.accept(p.key, p.val);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachTransformedKeyTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedKeyTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer, Consumer&lt;? <span class="built_in">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer; <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachTransformedKeyTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key)) != <span class="literal">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachTransformedValueTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedValueTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer, Consumer&lt;? <span class="built_in">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer; <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachTransformedValueTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.val)) != <span class="literal">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachTransformedEntryTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedEntryTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer, Consumer&lt;? <span class="built_in">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer; <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachTransformedEntryTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p)) != <span class="literal">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForEachTransformedMappingTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Void&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedMappingTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer,</span><br><span class="line">             Consumer&lt;? <span class="built_in">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer; <span class="built_in">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="built_in">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="built_in">this</span>.action) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ForEachTransformedMappingTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key, p.val)) != <span class="literal">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SearchKeysTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchKeysTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.searchFunction = searchFunction; <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="built_in">this</span>.searchFunction) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="built_in">this</span>.result) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">SearchKeysTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p.key)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="literal">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SearchValuesTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchValuesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.searchFunction = searchFunction; <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="built_in">this</span>.searchFunction) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="built_in">this</span>.result) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">SearchValuesTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p.val)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="literal">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SearchEntriesTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchEntriesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.searchFunction = searchFunction; <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="built_in">this</span>.searchFunction) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="built_in">this</span>.result) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">SearchEntriesTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="literal">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SearchMappingsTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchMappingsTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="built_in">this</span>.searchFunction = searchFunction; <span class="built_in">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="built_in">this</span>.searchFunction) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="built_in">this</span>.result) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">SearchMappingsTask</span>&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p.key, p.val)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="literal">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReduceKeysTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,K&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; reducer;</span><br><span class="line">        K result;</span><br><span class="line">        ReduceKeysTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        ReduceKeysTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             ReduceKeysTask&lt;K,V&gt; nextRight,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">ReduceKeysTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">K</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    <span class="type">K</span> <span class="variable">u</span> <span class="operator">=</span> p.key;</span><br><span class="line">                    r = (r == <span class="literal">null</span>) ? u : u == <span class="literal">null</span> ? r : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    ReduceKeysTask&lt;K,V&gt;</span><br><span class="line">                        t = (ReduceKeysTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        K tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReduceValuesTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; reducer;</span><br><span class="line">        V result;</span><br><span class="line">        ReduceValuesTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        ReduceValuesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             ReduceValuesTask&lt;K,V&gt; nextRight,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">ReduceValuesTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">V</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">                    r = (r == <span class="literal">null</span>) ? v : reducer.apply(r, v);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    ReduceValuesTask&lt;K,V&gt;</span><br><span class="line">                        t = (ReduceValuesTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        V tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReduceEntriesTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;Map.Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt;&gt; reducer;</span><br><span class="line">        Map.Entry&lt;K,V&gt; result;</span><br><span class="line">        ReduceEntriesTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        ReduceEntriesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             ReduceEntriesTask&lt;K,V&gt; nextRight,</span><br><span class="line">             BiFunction&lt;Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt;&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;Map.Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt;&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">ReduceEntriesTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                Map.Entry&lt;K,V&gt; r = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = (r == <span class="literal">null</span>) ? p : reducer.apply(r, p);</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    ReduceEntriesTask&lt;K,V&gt;</span><br><span class="line">                        t = (ReduceEntriesTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        Map.Entry&lt;K,V&gt; tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceKeysTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceKeysTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> K, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceKeysTask</span>&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">U</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key)) != <span class="literal">null</span>)</span><br><span class="line">                        r = (r == <span class="literal">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceKeysTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceValuesTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceValuesTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceValuesTask</span>&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">U</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.val)) != <span class="literal">null</span>)</span><br><span class="line">                        r = (r == <span class="literal">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceValuesTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceEntriesTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceEntriesTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             Function&lt;Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceEntriesTask</span>&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">U</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p)) != <span class="literal">null</span>)</span><br><span class="line">                        r = (r == <span class="literal">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceEntriesTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceMappingsTask</span>&lt;K,V,U&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,U&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceMappingsTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> U <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="built_in">super</span> U, ? <span class="built_in">super</span> U, ? <span class="keyword">extends</span> <span class="title class_">U</span>&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceMappingsTask</span>&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">U</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key, p.val)) != <span class="literal">null</span>)</span><br><span class="line">                        r = (r == <span class="literal">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceMappingsTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="literal">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="literal">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceKeysToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Double&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="built_in">super</span> K&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> basis;</span><br><span class="line">        <span class="type">double</span> result;</span><br><span class="line">        MapReduceKeysToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleFunction&lt;? <span class="built_in">super</span> K&gt; transformer,</span><br><span class="line">             <span class="type">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="built_in">super</span> K&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceKeysToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p.key));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceKeysToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceValuesToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Double&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> basis;</span><br><span class="line">        <span class="type">double</span> result;</span><br><span class="line">        MapReduceValuesToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleFunction&lt;? <span class="built_in">super</span> V&gt; transformer,</span><br><span class="line">             <span class="type">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceValuesToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceValuesToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceEntriesToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Double&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> basis;</span><br><span class="line">        <span class="type">double</span> result;</span><br><span class="line">        MapReduceEntriesToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span><br><span class="line">             <span class="type">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceEntriesToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceEntriesToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceMappingsToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Double&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> basis;</span><br><span class="line">        <span class="type">double</span> result;</span><br><span class="line">        MapReduceMappingsToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer,</span><br><span class="line">             <span class="type">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceMappingsToDoubleTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p.key, p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceMappingsToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceKeysToLongTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Long&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongFunction&lt;? <span class="built_in">super</span> K&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> basis;</span><br><span class="line">        <span class="type">long</span> result;</span><br><span class="line">        MapReduceKeysToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongFunction&lt;? <span class="built_in">super</span> K&gt; transformer,</span><br><span class="line">             <span class="type">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongFunction&lt;? <span class="built_in">super</span> K&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceKeysToLongTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p.key));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceKeysToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceValuesToLongTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Long&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongFunction&lt;? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> basis;</span><br><span class="line">        <span class="type">long</span> result;</span><br><span class="line">        MapReduceValuesToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongFunction&lt;? <span class="built_in">super</span> V&gt; transformer,</span><br><span class="line">             <span class="type">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongFunction&lt;? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceValuesToLongTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceValuesToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceEntriesToLongTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Long&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> basis;</span><br><span class="line">        <span class="type">long</span> result;</span><br><span class="line">        MapReduceEntriesToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span><br><span class="line">             <span class="type">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceEntriesToLongTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceEntriesToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceMappingsToLongTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Long&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> basis;</span><br><span class="line">        <span class="type">long</span> result;</span><br><span class="line">        MapReduceMappingsToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer,</span><br><span class="line">             <span class="type">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceMappingsToLongTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p.key, p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceMappingsToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceKeysToIntTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Integer&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntFunction&lt;? <span class="built_in">super</span> K&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> basis;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        MapReduceKeysToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntFunction&lt;? <span class="built_in">super</span> K&gt; transformer,</span><br><span class="line">             <span class="type">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntFunction&lt;? <span class="built_in">super</span> K&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceKeysToIntTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p.key));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceKeysToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceValuesToIntTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Integer&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntFunction&lt;? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> basis;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        MapReduceValuesToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntFunction&lt;? <span class="built_in">super</span> V&gt; transformer,</span><br><span class="line">             <span class="type">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntFunction&lt;? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceValuesToIntTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceValuesToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceEntriesToIntTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Integer&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> basis;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        MapReduceEntriesToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span><br><span class="line">             <span class="type">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceEntriesToIntTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceEntriesToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MapReduceMappingsToIntTask</span>&lt;K,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">BulkTask</span>&lt;K,V,Integer&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> basis;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        MapReduceMappingsToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="type">int</span> b, <span class="type">int</span> i, <span class="type">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer,</span><br><span class="line">             <span class="type">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="built_in">super</span>(p, b, i, f, t); <span class="built_in">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">            <span class="built_in">this</span>.basis = basis; <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getRawResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntBiFunction&lt;? <span class="built_in">super</span> K, ? <span class="built_in">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="built_in">this</span>.transformer) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="built_in">this</span>.reducer) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> <span class="title class_">MapReduceMappingsToIntTask</span>&lt;K,V&gt;</span><br><span class="line">                     (<span class="built_in">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="literal">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p.key, p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="literal">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceMappingsToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SIZECTL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> TRANSFERINDEX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> BASECOUNT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> CELLSBUSY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> CELLVALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> ABASE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> ASHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class="line">            SIZECTL = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;sizeCtl&quot;</span>));</span><br><span class="line">            TRANSFERINDEX = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;transferIndex&quot;</span>));</span><br><span class="line">            BASECOUNT = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;baseCount&quot;</span>));</span><br><span class="line">            CELLSBUSY = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;cellsBusy&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; ck = CounterCell.class;</span><br><span class="line">            CELLVALUE = U.objectFieldOffset</span><br><span class="line">                (ck.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; ak = Node[].class;</span><br><span class="line">            ABASE = U.arrayBaseOffset(ak);</span><br><span class="line">            <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> U.arrayIndexScale(ak);</span><br><span class="line">            <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">            ASHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>翻译</category>
        <category>Java源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式锁</title>
    <url>/posts/64631/</url>
    <content><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2>
<p>本文译自<a href="https://redis.io/docs/reference/patterns/distributed-locks/">Redis官方文档的关于分布式锁部分的内容</a></p>
<span id="more"></span>
<h2 id="译文"><a class="markdownIt-Anchor" href="#译文"></a> 译文</h2>
<p>在不同进程必须排他地去使用共享资源的场景里，分布式锁非常有用。</p>
<p>目前已经有不少的库和博客描述了如何通过Redis来实现分布式锁管理（DLM，Distributed Lock Manager），但每个库却使用了不同的方式，而且不少库还使用了简单低可用的方式，我们通过稍微复杂点的设计，就可以获得高可用。</p>
<p>本文描述了如何实现一个更规范的Redis分布式锁算法。</p>
<h2 id="原文"><a class="markdownIt-Anchor" href="#原文"></a> 原文</h2>
<blockquote>
<p><a href="https://redis.io/docs/reference/patterns/distributed-locks/">Distributed Locks with Redis</a></p>
</blockquote>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Redis官方文档</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis如何处理过期的缓存key</title>
    <url>/posts/56398/</url>
    <content><![CDATA[<h1 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h1>
<p>最近在查找Redis的key过期策略相关的资料，发现网上的中文内容大部分都是互相复制的，后来换了英文搜索，觉得还是<a href="https://redis.io/commands/expire/#how-redis-expires-keys">官方文档</a>才是权威。本文就是译自其中介绍过期缓存key的处理算法的内容。</p>
<span id="more"></span>
<h1 id="译文"><a class="markdownIt-Anchor" href="#译文"></a> 译文</h1>
<p>Redis通过两种方式来处理过期的key：被动方式和主动方式。<br />
当客户端尝试访问某个key时，如果Redis发现该key已经超时了，此时该key会被过期。<br />
当然，这么做是不够的，毕竟有些key可能永远不会被再次访问。由于这些key也应该被过期，Redis会定时随机测试部分key看是否要将其过期。所有过期的key都将被从key空间里删除。<br />
Redis每秒会做10次以下的步骤：</p>
<ol>
<li>随机测试20个key进行相关的过期检测。</li>
<li>删除所有已过期key。</li>
<li>如果超过25%的key都过期了，重新开始步骤1。</li>
</ol>
<p>这是一个很简单的概率算法，其基本思想是：假设我们的随机样本代表了整个key集，然后我们不断让那些可能需要被过期的key都过期掉，直到这个比例低于25%<br />
也就是说，在任意一个时间内存里已过期的key的量的最大值为每秒最大写入操作量除以 4。</p>
<h1 id="原文"><a class="markdownIt-Anchor" href="#原文"></a> 原文</h1>
<blockquote>
<p><a href="https://redis.io/commands/expire/#how-redis-expires-keys">How Redis expires keys</a></p>
</blockquote>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Redis官方文档</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>《卓有成效的管理者》笔记</title>
    <url>/posts/22056/</url>
    <content><![CDATA[<p>作者：彼得·德鲁克（Peter Drucker）<br />
推荐系数：4.9/5<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209141331540.png" alt="img" /></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Java实现LRU算法</title>
    <url>/posts/39486/</url>
    <content><![CDATA[<h1 id="介绍及使用场景"><a class="markdownIt-Anchor" href="#介绍及使用场景"></a> 介绍及使用场景</h1>
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<p>LRU，全称为Least Recently Used，即最近最少用。算法的核心思想是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果最近频繁访问的数据，那么在接下来也很可能会被访问到</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2>
<p>LRU算法广发用于缓存机制中，例如Memcached，MySQL，Redis</p>
<h1 id="算法图解与步骤"><a class="markdownIt-Anchor" href="#算法图解与步骤"></a> 算法图解与步骤</h1>
<p>算法包含两个操作，put和get，也就是插入和拿出，下面分别做说明。</p>
<ol>
<li><strong>PUT操作</strong><br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209152255646.png" alt="img" /></li>
<li><strong>GET操作</strong><br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209152256251.png" alt="img" /></li>
</ol>
<h1 id="java实现"><a class="markdownIt-Anchor" href="#java实现"></a> Java实现</h1>
<p>以下实现抄自<a href="https://leetcode.cn/problems/lru-cache/solution/lruhuan-cun-ji-zhi-by-leetcode-solution/">LeetCode中文版146. LRU 缓存官方题解</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DLinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        DLinkedNode prev;</span><br><span class="line">        DLinkedNode next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">(<span class="type">int</span> _key, <span class="type">int</span> _value)</span> &#123;</span><br><span class="line">          key = _key; </span><br><span class="line">          value = _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DLinkedNode head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DLinkedNode tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">// 使用伪头部和伪尾部节点</span></span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 key 存在，先通过哈希表定位，再移到头部</span></span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 key 不存在，创建一个新的节点</span></span><br><span class="line">            <span class="type">DLinkedNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>(key, value);</span><br><span class="line">            <span class="comment">// 添加进哈希表</span></span><br><span class="line">            cache.put(key, newNode);</span><br><span class="line">            <span class="comment">// 添加至双向链表的头部</span></span><br><span class="line">            addToHead(newNode);</span><br><span class="line">            ++size;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">                <span class="comment">// 如果超出容量，删除双向链表的尾部节点</span></span><br><span class="line">                <span class="type">DLinkedNode</span> <span class="variable">tail</span> <span class="operator">=</span> removeTail();</span><br><span class="line">                <span class="comment">// 删除哈希表中对应的项</span></span><br><span class="line">                cache.remove(tail.key);</span><br><span class="line">                --size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span></span><br><span class="line">            node.value = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DLinkedNode <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">res</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        removeNode(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>
<blockquote>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies">Cache replacement policies</a></li>
<li><a href="https://leetcode.cn/problems/lru-cache/">LeetCode 146. LRU缓存</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>编程实践</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL环境下的脏读、不可重复读与幻读</title>
    <url>/posts/3050/</url>
    <content><![CDATA[<p>《高性能MySQL》第三版在章节1.3提到了<strong>脏读，不可重复读，幻读</strong>三个概念（中文版第9页），如下表所示，但是翻了下索引，却发现没有对这三个概念的解释，而这三个概念却是面试热点问题之一。本文通过一些实验案例来说明什么是<strong>脏读，不可重复读以及幻读</strong>。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读可能性</th>
<th>不可重复读可能性</th>
<th>幻读可能性</th>
<th>加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>No</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="实验环境及准备"><a class="markdownIt-Anchor" href="#实验环境及准备"></a> 实验环境及准备</h2>
<h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h3>
<ol>
<li>MySQL版本：5.7.28</li>
<li>数据库：sakila，这个是<a href="https://dev.mysql.com/doc/index-other.html">MySQL官网提供的数据库样例</a></li>
<li>数据表：actor</li>
</ol>
<h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3>
<p>在接下来的实验里，我们将开启两个MySQL命令行窗口，所以我们需要先做好一些<strong>全局设置</strong>，主要包括隔离级别的设置和事务提交模式的设置。</p>
<ol>
<li><strong>设置隔离级别</strong><br />
MySQL默认的隔离级别为REPEATABLE READ（可重复读），语句为：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></table></figure>
结果如下图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209111121712.png" alt="img" /><br />
根据上表，当隔离级别为READ UNCOMMITTED（读未提交）时，脏读，不可重复读和幻读都可能会出现，因此，我们在实验环境里把<strong>全局</strong>的隔离级别设置为此级别，语句为：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure>
设置完后，我们需要退出当前会话（session）窗口，重新进入后可以检查下设置是否生效，如下图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209121012147.png" alt="img" /></li>
<li><strong>关闭事务自动提交</strong><br />
MySQL默认的事务提交模式是auto commit（自动提交），如下图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209111137897.png" alt="img" /><br />
为了方便实验，我们在实验环境里关闭自动提交，即改为手动提交，同样，也是<strong>全局</strong>配置，语句为：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>
退出当前会话窗口后，重新进入检查设置是否生效，如下图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209121016168.png" alt="img" /></li>
</ol>
<p>至此，实验所需的设置就处理好了，在环境恢复前，开启的任何MySQL命令行窗口的隔离级别都是READ UNCOMMITTED，而且事务提交模式都为手动提交。下面开始进行实验。</p>
<h2 id="脏读"><a class="markdownIt-Anchor" href="#脏读"></a> 脏读</h2>
<h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3>
<p><strong>脏读是指一个事务未提交的数据被另一个事务读到了。</strong></p>
<h3 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h3>
<ol>
<li>开启两个MySQL命令行窗口；</li>
<li>窗口A开启事务，并对数据进行更新，此时窗口A还未提交事务；</li>
<li>窗口B查询窗口A更新的相应数据，发现读到了窗口A还未提交的数据，如图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209121035156.png" alt="img" /></li>
<li>窗口A进行数据回滚，窗口B再一次查询该条数据，读回来的数据仍旧是窗口A更新前的数据，如果程序里使用了回滚前的数据，则产生了脏读，如图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209121040710.png" alt="img" /></li>
</ol>
<h2 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h2>
<h3 id="概念-2"><a class="markdownIt-Anchor" href="#概念-2"></a> 概念</h3>
<p><strong>事务A访问了一条数据，在事务A结束前，事务B修改了该记录，此时如果事务A再一次访问该数据，会发现两次读取的结果不一样。</strong></p>
<h3 id="实验-2"><a class="markdownIt-Anchor" href="#实验-2"></a> 实验</h3>
<ol>
<li>开启两个MySQL命令行窗口；</li>
<li>窗口A开启事务，读取一条数据，此时窗口A还未结束事务；</li>
<li>窗口B开启事务并对窗口A读取的事务进行更新，更新完后提交；</li>
<li>窗口A再次读取该条数据，发现读取的数据与之前的不一致，出现了不可重复读，如图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209121100184.png" alt="img" /></li>
</ol>
<h2 id="幻读"><a class="markdownIt-Anchor" href="#幻读"></a> 幻读</h2>
<h3 id="概念-3"><a class="markdownIt-Anchor" href="#概念-3"></a> 概念</h3>
<p><strong>事务A根据条件进行数据统计，在事务A结束前，事务B插入或删除了数据并提交，此时如果事务A再一次进行相同条件的数据统计，会发现两次的统计结果不一样。</strong></p>
<h3 id="实验-3"><a class="markdownIt-Anchor" href="#实验-3"></a> 实验</h3>
<ol>
<li>开启两个MySQL命令行窗口；</li>
<li>窗口A开启事务进行数据统计，此时窗口A还未结束事务；</li>
<li>窗口B开启事务并插入新数据，插入完后提交；</li>
<li>窗口A再次进行相同条件的数据统计，发现两次的统计结果不一致，出现了幻读，如图所示：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/202209121113638.png" alt="img" /></li>
</ol>
<h2 id="不可重复读与幻读的区别"><a class="markdownIt-Anchor" href="#不可重复读与幻读的区别"></a> 不可重复读与幻读的区别</h2>
<p>不可重复读和幻读在步骤流程上看起来可能会有点类似，但其中还是有区别的。不可重复读是读取了其它事务更新的数据，针对的是<strong>update</strong>操作。幻读是读取了其它事务新增的数据，针对的是<strong>insert或delete</strong>操作</p>
<h2 id="环境恢复"><a class="markdownIt-Anchor" href="#环境恢复"></a> 环境恢复</h2>
<p>实验结束后，对环境恢复只需反向执行实验准备的语句即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> autocommit<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<blockquote>
<ol>
<li><a href="https://dev.mysql.com/doc/index-other.html">MySQL官方数据库数据样例</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>随笔备忘</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL如何查看字符集</title>
    <url>/posts/61274/</url>
    <content><![CDATA[<p>最近团队在搭建新的测试环境，在搭建过程中需要建立对应的新的MySQL数据库。在搭建新的数据库过程中，遇到了几个字符集相关的问题，比如：如何查看库的字符集，如何查看表的字符集，charset和collation的区别是什么。这里做一个记录和总结。</p>
<span id="more"></span>
<h2 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h2>
<ol>
<li>MySQL版本：5.7.28</li>
<li>数据库：sakila，这个是<a href="https://dev.mysql.com/doc/index-other.html">MySQL官网提供的数据库样例</a></li>
</ol>
<h2 id="如何查看数据库的字符集"><a class="markdownIt-Anchor" href="#如何查看数据库的字符集"></a> 如何查看数据库的字符集</h2>
<h3 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use sakila;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>返果如下：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/1.png" alt="image" /><br />
从返回的结果集里我们可以看到，character_set_database的值为utf8mb4，也就是说sakila数据库所使用的字符集为utf8mb4。</p>
<h3 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use sakila;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>返回如下：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/2.png" alt="image" /><br />
从返回的结果集里我们可以看到，collation_database的值为utf8mb4_general_ci，也就是说sakila数据库所使用的字符集为utf8mb4。</p>
<h2 id="如何查看表的字符集"><a class="markdownIt-Anchor" href="#如何查看表的字符集"></a> 如何查看表的字符集</h2>
<p>sakila库里有一张actor表，我们就来查这张表的字符集。</p>
<h3 id="方式一-2"><a class="markdownIt-Anchor" href="#方式一-2"></a> 方式一</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">from</span> sakila <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;actor&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>返回如下：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/3.png" alt="image" /><br />
从返回的结果集里我们可以看到，collation的值为utf8mb4_general_ci，也就是说actor表所使用的字符集为utf8mb4。</p>
<h3 id="方式二-2"><a class="markdownIt-Anchor" href="#方式二-2"></a> 方式二</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> actor;</span><br></pre></td></tr></table></figure>
<p>返回如下：<br />
<img src="https://blog-1257338834.cos.ap-guangzhou.myqcloud.com/4.png" alt="image" /><br />
从返回的结果集里我们可以看到，charset的值为utf8mb4，也就是说actor表所使用的字符集为utf8mb4。</p>
<h2 id="charset和collation有什么区别"><a class="markdownIt-Anchor" href="#charset和collation有什么区别"></a> charset和collation有什么区别</h2>
<p>这一会charset，一会collation的，那这两个有什么区别呢？首先从中文意义上看，charset是字符集，collation是整理，然后我们可以看一下<a href="https://dev.mysql.com/doc/refman/5.7/en/charset-general.html">MySQL官网</a>做出的解释：</p>
<blockquote>
<p>A character set is a set of symbols and encodings. A collation is a set of rules for comparing characters in a character set.</p>
</blockquote>
<p>大意是说，charset是一系列符号和编码的集合，而collation是在使用某个特定的charset时，在字符之间进行比较的一系列规则的集合。<br />
也就是说，charset决定了字符在数据库里最终的存储所使用的字符集，而collation则决定了字符之间如何进行比较，比如order by，group by，distinct等。</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<blockquote>
<ol>
<li><a href="https://dev.mysql.com/doc/index-other.html">MySQL官方数据库数据样例</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-general.html">Character Sets and Collations in General</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>随笔备忘</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>1407. 排名靠前的旅行者</title>
    <url>/posts/39168/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>表：Users</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name   <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id            <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name          <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line">id 是该表单主键。</span><br><span class="line">name 是用户名字。</span><br></pre></td></tr></table></figure>
<p>表：Rides</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name   <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id            <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id       <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> distance      <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line">id 是该表单主键。</span><br><span class="line">user_id 是本次行程的用户的 id, 而该用户此次行程距离为 distance 。</span><br></pre></td></tr></table></figure>
<p>写一段 SQL ,  报告每个用户的旅行距离。</p>
<p>返回的结果表单，以 travelled_distance <strong>降序排列</strong> ，如果有两个或者更多的用户旅行了相同的距离,  那么再以 name <strong>升序排列</strong> 。</p>
<span id="more"></span> 
<p>查询结果格式如下面的示例所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Users 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> Alice     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> Bob       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> Alex      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> Donald    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>    <span class="operator">|</span> Lee       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span>   <span class="operator">|</span> Jonathan  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">19</span>   <span class="operator">|</span> Elvis     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+</span></span><br><span class="line"></span><br><span class="line">Rides 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> user_id  <span class="operator">|</span> distance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">120</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">317</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span> <span class="number">222</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> <span class="number">7</span>        <span class="operator">|</span> <span class="number">100</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> <span class="number">13</span>       <span class="operator">|</span> <span class="number">312</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>    <span class="operator">|</span> <span class="number">19</span>       <span class="operator">|</span> <span class="number">50</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>    <span class="operator">|</span> <span class="number">7</span>        <span class="operator">|</span> <span class="number">120</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span>    <span class="operator">|</span> <span class="number">19</span>       <span class="operator">|</span> <span class="number">400</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span>    <span class="operator">|</span> <span class="number">7</span>        <span class="operator">|</span> <span class="number">230</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Result</span> 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> travelled_distance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Elvis    <span class="operator">|</span> <span class="number">450</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Lee      <span class="operator">|</span> <span class="number">450</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob      <span class="operator">|</span> <span class="number">317</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jonathan <span class="operator">|</span> <span class="number">312</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alex     <span class="operator">|</span> <span class="number">222</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alice    <span class="operator">|</span> <span class="number">120</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Donald   <span class="operator">|</span> <span class="number">0</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------------+</span></span><br><span class="line">Elvis 和 Lee 旅行了 <span class="number">450</span> 英里，Elvis 是排名靠前的旅行者，因为他的名字在字母表上的排序比 Lee 更小。</span><br><span class="line">Bob, Jonathan, Alex 和 Alice 只有一次行程，我们只按此次行程的全部距离对他们排序。</span><br><span class="line">Donald 没有任何行程, 他的旅行距离为 <span class="number">0</span>。</span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Users (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Rides (id <span class="type">int</span>, user_id <span class="type">int</span>, distance <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Users;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Alex&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;Lee&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;Jonathan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Users (id, name) <span class="keyword">values</span> (<span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;Elvis&#x27;</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Rides;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;120&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;317&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;312&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;50&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;120&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;400&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Rides (id, user_id, distance) <span class="keyword">values</span> (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;230&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.name, IFNULL(<span class="built_in">SUM</span>(b.distance), <span class="number">0</span>) <span class="keyword">AS</span> travelled_distance</span><br><span class="line"><span class="keyword">FROM</span> Users a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Rides b</span><br><span class="line"><span class="keyword">ON</span> a.id <span class="operator">=</span> b.user_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> b.user_id  </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> travelled_distance <span class="keyword">DESC</span>, name <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/top-travellers/">https://leetcode.cn/problems/top-travellers/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1179. 重新格式化部门表</title>
    <url>/posts/36256/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>部门表 Department：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name   <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id            <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> revenue       <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">month</span>         <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line">(id, <span class="keyword">month</span>) 是表的联合主键。</span><br><span class="line">这个表格有关于每个部门每月收入的信息。</span><br><span class="line">月份（<span class="keyword">month</span>）可以取下列值 [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;]。</span><br></pre></td></tr></table></figure>
<p>编写一个 SQL 查询来重新格式化表，使得新的表中有一个部门 id 列和一些对应 每个月 的收入（revenue）列。</p>
<span id="more"></span> 
<p>查询结果格式如下面的示例所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Department 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> revenue <span class="operator">|</span> <span class="keyword">month</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">8000</span>    <span class="operator">|</span> Jan   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">9000</span>    <span class="operator">|</span> Jan   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">10000</span>   <span class="operator">|</span> Feb   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">7000</span>    <span class="operator">|</span> Feb   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">6000</span>    <span class="operator">|</span> Mar   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+-------+</span></span><br><span class="line"></span><br><span class="line">查询得到的结果表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> Jan_Revenue <span class="operator">|</span> Feb_Revenue <span class="operator">|</span> Mar_Revenue <span class="operator">|</span> ... <span class="operator">|</span> Dec_Revenue <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">8000</span>        <span class="operator">|</span> <span class="number">7000</span>        <span class="operator">|</span> <span class="number">6000</span>        <span class="operator">|</span> ... <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">9000</span>        <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span> ... <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span> <span class="number">10000</span>       <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span> ... <span class="operator">|</span> <span class="keyword">null</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line"></span><br><span class="line">注意，结果表有 <span class="number">13</span> 列 (<span class="number">1</span>个部门 id 列 <span class="operator">+</span> <span class="number">12</span>个月份的收入列)。</span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (id <span class="type">int</span>, revenue <span class="type">int</span>, <span class="keyword">month</span> <span class="type">varchar</span>(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;8000&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;9000&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;10000&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7000&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6000&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Jan&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Jan_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Feb&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Feb_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Mar&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Mar_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Apr&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Apr_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;May&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> May_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Jun&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Jun_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Jul&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Jul_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Aug&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Aug_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Sep&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Sep_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Oct&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Oct_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Nov&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Nov_revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;Dec&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) <span class="keyword">AS</span> Dec_revenue</span><br><span class="line"><span class="keyword">FROM</span> Department </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/reformat-department-table/">https://leetcode.cn/problems/reformat-department-table/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1148. 文章浏览 I</title>
    <url>/posts/45086/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>Views 表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name   <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> article_id    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> author_id     <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> viewer_id     <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> view_date     <span class="operator">|</span> <span class="type">date</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line">此表无主键，因此可能会存在重复行。</span><br><span class="line">此表的每一行都表示某人在某天浏览了某位作者的某篇文章。</span><br><span class="line">请注意，同一人的 author_id 和 viewer_id 是相同的。</span><br></pre></td></tr></table></figure>
<p>请编写一条 SQL 查询以找出所有浏览过自己文章的作者，结果按照 id 升序排列。</p>
<span id="more"></span> 
<p>查询结果的格式如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Views 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> article_id <span class="operator">|</span> author_id <span class="operator">|</span> viewer_id <span class="operator">|</span> view_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">5</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">6</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-02</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">7</span>         <span class="operator">|</span> <span class="number">7</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">7</span>         <span class="operator">|</span> <span class="number">6</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-02</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>          <span class="operator">|</span> <span class="number">7</span>         <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+-----------+------------+</span></span><br><span class="line"></span><br><span class="line">结果表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Views (article_id <span class="type">int</span>, author_id <span class="type">int</span>, viewer_id <span class="type">int</span>, view_date <span class="type">date</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Views;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2019-08-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2019-08-02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2019-08-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2019-08-02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2019-07-22&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Views (article_id, author_id, viewer_id, view_date) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> author_id <span class="keyword">AS</span> id</span><br><span class="line"><span class="keyword">FROM</span> Views </span><br><span class="line"><span class="keyword">WHERE</span> author_id <span class="operator">=</span> viewer_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> author_id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/article-views-i/">https://leetcode.cn/problems/article-views-i/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用MyBatis Generator</title>
    <url>/posts/21450/</url>
    <content><![CDATA[<h2 id="你是不是正在遇到以下问题"><a class="markdownIt-Anchor" href="#你是不是正在遇到以下问题"></a> 你是不是正在遇到以下问题</h2>
<ol>
<li>在采用MyBatis框架时，每新增一个表，都需要对着表<strong>手工</strong>写一遍数据库模型类，<strong>手工</strong>新增相应的mapper接口类，<strong>手工</strong>新增相应的mapper.xml文件；</li>
<li><strong>手工</strong>编写xml文件时，有时还会漏了映射某个字段，或者写错了某些字母符合，然后到启动项目后才发现。</li>
</ol>
<p><strong><a href="https://mybatis.org/generator/index.html">MyBatis Generator</a></strong> 可以高效帮你解决这些问题。</p>
<span id="more"></span>
<h2 id="什么是mybatis-generator"><a class="markdownIt-Anchor" href="#什么是mybatis-generator"></a> 什么是MyBatis Generator</h2>
<p><a href="https://mybatis.org/generator/index.html">MyBatis Generator</a>是MyBatis官方提供的一个代码生成工具，通过少量的配置就能帮助我们生成好数据库对应的Java持久化对象、操作数据库的接口方法以及对应的SQL的mapper。</p>
<h2 id="如何使用"><a class="markdownIt-Anchor" href="#如何使用"></a> 如何使用</h2>
<h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3>
<p>本文采用组件版本如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL数据库：5.7.28</span><br><span class="line">mysql-connector-java：8.0.30</span><br><span class="line">mybatis-generator-core：1.4.1</span><br><span class="line">spring-boot: 2.7.1</span><br></pre></td></tr></table></figure>
<p>使用的库表为MySQL官方网站提供的库表样例，sakila库film表。本文将采用<a href="https://mybatis.org/generator/index.html">MyBatis Generator</a>为film表自动生成一系列相关代码。</p>
<h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3>
<p><a href="https://mybatis.org/generator/index.html">MyBatis Generator</a>既可以下载jar包通过命令行的方式运行，也可以通过Ant，maven的方式进行代码生成。这里采用maven的方式。这里分两步来进行：</p>
<h4 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h4>
<p>总体配置及注释如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  1、引入外部配置文件，可选。引入后，可以通过$&#123;key&#125;的方式进行配置值的获取  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;application.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        2、配置context。</span></span><br><span class="line"><span class="comment">        id唯一即可。</span></span><br><span class="line"><span class="comment">        targetRuntime默认值为MyBatis3，会影响dao和mapper.xml生成的内容。</span></span><br><span class="line"><span class="comment">        defaultModelType默认值为conditional，flat表示一张表对应一个实体类。</span></span><br><span class="line"><span class="comment">        此处选择MyBatis3Simple，生成的接口代码简洁很多，个人比较喜欢这个，</span></span><br><span class="line"><span class="comment">        因为MyBatis的最大优势本来就是可以自由编写sql脚本。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 3、插件配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义lombok插件，使用后将不会生成setter/getter方法，而是用Lombok注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.jiapengcai.lab.spring.common.plugin.LombokPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 覆盖生成XML文件，如果现有的xml文件里已有自定义的sql接口，要慎用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 4、注释生成配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否要跳过生成日期。每个字段都会生成日期，而且即使修改了一个字段，其它字段也会跟着变换日期 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否要添加表中的字段注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addRemarkComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否要跳过生成注释，这个看个人喜好 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 5、数据库链接配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;spring.datasource.url&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;$&#123;spring.datasource.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;$&#123;spring.datasource.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 6、java类型转换配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- CustomJavaTypeResolve包含里自定义的JDBC与Java类型的转换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">&quot;org.jiapengcai.lab.spring.common.config.CustomJavaTypeResolver&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否使用BigDecimal，默认为false，如果开启后，JDBC类型为DECIMAL和NUMERIC的将都会转换为java.math.BigDecimal --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            是否使用JSR-310类型，默认为false，如果开启后，会做以下转换：</span></span><br><span class="line"><span class="comment">            JDBC类型     Java类型</span></span><br><span class="line"><span class="comment">            DATE        java.time.LocalDate</span></span><br><span class="line"><span class="comment">            TIME        java.time.LocalTime</span></span><br><span class="line"><span class="comment">            TIMESTAMP  java.time.LocalDateTime</span></span><br><span class="line"><span class="comment">            注：要注意pom文件里要引入org.mybatis.mybatis-typehandlers-jsr310依赖</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useJSR310Types&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 7、生成模型的包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;org.jiapengcai.lab.spring.mbg.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 8、生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 9、生成mapper接口类的包名和位置，如果想生成注解形式的mapper，type的值填ANNOTATEDMAPPER--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;org.jiapengcai.lab.spring.mbg.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 10、需要生成哪些表，需要生成多少个表就相应写多少个table标签，domainObjectName为生成的实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;film&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Film&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h4>
<ol>
<li>生成的数据库模型实体类会包含各个字段的setter/getter方法，个人习惯了用lombok，感觉不是很美观，Github上有个大神写了一个lombok的插件，这里用上了。如果不喜欢可以去掉。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jiapengcai.lab.spring.common.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.PluginAdapter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Interface;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Method;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caijiapeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-08-28 21:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LombokPlugin</span> <span class="keyword">extends</span> <span class="title class_">PluginAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;Annotations&gt; annotations;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LombokPlugin constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LombokPlugin</span><span class="params">()</span> &#123;</span><br><span class="line">        annotations = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Annotations&gt;(Annotations.values().length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> warnings list of warnings</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> always true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(List&lt;String&gt; warnings)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Intercepts base record class generation</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass     the generated base record class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable The class containing information about the table as</span></span><br><span class="line"><span class="comment">     *                          introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> always true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelBaseRecordClassGenerated</span><span class="params">(</span></span><br><span class="line"><span class="params">            TopLevelClass topLevelClass,</span></span><br><span class="line"><span class="params">            IntrospectedTable introspectedTable</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        addAnnotations(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Intercepts primary key class generation</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass     the generated primary key class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable The class containing information about the table as</span></span><br><span class="line"><span class="comment">     *                          introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> always true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelPrimaryKeyClassGenerated</span><span class="params">(</span></span><br><span class="line"><span class="params">            TopLevelClass topLevelClass,</span></span><br><span class="line"><span class="params">            IntrospectedTable introspectedTable</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        addAnnotations(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Intercepts &quot;record with blob&quot; class generation</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass     the generated record with BLOBs class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable The class containing information about the table as</span></span><br><span class="line"><span class="comment">     *                          introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> always true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelRecordWithBLOBsClassGenerated</span><span class="params">(</span></span><br><span class="line"><span class="params">            TopLevelClass topLevelClass,</span></span><br><span class="line"><span class="params">            IntrospectedTable introspectedTable</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        addAnnotations(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prevents all getters from being generated.</span></span><br><span class="line"><span class="comment">     * See SimpleModelGenerator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method             the getter, or accessor, method generated for the specified</span></span><br><span class="line"><span class="comment">     *                           column</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass      the partially implemented model class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedColumn The class containing information about the column related</span></span><br><span class="line"><span class="comment">     *                           to this field as introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable  The class containing information about the table as</span></span><br><span class="line"><span class="comment">     *                           introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelClassType     the type of class that the field is generated for</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelGetterMethodGenerated</span><span class="params">(</span></span><br><span class="line"><span class="params">            Method method,</span></span><br><span class="line"><span class="params">            TopLevelClass topLevelClass,</span></span><br><span class="line"><span class="params">            IntrospectedColumn introspectedColumn,</span></span><br><span class="line"><span class="params">            IntrospectedTable introspectedTable,</span></span><br><span class="line"><span class="params">            ModelClassType modelClassType</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prevents all setters from being generated</span></span><br><span class="line"><span class="comment">     * See SimpleModelGenerator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method             the setter, or mutator, method generated for the specified</span></span><br><span class="line"><span class="comment">     *                           column</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass      the partially implemented model class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedColumn The class containing information about the column related</span></span><br><span class="line"><span class="comment">     *                           to this field as introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable  The class containing information about the table as</span></span><br><span class="line"><span class="comment">     *                           introspected from the database</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelClassType     the type of class that the field is generated for</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> always false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelSetterMethodGenerated</span><span class="params">(</span></span><br><span class="line"><span class="params">            Method method,</span></span><br><span class="line"><span class="params">            TopLevelClass topLevelClass,</span></span><br><span class="line"><span class="params">            IntrospectedColumn introspectedColumn,</span></span><br><span class="line"><span class="params">            IntrospectedTable introspectedTable,</span></span><br><span class="line"><span class="params">            ModelClassType modelClassType</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds the lombok annotations&#x27; imports and annotations to the class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass the partially implemented model class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addAnnotations</span><span class="params">(TopLevelClass topLevelClass)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Annotations annotation : annotations) &#123;</span><br><span class="line">            topLevelClass.addImportedType(annotation.javaType);</span><br><span class="line">            topLevelClass.addAnnotation(annotation.asAnnotation());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setProperties(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//@Data is default annotation</span></span><br><span class="line">        annotations.add(Annotations.DATA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String annotationName : properties.stringPropertyNames()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (annotationName.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Not an annotation name</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> properties.getProperty(annotationName);</span><br><span class="line">            <span class="keyword">if</span> (!Boolean.parseBoolean(value)) &#123;</span><br><span class="line">                <span class="comment">// The annotation is disabled, skip it</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Annotations</span> <span class="variable">annotation</span> <span class="operator">=</span> Annotations.getValueOf(annotationName);</span><br><span class="line">            <span class="keyword">if</span> (annotation == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">optionsPrefix</span> <span class="operator">=</span> annotationName + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (String propertyName : properties.stringPropertyNames()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!propertyName.startsWith(optionsPrefix)) &#123;</span><br><span class="line">                    <span class="comment">// A property not related to this annotation</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyValue</span> <span class="operator">=</span> properties.getProperty(propertyName);</span><br><span class="line">                annotation.appendOptions(propertyName, propertyValue);</span><br><span class="line">                annotations.add(annotation);</span><br><span class="line">                annotations.addAll(Annotations.getDependencies(annotation));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientGenerated</span><span class="params">(</span></span><br><span class="line"><span class="params">            Interface interfaze,</span></span><br><span class="line"><span class="params">            TopLevelClass topLevelClass,</span></span><br><span class="line"><span class="params">            IntrospectedTable introspectedTable</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        interfaze.addImportedType(<span class="keyword">new</span> <span class="title class_">FullyQualifiedJavaType</span>(</span><br><span class="line">                <span class="string">&quot;org.apache.ibatis.annotations.Mapper&quot;</span>));</span><br><span class="line">        interfaze.addAnnotation(<span class="string">&quot;@Mapper&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">Annotations</span> &#123;</span><br><span class="line">        DATA(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;@Data&quot;</span>, <span class="string">&quot;lombok.Data&quot;</span>),</span><br><span class="line">        BUILDER(<span class="string">&quot;builder&quot;</span>, <span class="string">&quot;@Builder&quot;</span>, <span class="string">&quot;lombok.Builder&quot;</span>),</span><br><span class="line">        ALL_ARGS_CONSTRUCTOR(<span class="string">&quot;allArgsConstructor&quot;</span>, <span class="string">&quot;@AllArgsConstructor&quot;</span>, <span class="string">&quot;lombok.AllArgsConstructor&quot;</span>),</span><br><span class="line">        NO_ARGS_CONSTRUCTOR(<span class="string">&quot;noArgsConstructor&quot;</span>, <span class="string">&quot;@NoArgsConstructor&quot;</span>, <span class="string">&quot;lombok.NoArgsConstructor&quot;</span>),</span><br><span class="line">        ACCESSORS(<span class="string">&quot;accessors&quot;</span>, <span class="string">&quot;@Accessors&quot;</span>, <span class="string">&quot;lombok.experimental.Accessors&quot;</span>),</span><br><span class="line">        TO_STRING(<span class="string">&quot;toString&quot;</span>, <span class="string">&quot;@ToString&quot;</span>, <span class="string">&quot;lombok.ToString&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String paramName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> FullyQualifiedJavaType javaType;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; options;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Annotations(String paramName, String name, String className) &#123;</span><br><span class="line">            <span class="built_in">this</span>.paramName = paramName;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.javaType = <span class="keyword">new</span> <span class="title class_">FullyQualifiedJavaType</span>(className);</span><br><span class="line">            <span class="built_in">this</span>.options = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Annotations <span class="title function_">getValueOf</span><span class="params">(String paramName)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Annotations annotation : Annotations.values())</span><br><span class="line">                <span class="keyword">if</span> (String.CASE_INSENSITIVE_ORDER.compare(paramName, annotation.paramName) == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> annotation;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Collection&lt;Annotations&gt; <span class="title function_">getDependencies</span><span class="params">(Annotations annotation)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (annotation == ALL_ARGS_CONSTRUCTOR)</span><br><span class="line">                <span class="keyword">return</span> Collections.singleton(NO_ARGS_CONSTRUCTOR);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A trivial quoting.</span></span><br><span class="line">        <span class="comment">// Because Lombok annotation options type is almost String or boolean.</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">quote</span><span class="params">(String value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(value) || Boolean.FALSE.toString().equals(value))</span><br><span class="line">                <span class="comment">// case of boolean, not passed as an array.</span></span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            <span class="keyword">return</span> value.replaceAll(<span class="string">&quot;[\\w]+&quot;</span>, <span class="string">&quot;\&quot;$0\&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">appendOptions</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">keyPart</span> <span class="operator">=</span> key.substring(key.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">valuePart</span> <span class="operator">=</span> value.contains(<span class="string">&quot;,&quot;</span>) ? String.format(<span class="string">&quot;&#123;%s&#125;&quot;</span>, value) : value;</span><br><span class="line">            <span class="built_in">this</span>.options.add(String.format(<span class="string">&quot;%s=%s&quot;</span>, keyPart, quote(valuePart)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String <span class="title function_">asAnnotation</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (options.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            sb.append(name);</span><br><span class="line">            sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (String option : options) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                    first = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(option);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>有些生成的字段类型可能并不是我们想要的，比如对于数据库的smallint类型的字段，生成的实体类的字段类型为Short，如果我们想转换成Integer，需要自定义转换处理器，代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jiapengcai.lab.spring.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Types;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caijiapeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-03-28 14:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomJavaTypeResolver</span> <span class="keyword">extends</span> <span class="title class_">JavaTypeResolverDefaultImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomJavaTypeResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        typeMap.put(Types.SMALLINT, <span class="keyword">new</span> <span class="title class_">JdbcTypeInformation</span>(<span class="string">&quot;SMALLINT&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FullyQualifiedJavaType</span>(Integer.class.getName())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="pom文件配置"><a class="markdownIt-Anchor" href="#pom文件配置"></a> pom文件配置</h3>
<p>pom文件配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jiapengcai.lab.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-lab-mybatis-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jiapengcai.lab.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-lab-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--允许覆盖生成的文件，只覆盖生成的实体类和mapper接口类，mapper xml文件不会覆盖--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 自定义的插件和类型转换器应该放到不同的包里，然后引入到maven插件配置里，不然会报无法初始化的错误。本文中的LombokPlugin以及CustomJavaTypeResolver放在了common包里。</p>
<h2 id="注意坑"><a class="markdownIt-Anchor" href="#注意坑"></a> 注意坑</h2>
<p>配置文件里的context配置项的子元素是有顺序要求的，如果某个子元素没有按顺序进行配置，可能会出现配置不生效的问题：</p>
<ol>
<li>property (0个或多个)</li>
<li>plugin (0个或多个)</li>
<li>commentGenerator (0个或1个)</li>
<li>connectionFactory 和 jdbcConnection，二选一进行配置</li>
<li>javaTypeResolver (0个或1个)</li>
<li>javaModelGenerator（必须配置1个）</li>
<li>sqlMapGenerator (0个或1个)</li>
<li>javaClientGenerator (0个或1个)</li>
<li>table (1个或多个)</li>
</ol>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<blockquote>
<ol>
<li><a href="https://mybatis.org/generator/index.html">MyBatis Generator官方文档</a></li>
<li><a href="https://mybatis.org/generator/reference/plugins.html">MyBatis Generator插件列表</a></li>
<li><a href="https://mybatis.org/generator/quickstart.html#target-runtime-information-and-samples">MyBatis Generator targetRuntime 类型</a></li>
<li><a href="https://dev.mysql.com/doc/index-other.html">MySQL官方数据库数据样例</a></li>
<li><a href="https://github.com/softwareloop/mybatis-generator-lombok-plugin">MyBatis Generator Lombok插件</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>编程实践</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>《非暴力沟通》读后感</title>
    <url>/posts/20323/</url>
    <content><![CDATA[<p>作者：马歇尔·卢森堡（Marshall B.Rosenberg）<br />
推荐系数：3/5<br />
全书先用了将近二分之一的篇幅介绍非暴力沟通的四个步骤：观察、感受、需求、请求。不带评论客观地观察，清晰明确地体会和表达感受，允许自己表达感受、袒露脆弱，提出请求时，尽力避免模糊、抽象或模棱两可的语言，说清楚我们要什么，而不是不要什么。<br />
接着用了也差不多二分之一的篇幅介绍如何用同理心去连接他人、爱自己以及调和纷争。爱自己那一章挺好的：学会善待自己，犯了错误时要自我宽恕看清个人可以成长的方向。<br />
最后一章讲了如何用非暴力沟通的方式表达感激与赞赏，向他人表达感激时，庆祝是我们的唯一意图，要表达出对方做了什么是我们的哪些需要得到了满足，并令我们产生了什么样的愉悦感受。<br />
书里包含了大量的对话，不知是因为文化差异的原因，还是翻译的原因，看的时候心里总会冒出一个想法：作者怎么一个接着一个这么多问题？<br />
就像朋友说的，除非是在很安全友好的情况下展开的交流，不然我会本能地排斥一连串的发问。<br />
通篇读下来，个人的总结就是，</p>
<ol>
<li>与他人沟通时，要设身处地换位思考，交流以达成清晰一致的意见及解决办法；</li>
<li>爱自己，犯错误不可怕，但是要能吃一堑长一智，不能持续懊悔过去；</li>
<li>感激他人时，要具体地表达出因什么而感激。</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>1141. 查询近30天活跃用户数</title>
    <url>/posts/10011/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
活动记录表：Activity</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name   <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> user_id       <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> session_id    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> activity_date <span class="operator">|</span> <span class="type">date</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> activity_type <span class="operator">|</span> enum    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line">该表是用户在社交网站的活动记录。</span><br><span class="line">该表没有主键，可能包含重复数据。</span><br><span class="line">activity_type 字段为以下四种值 (<span class="string">&#x27;open_session&#x27;</span>, <span class="string">&#x27;end_session&#x27;</span>, <span class="string">&#x27;scroll_down&#x27;</span>, <span class="string">&#x27;send_message&#x27;</span>)。</span><br><span class="line">每个 session_id 只属于一个用户。</span><br></pre></td></tr></table></figure>
<p>请写SQL查询出截至 2019-07-27（包含2019-07-27），近 30 天的每日活跃用户数（当天只要有一条活动记录，即为活跃用户）。</p>
<p>以 <strong>任意顺序</strong> 返回结果表。</p>
<span id="more"></span>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Activity <span class="keyword">table</span>:</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+---------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> user_id <span class="operator">|</span> session_id <span class="operator">|</span> activity_date <span class="operator">|</span> activity_type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+---------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>       <span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span>    <span class="operator">|</span> open_session  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>       <span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span>    <span class="operator">|</span> scroll_down   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>       <span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span>    <span class="operator">|</span> end_session   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>       <span class="operator">|</span> <span class="number">4</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span>    <span class="operator">|</span> open_session  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>       <span class="operator">|</span> <span class="number">4</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span>    <span class="operator">|</span> send_message  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>       <span class="operator">|</span> <span class="number">4</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span>    <span class="operator">|</span> end_session   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span>    <span class="operator">|</span> open_session  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span>    <span class="operator">|</span> send_message  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span>    <span class="operator">|</span> end_session   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-25</span>    <span class="operator">|</span> open_session  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-25</span>    <span class="operator">|</span> end_session   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+---------------+---------------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">day</span>        <span class="operator">|</span> active_users <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-21</span> <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+ </span></span><br><span class="line">解释：注意非活跃用户的记录不需要展示。</span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Activity (user_id <span class="type">int</span>, session_id <span class="type">int</span>, activity_date <span class="type">date</span>, activity_type ENUM(<span class="string">&#x27;open_session&#x27;</span>, <span class="string">&#x27;end_session&#x27;</span>, <span class="string">&#x27;scroll_down&#x27;</span>, <span class="string">&#x27;send_message&#x27;</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Activity;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2019-07-20&#x27;</span>, <span class="string">&#x27;open_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2019-07-20&#x27;</span>, <span class="string">&#x27;scroll_down&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2019-07-20&#x27;</span>, <span class="string">&#x27;end_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2019-07-20&#x27;</span>, <span class="string">&#x27;open_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>, <span class="string">&#x27;send_message&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>, <span class="string">&#x27;end_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>, <span class="string">&#x27;open_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>, <span class="string">&#x27;send_message&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2019-07-21&#x27;</span>, <span class="string">&#x27;end_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2019-06-25&#x27;</span>, <span class="string">&#x27;open_session&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (user_id, session_id, activity_date, activity_type) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2019-06-25&#x27;</span>, <span class="string">&#x27;end_session&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> activity_date <span class="keyword">AS</span> `<span class="keyword">day</span>`, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> user_id) <span class="keyword">AS</span> active_users</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">WHERE</span> activity_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019-06-28&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2019-07-27&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> activity_date;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/user-activity-for-the-past-30-days-i/">https://leetcode.cn/problems/user-activity-for-the-past-30-days-i/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>511. 游戏玩法分析 I</title>
    <url>/posts/49825/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等<br />
活动表 Activity：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name  <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line"><span class="operator">|</span> player_id    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> device_id    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> event_date   <span class="operator">|</span> <span class="type">date</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> games_played <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line">表的主键是 (player_id, event_date)。</span><br><span class="line">这张表展示了一些游戏玩家在游戏平台上的行为活动。</span><br><span class="line">每行数据记录了一名玩家在退出平台之前，当天使用同一台设备登录平台后打开的游戏的数目（可能是 <span class="number">0</span> 个）。</span><br></pre></td></tr></table></figure>
<p>写一条 SQL 查询语句获取每位玩家 <strong>第一次登陆平台的日期</strong> 。</p>
<span id="more"></span>
<p>查询结果的格式如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Activity 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> player_id <span class="operator">|</span> device_id <span class="operator">|</span> event_date <span class="operator">|</span> games_played <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span> <span class="number">2016</span><span class="number">-03</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">5</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">6</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-25</span> <span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2016</span><span class="number">-03</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">0</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span> <span class="number">2018</span><span class="number">-07</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">5</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+------------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Result</span> 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> player_id <span class="operator">|</span> first_login <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2016</span><span class="number">-03</span><span class="number">-01</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-25</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">2016</span><span class="number">-03</span><span class="number">-02</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+</span></span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Activity (player_id <span class="type">int</span>, device_id <span class="type">int</span>, event_date <span class="type">date</span>, games_played <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Activity;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (player_id, device_id, event_date, games_played) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2016-03-01&#x27;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (player_id, device_id, event_date, games_played) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2016-05-02&#x27;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (player_id, device_id, event_date, games_played) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2017-06-25&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (player_id, device_id, event_date, games_played) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2016-03-02&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Activity (player_id, device_id, event_date, games_played) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2018-07-03&#x27;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> player_id, <span class="built_in">MIN</span>(event_date) <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">By</span> player_id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/game-play-analysis-i/">https://leetcode.cn/problems/game-play-analysis-i/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>34. 在排序数组中查找元素的第一个和最后一个位置</title>
    <url>/posts/27437/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等<br />
给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>
<p>你必须设计并实现时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的算法解决此问题。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">6</span></span><br><span class="line">输出：[-<span class="number">1</span>,-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums = [], target = <span class="number">0</span></span><br><span class="line">输出：[-<span class="number">1</span>,-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;= nums.length &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">-10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span> &lt;= nums[i] &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></li>
<li>nums 是一个非递减数组</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">-10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span> &lt;= target &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] ==  target) &#123;</span><br><span class="line">                result[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                result[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> middle;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= <span class="number">0</span> &amp;&amp; left &lt;= length -<span class="number">1</span> &amp;&amp; nums[left] == target) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = left;</span><br><span class="line">        &#125;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt;= <span class="number">0</span> &amp;&amp; right &lt;= length - <span class="number">1</span> &amp;&amp; nums[right] == target) &#123;</span><br><span class="line">            result[<span class="number">1</span>] = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>官方解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIdx</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIdx</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">false</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.length &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;leftIdx, rightIdx&#125;;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> lower)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, ans = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>278. 第一个错误的版本</title>
    <url>/posts/48979/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p>
<p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p>
<p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, bad = <span class="number">4</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：</span><br><span class="line">调用 isBadVersion(<span class="number">3</span>) -&gt; <span class="literal">false</span> </span><br><span class="line">调用 isBadVersion(<span class="number">5</span>) -&gt; <span class="literal">true</span> </span><br><span class="line">调用 isBadVersion(<span class="number">4</span>) -&gt; <span class="literal">true</span></span><br><span class="line">所以，<span class="number">4</span> 是第一个错误的版本。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">1</span>, bad = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= bad &lt;= n &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> - 1</li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/first-bad-version/">https://leetcode.cn/problems/first-bad-version/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>1084. 销售分析III</title>
    <url>/posts/24584/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>表:Product</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name  <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_name <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> unit_price   <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line">Product_id是该表的主键。</span><br><span class="line">该表的每一行显示每个产品的名称和价格。</span><br></pre></td></tr></table></figure>
<p>表:Sales</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> seller_id   <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id  <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> buyer_id    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sale_date   <span class="operator">|</span> <span class="type">date</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> quantity    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price       <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------ ------+---------+</span></span><br><span class="line">这个表没有主键，它可以有重复的行。</span><br><span class="line">product_id 是 Product 表的外键。</span><br><span class="line">该表的每一行包含关于一个销售的一些信息。</span><br></pre></td></tr></table></figure>
<p>查询结果格式如下所示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Product <span class="keyword">table</span>:</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------------+</span></span><br><span class="line"><span class="operator">|</span> product_id <span class="operator">|</span> product_name <span class="operator">|</span> unit_price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> S8           <span class="operator">|</span> <span class="number">1000</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> G4           <span class="operator">|</span> <span class="number">800</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> iPhone       <span class="operator">|</span> <span class="number">1400</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------------+</span></span><br><span class="line">Sales <span class="keyword">table</span>:</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+----------+------------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> seller_id <span class="operator">|</span> product_id <span class="operator">|</span> buyer_id <span class="operator">|</span> sale_date  <span class="operator">|</span> quantity <span class="operator">|</span> price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+----------+------------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-21</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">2000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">2019</span><span class="number">-02</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">800</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">800</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> <span class="number">4</span>        <span class="operator">|</span> <span class="number">2019</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">2800</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+----------+------------+----------+-------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> product_id  <span class="operator">|</span> product_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> S8           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line">解释:</span><br><span class="line">id为<span class="number">1</span>的产品仅在<span class="number">2019</span>年春季销售。</span><br><span class="line">id为<span class="number">2</span>的产品在<span class="number">2019</span>年春季销售，但也在<span class="number">2019</span>年春季之后销售。</span><br><span class="line">id <span class="number">3</span>的产品在<span class="number">2019</span>年春季之后销售。</span><br><span class="line">我们只退回产品<span class="number">1</span>，因为它是<span class="number">2019</span>年春季才销售的产品。</span><br></pre></td></tr></table></figure>
<p>编写一个SQL查询，报告2019年春季才售出的产品。即仅在2019-01-01至2019-03-31（含）之间出售的商品。<br />
以 <strong>任意顺序</strong> 返回结果表。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Product (product_id <span class="type">int</span>, product_name <span class="type">varchar</span>(<span class="number">10</span>), unit_price <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Sales (seller_id <span class="type">int</span>, product_id <span class="type">int</span>, buyer_id <span class="type">int</span>, sale_date <span class="type">date</span>, quantity <span class="type">int</span>, price <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Product;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Product (product_id, product_name, unit_price) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;S8&#x27;</span>, <span class="string">&#x27;1000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Product (product_id, product_name, unit_price) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;G4&#x27;</span>, <span class="string">&#x27;800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Product (product_id, product_name, unit_price) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;iPhone&#x27;</span>, <span class="string">&#x27;1400&#x27;</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Sales;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2019-01-21&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2019-02-17&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2019-06-02&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2019-05-13&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2800&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.product_id, a.product_name</span><br><span class="line"><span class="keyword">FROM</span> Product a</span><br><span class="line"><span class="keyword">WHERE</span> a.product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> product_id </span><br><span class="line"><span class="keyword">FROM</span> Sales </span><br><span class="line"><span class="keyword">WHERE</span> sale_date <span class="operator">&lt;</span> <span class="string">&#x27;2019-01-01&#x27;</span></span><br><span class="line"><span class="keyword">OR</span> sale_date <span class="operator">&gt;</span> <span class="string">&#x27;2019-03-31&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> a.product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> c.product_id </span><br><span class="line"><span class="keyword">FROM</span> Product c, Sales d</span><br><span class="line"><span class="keyword">WHERE</span> c.product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> product_id </span><br><span class="line"><span class="keyword">FROM</span> Sales </span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/sales-analysis-iii/">https://leetcode.cn/problems/sales-analysis-iii/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1050. 合作过至少三次的演员和导演</title>
    <url>/posts/65510/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
ActorDirector 表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> actor_id    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> director_id <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="type">timestamp</span>   <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="type">timestamp</span> 是这张表的主键.</span><br></pre></td></tr></table></figure>
<p>写一条SQL查询语句获取合作过至少三次的演员和导演的 id 对 (actor_id, director_id)</p>
<span id="more"></span>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ActorDirector 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id    <span class="operator">|</span> director_id <span class="operator">|</span> <span class="type">timestamp</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">0</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">3</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">4</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">5</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">6</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+-------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Result</span> 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id    <span class="operator">|</span> director_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line">唯一的 id 对是 (<span class="number">1</span>, <span class="number">1</span>)，他们恰好合作了 <span class="number">3</span> 次。</span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> ActorDirector (actor_id <span class="type">int</span>, director_id <span class="type">int</span>, <span class="type">timestamp</span> <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> ActorDirector;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ActorDirector (actor_id, director_id, <span class="type">timestamp</span>) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.actor_id, director_id</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> actor_id, director_id, <span class="built_in">COUNT</span>(<span class="type">timestamp</span>) <span class="keyword">as</span> corp_count</span><br><span class="line"><span class="keyword">FROM</span> ActorDirector </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> actor_id , director_id) a</span><br><span class="line"><span class="keyword">WHERE</span> a.corp_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p><strong>解法2：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> actor_id, director_id</span><br><span class="line"><span class="keyword">FROM</span> actordirector</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> actor_id, director_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="type">timestamp</span>) <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/actors-and-directors-who-cooperated-at-least-three-times">https://leetcode.cn/problems/actors-and-directors-who-cooperated-at-least-three-times</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>744. 寻找比目标字母大的最小字母</title>
    <url>/posts/57538/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。<br />
在比较时，字母是依序循环出现的。举个例子：</p>
<ul>
<li>如果目标字母 target = ‘z’ 并且字符列表为 letters = [‘a’, ‘b’]，则答案返回 ‘a’</li>
</ul>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: letters = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;j&#x27;</span>]，target = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">输出: <span class="string">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: letters = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;j&#x27;</span>], target = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">输出: <span class="string">&#x27;f&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: letters = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;j&#x27;</span>], target = <span class="string">&#x27;d&#x27;</span></span><br><span class="line">输出: <span class="string">&#x27;f&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>约束条件</strong></p>
<ul>
<li>2 &lt;= letters.length &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
<li>letters[i] 是一个小写字母</li>
<li>letters 按非递减顺序排序</li>
<li>letters 最少包含两个不同的字母</li>
<li>target 是一个小写字母</li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextGreatestLetter</span><span class="params">(<span class="type">char</span>[] letters, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> letters.length;</span><br><span class="line">        <span class="keyword">if</span> (letters[length - <span class="number">1</span>] &lt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> middle;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (letters[middle] &gt; target) &#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letters[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/find-smallest-letter-greater-than-target/">https://leetcode.cn/problems/find-smallest-letter-greater-than-target/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>69. x 的平方根</title>
    <url>/posts/63206/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>给你一个非负整数 x ，计算并返回 x 的 <strong>算术平方根</strong> 。</p>
<p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 舍去 。</p>
<p><strong>注意：</strong> 不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">4</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">8</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="number">8</span> 的算术平方根是 <span class="number">2.82842</span>..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;= x &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> - 1</li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">right</span> <span class="operator">=</span> x;</span><br><span class="line">        <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid == left) &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid &gt; x) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid * mid &lt; x) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/sqrtx/">https://leetcode.cn/problems/sqrtx/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>607. 销售员</title>
    <url>/posts/268/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
表: SalesPerson</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name     <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> sales_id        <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name            <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_rate <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date       <span class="operator">|</span> <span class="type">date</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+---------+</span></span><br><span class="line">sales_id 是该表的主键列。</span><br><span class="line">该表的每一行都显示了销售人员的姓名和 ID ，以及他们的工资、佣金率和雇佣日期。</span><br></pre></td></tr></table></figure>
<p>表: Company</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> com_id      <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> city        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">com_id 是该表的主键列。</span><br><span class="line">该表的每一行都表示公司的名称和 ID ，以及公司所在的城市。</span><br></pre></td></tr></table></figure>
<p>表: Orders</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line"><span class="operator">|</span> order_id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_date  <span class="operator">|</span> <span class="type">date</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> com_id      <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sales_id    <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> amount      <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line">order_id 是该表的主键列。</span><br><span class="line">com_id 是 Company 表中 com_id 的外键。</span><br><span class="line">sales_id 是来自销售员表 sales_id 的外键。</span><br><span class="line">该表的每一行包含一个订单的信息。这包括公司的 ID 、销售人员的 ID 、订单日期和支付的金额。</span><br></pre></td></tr></table></figure>
<p>编写一个SQL查询，报告没有任何与名为 <strong>“RED”</strong> 的公司相关的订单的所有销售人员的姓名。</p>
<p>以 <strong>任意顺序</strong> 返回结果表。</p>
<span id="more"></span>
<p>查询结果格式如下所示。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">SalesPerson 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------+--------+-----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> sales_id <span class="operator">|</span> name <span class="operator">|</span> salary <span class="operator">|</span> commission_rate <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------+--------+-----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> John <span class="operator">|</span> <span class="number">100000</span> <span class="operator">|</span> <span class="number">6</span>               <span class="operator">|</span> <span class="number">4</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2006</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> Amy  <span class="operator">|</span> <span class="number">12000</span>  <span class="operator">|</span> <span class="number">5</span>               <span class="operator">|</span> <span class="number">5</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2010</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span> Mark <span class="operator">|</span> <span class="number">65000</span>  <span class="operator">|</span> <span class="number">12</span>              <span class="operator">|</span> <span class="number">12</span><span class="operator">/</span><span class="number">25</span><span class="operator">/</span><span class="number">2008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>        <span class="operator">|</span> Pam  <span class="operator">|</span> <span class="number">25000</span>  <span class="operator">|</span> <span class="number">25</span>              <span class="operator">|</span> <span class="number">1</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2005</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>        <span class="operator">|</span> Alex <span class="operator">|</span> <span class="number">5000</span>   <span class="operator">|</span> <span class="number">10</span>              <span class="operator">|</span> <span class="number">2</span><span class="operator">/</span><span class="number">3</span><span class="operator">/</span><span class="number">2007</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------+--------+-----------------+------------+</span></span><br><span class="line">Company 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> com_id <span class="operator">|</span> name   <span class="operator">|</span> city     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> RED    <span class="operator">|</span> Boston   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span> ORANGE <span class="operator">|</span> <span class="keyword">New</span> York <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>      <span class="operator">|</span> YELLOW <span class="operator">|</span> Boston   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>      <span class="operator">|</span> GREEN  <span class="operator">|</span> Austin   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+</span></span><br><span class="line">Orders 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> order_date <span class="operator">|</span> com_id <span class="operator">|</span> sales_id <span class="operator">|</span> amount <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">1</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2014</span>   <span class="operator">|</span> <span class="number">3</span>      <span class="operator">|</span> <span class="number">4</span>        <span class="operator">|</span> <span class="number">10000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">2</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2014</span>   <span class="operator">|</span> <span class="number">4</span>      <span class="operator">|</span> <span class="number">5</span>        <span class="operator">|</span> <span class="number">5000</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span> <span class="number">3</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2014</span>   <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> <span class="number">50000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>        <span class="operator">|</span> <span class="number">4</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">2014</span>   <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> <span class="number">4</span>        <span class="operator">|</span> <span class="number">25000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+--------+----------+--------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> Amy  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Mark <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line">解释：</span><br><span class="line">根据表 orders 中的订单 <span class="string">&#x27;3&#x27;</span> 和 <span class="string">&#x27;4&#x27;</span> ，容易看出只有 <span class="string">&#x27;John&#x27;</span> 和 <span class="string">&#x27;Pam&#x27;</span> 两个销售员曾经向公司 <span class="string">&#x27;RED&#x27;</span> 销售过。</span><br><span class="line">所以我们需要输出表 salesperson 中所有其他人的名字。</span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> SalesPerson (sales_id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">255</span>), salary <span class="type">int</span>, commission_rate <span class="type">int</span>, hire_date <span class="type">date</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Company (com_id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">255</span>), city <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Orders (order_id <span class="type">int</span>, order_date <span class="type">date</span>, com_id <span class="type">int</span>, sales_id <span class="type">int</span>, amount <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> SalesPerson;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SalesPerson (sales_id, name, salary, commission_rate, hire_date) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;100000&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2006-4-1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SalesPerson (sales_id, name, salary, commission_rate, hire_date) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>, <span class="string">&#x27;12000&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2010-5-1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SalesPerson (sales_id, name, salary, commission_rate, hire_date) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Mark&#x27;</span>, <span class="string">&#x27;65000&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;2008-12-25&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SalesPerson (sales_id, name, salary, commission_rate, hire_date) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Pam&#x27;</span>, <span class="string">&#x27;25000&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;2005-1-1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SalesPerson (sales_id, name, salary, commission_rate, hire_date) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;5000&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;2007-2-3&#x27;</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Company;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Company (com_id, name, city) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;RED&#x27;</span>, <span class="string">&#x27;Boston&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Company (com_id, name, city) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;ORANGE&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Company (com_id, name, city) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;YELLOW&#x27;</span>, <span class="string">&#x27;Boston&#x27;</span>);;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Company (com_id, name, city) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;GREEN&#x27;</span>, <span class="string">&#x27;Austin&#x27;</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Orders;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (order_id, order_date, com_id, sales_id, amount) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2014-1-1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;10000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (order_id, order_date, com_id, sales_id, amount) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2014-2-1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;5000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (order_id, order_date, com_id, sales_id, amount) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2014-3-1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;50000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (order_id, order_date, com_id, sales_id, amount) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2014-4-1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;25000&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.name </span><br><span class="line"><span class="keyword">FROM</span> SalesPerson c</span><br><span class="line"><span class="keyword">WHERE</span> c.sales_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> a.sales_id</span><br><span class="line"><span class="keyword">FROM</span> Orders a, Company b</span><br><span class="line"><span class="keyword">WHERE</span> a.com_id <span class="operator">=</span> b.com_id </span><br><span class="line"><span class="keyword">AND</span> b.name <span class="operator">=</span> <span class="string">&#x27;RED&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/sales-person/">https://leetcode.cn/problems/sales-person/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>586. 订单最多的客户</title>
    <url>/posts/33847/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
表: Orders</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name     <span class="operator">|</span> Type     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> order_number    <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customer_number <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line">Order_number是该表的主键。</span><br><span class="line">此表包含关于订单ID和客户ID的信息。</span><br></pre></td></tr></table></figure>
<p>编写一个SQL查询，为下了 <strong>最多订单</strong> 的客户查找 customer_number 。</p>
<p>测试用例生成后， <strong>恰好有一个客户</strong> 比任何其他客户下了更多的订单。</p>
<span id="more"></span>
<p>查询结果格式如下所示。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Orders 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> order_number <span class="operator">|</span> customer_number <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span> <span class="number">1</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span> <span class="number">2</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>            <span class="operator">|</span> <span class="number">3</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>            <span class="operator">|</span> <span class="number">3</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+</span></span><br><span class="line">输出: </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> customer_number <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line">解释: </span><br><span class="line">customer_number 为 <span class="string">&#x27;3&#x27;</span> 的顾客有两个订单，比顾客 <span class="string">&#x27;1&#x27;</span> 或者 <span class="string">&#x27;2&#x27;</span> 都要多，因为他们只有一个订单。</span><br><span class="line">所以结果是该顾客的 customer_number ，也就是 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> orders (order_number <span class="type">int</span>, customer_number <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> orders</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (order_number, customer_number) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (order_number, customer_number) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (order_number, customer_number) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (order_number, customer_number) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>解法1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.customer_number </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> customer_number, <span class="built_in">COUNT</span>(customer_number) order_count</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_number) a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.order_count <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><strong>官方解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_number</span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_number </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(customer_number) <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/customer-placing-the-largest-number-of-orders/">https://leetcode.cn/problems/customer-placing-the-largest-number-of-orders/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>367. 有效的完全平方数</title>
    <url>/posts/18881/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>给定一个 <strong>正整数</strong> num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</p>
<p><strong>进阶：</strong> 不要 使用任何内置的库函数，如  sqrt 。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：num = <span class="number">16</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：num = <span class="number">14</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ol>
<li>1 &lt;= num &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> - 1</li>
</ol>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">right</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="type">long</span> middle;</span><br><span class="line">        <span class="type">long</span> middleResult;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (left * left == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right * right == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            middleResult = middle * middle;</span><br><span class="line">            <span class="keyword">if</span> (middleResult == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (middleResult &lt; num) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (middleResult &gt; num) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/valid-perfect-square/">https://leetcode.cn/problems/valid-perfect-square/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>852. 山脉数组的峰顶索引</title>
    <url>/posts/12804/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等</p>
<p>符合下列属性的数组 arr 称为 山脉数组 ：</p>
<ul>
<li>arr.length &gt;= 3</li>
<li>存在 i（0 &lt; i &lt; arr.length - 1）使得：
<ol>
<li>arr[0] &lt; arr[1] &lt; … arr[i-1] &lt; arr[i]</li>
<li>arr[i] &gt; arr[i+1] &gt; … &gt; arr[arr.length - 1]</li>
</ol>
</li>
</ul>
<p>给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] &lt; arr[1] &lt; … arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; … &gt; arr[arr.length - 1] 的下标 i 。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 4:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 5:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">24</span>,<span class="number">69</span>,<span class="number">100</span>,<span class="number">99</span>,<span class="number">79</span>,<span class="number">78</span>,<span class="number">67</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">19</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>3 &lt;= arr.length &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
<li>0 &lt;= arr[i] &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></li>
<li>题目数据保证 arr 是一个山脉数组</li>
</ul>
<p><strong>进阶：</strong> 很容易想到时间复杂度 O(n) 的解决方案，你可以设计一个 O(log(n)) 的解决方案吗？</p>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[middle - <span class="number">1</span>] &lt; arr[middle] &amp;&amp; arr[middle] &gt; arr[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[middle - <span class="number">1</span>] &gt; arr[middle] &amp;&amp; arr[middle] &gt; arr[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[middle - <span class="number">1</span>] &lt; arr[middle] &amp;&amp; arr[middle] &lt; arr[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                left = middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>官方解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = n - <span class="number">2</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/peak-index-in-a-mountain-array/">https://leetcode.cn/problems/peak-index-in-a-mountain-array/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>35. 搜索插入位置</title>
    <url>/posts/4972/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的算法。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], target = <span class="number">5</span></span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], target = <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], target = <span class="number">7</span></span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
<li>-<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span> &lt;= nums[i] &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
<li>nums 为 无重复元素 的 升序 排列数组</li>
<li>-<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span> &lt;= target &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[right] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/search-insert-position/">https://leetcode.cn/problems/search-insert-position/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>584. 寻找用户推荐人</title>
    <url>/posts/22639/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
给定表 customer ，里面保存了所有客户信息和他们的推荐人。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> referee_id<span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Will <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> Jane <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> Alex <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> Bill <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> Zack <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> Mark <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-----------+</span></span><br></pre></td></tr></table></figure>
<p>写一个查询语句，返回一个客户列表，列表中客户的推荐人的编号都 不是 2。<br />
对于上面的示例数据，结果为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> Will <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jane <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bill <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Zack <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Customer (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">25</span>), referee_id <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Customer;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customer (id, name, referee_id) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Will&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customer (id, name, referee_id) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customer (id, name, referee_id) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customer (id, name, referee_id) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Bill&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customer (id, name, referee_id) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;Zack&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customer (id, name, referee_id) <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;Mark&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.name</span><br><span class="line"><span class="keyword">FROM</span> Customer a</span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> referee_id <span class="operator">=</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><strong>解法2（官方解法）：</strong><br />
很多人会下意识地这么写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> referee_Id <span class="operator">&lt;&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>然而，这个查询只会返回一个结果：Zach，尽管事实上有 4 个顾客都不是 Jane 推荐的（包括 Jane 她自己）。所有没有推荐人（referee_id 字段值为 NULL) 的全部都消失了。为什么?<br />
这是因为，在MySQL里， 使用三值逻辑 —— TRUE, FALSE 和 UNKNOWN。任何与 NULL 值进行的比较都会与第三种值 UNKNOWN 做比较。这个“任何值”包括 NULL 本身！这就是为什么 MySQL 提供 IS NULL 和 IS NOT NULL 两种操作来对 NULL 特殊判断。<br />
因此，在 WHERE 语句中我们需要做一个额外的条件判断 `referee_id IS NULL’。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> referee_id <span class="operator">&lt;&gt;</span> <span class="number">2</span> <span class="keyword">OR</span> referee_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> referee_id <span class="operator">!=</span> <span class="number">2</span> <span class="keyword">OR</span> referee_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/find-customer-referee/">https://leetcode.cn/problems/find-customer-referee/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>374. 猜数字大小</title>
    <url>/posts/60755/</url>
    <content><![CDATA[<p>猜数字游戏的规则如下：</p>
<ul>
<li>每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。</li>
<li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li>
</ul>
<p>你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：</p>
<ul>
<li>-1：我选出的数字比你猜的数字小 pick &lt; num</li>
<li>1：我选出的数字比你猜的数字大 pick &gt; num</li>
<li>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num<br />
返回我选出的数字。</li>
</ul>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">10</span>, pick = <span class="number">6</span></span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">1</span>, pick = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, pick = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 4:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, pick = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= n &lt;= 2^31 - 1</li>
<li>1 &lt;= pick &lt;= n</li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> <span class="number">1</span> + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (guess(left) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (guess(right) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (guess(middle) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (guess(middle) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (guess(middle) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/guess-number-higher-or-lower/">https://leetcode.cn/problems/guess-number-higher-or-lower/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>704. 二分查找</title>
    <url>/posts/54442/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>], target = <span class="number">9</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: <span class="number">9</span> 出现在 nums 中并且下标为 <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>], target = <span class="number">2</span></span><br><span class="line">输出: -<span class="number">1</span></span><br><span class="line">解释: <span class="number">2</span> 不存在 nums 中因此返回 -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ol>
<li>你可以假设 nums 中的所有元素是不重复的。</li>
<li>n 将在 [1, 10000]之间。</li>
<li>nums 的每个元素都将在 [-9999, 9999]之间。</li>
</ol>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> low + nums.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[low] ==  target) &#123;</span><br><span class="line">                <span class="keyword">return</span> low;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[high] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> high;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            middle = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/binary-search/">https://leetcode.cn/problems/binary-search/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>《小岛经济学》读后感</title>
    <url>/posts/43131/</url>
    <content><![CDATA[<p>作者： 彼得·希夫 / 安德鲁·希夫（Peter D. Schiff / Andrew J. Schiff）<br />
推荐系数：3/5<br />
1、《小岛经济学》以美国经济为原型，用充满故事趣味性的方式，配合大量的配图，描述了资本是如何积累的、货币的起源、政府是如何诞生、贸易是如何发展的，通货膨胀是如何发生的，最后对中美贸易战做出了预判。相比《经济学原理》，这本书更接地气。<br />
2、可能我比较蠢，最后还是没看懂通货膨胀及货币超发的关系及经济环境演变的内在逻辑。看评论，很多人说是经济学的入门读物，但是我怎么觉得顶多算是科普。<br />
3、看的过程总觉得，作者好像很推崇自由经济，政府插手就会坏事。上网Google了一下，原来这是典型奥地利学派，与之相对的是凯恩斯主义。不知作者是不是把人心想得太美好了，因为资本都是逐利的。市场经济会受“看不见的手”调整，但是任由其自由发展仿佛也不对，还是需要“看得见的手”进行约束，反过来也一样。人家政治体系都还会搞三权分立呢，因为人都是会利己的，自私的基因从我们诞生就已经存在了。<br />
4、也不能一棒子打死吧，里面还是有些不错的，比如要直面错误，勤劳致富等。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>《这才是心理学》读后感</title>
    <url>/posts/25743/</url>
    <content><![CDATA[<p>作者：基思·斯坦诺维奇（Keith E. Stanovich）<br />
推荐系数：4.5/5<br />
一直想读一本介绍心理学方面的书籍。这本书就挺适合的。心理学是一门年轻的基于科学实验的可证伪的学科。虽然头两章读起来有点像高中的政治书，但是越往后越能产生共鸣，甚至有好几章内容不自觉和平时的工作联系了起来，比如两个变量的关联性，多个角度证明同一个变量等。只是工作又参杂了人际的因素，也许正是因为如此，科学才显得更纯粹吧。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>《人类简史》读后感</title>
    <url>/posts/34897/</url>
    <content><![CDATA[<p>作者：尤瓦尔·赫拉利（Yuval Noah Harari）<br />
推荐系数：5/5<br />
花了两周的地铁通勤时间二刷完了《人类简史》。书中不是完全按照时间轴来进行叙事性描述，加入了作者很多天马行空的思考与见解，具体事实或者推论是否真的会像作者说的那样历史学的不深也不好说。只是整本书下来，有两个观点很有意思：</p>
<ol>
<li>人类能大规模合作靠的是对想象出来的同一个故事的信任；</li>
<li>人类发展出来的信用体系使得近500年人类发展进程得以快速发展。感觉书中最后几章的讨论也给我们留下了个思考，我们到底快不快乐，快乐是主观的还是客观的。</li>
</ol>
<p>人类一思考，上帝就发笑。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>《镜子》读后感</title>
    <url>/posts/39078/</url>
    <content><![CDATA[<p>作者：刘慈欣<br />
推荐系数：4.5/5<br />
不得不说，刘慈欣脑洞真大，反腐和宇宙大爆炸都能结合起来。我只是在想，可能也不一定水至清则无鱼，人至察则无徒，这个世界可塑性那么强到最后进化出了另一种生存模式另一种玩法也说不定。<br />
Anyway，真的是好看！而且我也是名软件工程师！</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>《动物庄园》读后感</title>
    <url>/posts/60962/</url>
    <content><![CDATA[<p>作者：乔治·奥威尔（George Orwell）<br />
推荐系数：5/5<br />
前几天同事提起这本书，说我像书里头的snowball，但整本看下来越发觉得我不是，我可能会偏理想主义，介于出世与入世之间，但是我同样会“大不了就不跟你玩”。中间有挺长的篇幅可以概括为“你看到的只是你看到的，你想到的只是我想让你想到的”。也许真的人类天性自私或者“乌合之众”容易被带偏，但其实我们要的归根到底其实只是吃得饱，穿的暖然后住得舒服就更好了。<br />
类似的书籍让我想起了《1984》<br />
嗯，看来我还是喜欢纯粹的知识，起码在代码里我还是自由的上帝。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>《行之有效》读后感</title>
    <url>/posts/24401/</url>
    <content><![CDATA[<p>作者：蔡为东<br />
推荐系数：3.5/5<br />
上个月大老板推荐了《行之有效》这本书，说是讲技术基层管理的。通篇看下来，其实就是告诉我们，基层管理者要多思考，多观察，以对团队有益作为出发点和原则，同时也不能落下自己的专业技能和素养。精华的点有以下几个：</p>
<ol>
<li>管理者负责。</li>
<li>以身作则。</li>
<li>公平和公开。</li>
<li>尊重每一个人。</li>
<li>提高员工参与度，让员工负责任。</li>
<li>随时激励。</li>
<li>提纲挈领，要事优先，管理优先。</li>
<li>培养人才，创造机会。</li>
<li>技术和管理一肩挑。</li>
<li>保持危机感，持续学习。</li>
<li>顺势而为。</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>196. 删除重复的电子邮箱</title>
    <url>/posts/59823/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>Write an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.</p>
<p>After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.</p>
<p>编写一个SQL删除语句来<strong>删除</strong>所有重复的电子邮件，只保留一个id最小的唯一电子邮件。</p>
<p>以 任意顺序 返回结果表。 （注意： 仅需要写删除语句，将自动对剩余结果进行查询）</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (Id <span class="type">int</span>, Email <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bob@example.com&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Person 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> email            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> john<span class="variable">@example</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> bob<span class="variable">@example</span>.com  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> john<span class="variable">@example</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line">输出: </span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> email            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> john<span class="variable">@example</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> bob<span class="variable">@example</span>.com  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line">解释: john<span class="variable">@example</span>.com重复两次。我们保留最小的Id <span class="operator">=</span> <span class="number">1</span>。</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1 <span class="keyword">FROM</span> person p1, person p2</span><br><span class="line"><span class="keyword">WHERE</span> p1.Email <span class="operator">=</span> p2.Email <span class="keyword">AND</span> p1.Id <span class="operator">&gt;</span> p2.Id</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/delete-duplicate-emails">https://leetcode.cn/problems/delete-duplicate-emails</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>184. 部门工资最高的员工</title>
    <url>/posts/49748/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等<br />
编写SQL查询以查找每个部门中薪资最高的员工。<br />
按<strong>任意顺序</strong>返回结果表。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">255</span>), salary <span class="type">int</span>, departmentId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, departmentId) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>, <span class="string">&#x27;70000&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, departmentId) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Jim&#x27;</span>, <span class="string">&#x27;90000&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, departmentId) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Henry&#x27;</span>, <span class="string">&#x27;80000&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, departmentId) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Sam&#x27;</span>, <span class="string">&#x27;60000&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, departmentId) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;90000&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, name) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;IT&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (id, name) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表： Employee</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line"><span class="operator">|</span> 列名          <span class="operator">|</span> 类型    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name         <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary       <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> departmentId <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------+</span></span><br><span class="line">id是此表的主键列。</span><br><span class="line">departmentId是Department表中ID的外键。</span><br><span class="line">此表的每一行都表示员工的ID、姓名和工资。它还包含他们所在部门的ID。</span><br></pre></td></tr></table></figure>
<p>表： Department</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> 列名         <span class="operator">|</span> 类型    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">id是此表的主键列。</span><br><span class="line">此表的每一行都表示一个部门的ID及其名称。</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> salary <span class="operator">|</span> departmentId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Joe   <span class="operator">|</span> <span class="number">70000</span>  <span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> Jim   <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> Henry <span class="operator">|</span> <span class="number">80000</span>  <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> Sam   <span class="operator">|</span> <span class="number">60000</span>  <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Max   <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">Department 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> IT    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> Sales <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> Department <span class="operator">|</span> Employee <span class="operator">|</span> Salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> IT         <span class="operator">|</span> Jim      <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sales      <span class="operator">|</span> Henry    <span class="operator">|</span> <span class="number">80000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> IT         <span class="operator">|</span> Max      <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line">解释：Max 和 Jim 在 IT 部门的工资都是最高的，Henry 在销售部的工资最高。</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  department.Name <span class="keyword">AS</span> <span class="string">&#x27;Department&#x27;</span>,</span><br><span class="line">  employee.Name   <span class="keyword">AS</span> <span class="string">&#x27;Employee&#x27;</span>,</span><br><span class="line">  Salary</span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line">  <span class="keyword">JOIN</span> department <span class="keyword">ON</span> employee.DepartmentId <span class="operator">=</span> department.Id</span><br><span class="line"><span class="keyword">WHERE</span> (employee.DepartmentId, Salary) <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="built_in">max</span>(Salary)</span><br><span class="line">  <span class="keyword">FROM</span> employee</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/department-highest-salary">https://leetcode.cn/problems/department-highest-salary</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>183. 从不订购的客户</title>
    <url>/posts/44608/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。<br />
返回的结果表中的数据可以按<strong>任意顺序</strong>排列。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Customers (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Orders (id <span class="type">int</span>, customerId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Customers</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (id, name) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (id, name) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Henry&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (id, name) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Sam&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (id, name) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Max&#x27;</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Orders</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (id, customerId) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (id, customerId) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表：Customers</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">id 是这个表的主键。</span><br><span class="line">表的每一行表示一个用户的ID和名字</span><br></pre></td></tr></table></figure>
<p>表：Orders</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> customerId  <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line">id 是这个表的主键。</span><br><span class="line">customerId是来自Customers表的外键</span><br><span class="line">表的每一行表示一个订单的ID以及下订单的用户的ID</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Customers 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Joe   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> Henry <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> Sam   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> Max   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line">Orders 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> customerId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> Customers <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> Henry     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Max       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br></pre></td></tr></table></figure>
<p><strong>解法1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.Name <span class="keyword">AS</span> Customers </span><br><span class="line"><span class="keyword">FROM</span> Customers c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders o </span><br><span class="line"><span class="keyword">ON</span> c.Id<span class="operator">=</span>o.CustomerId </span><br><span class="line"><span class="keyword">WHERE</span> o.CustomerId <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<p><strong>解法2：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.Name <span class="keyword">AS</span> Customers</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> Orders <span class="keyword">AS</span> b</span><br><span class="line">  <span class="keyword">WHERE</span> a.Id <span class="operator">=</span> b.CustomerId</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/customers-who-never-order">https://leetcode.cn/problems/customers-who-never-order</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>182. 查找重复的电子邮箱</title>
    <url>/posts/13020/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
编写一个 SQL 查询，查找 <em><strong>Person</strong></em> 表中所有重复的电子邮箱。<br />
返回的结果表中的数据可以按<strong>任意顺序</strong>排列。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (id <span class="type">int</span>, email <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a@b.com&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c@d.com&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;a@b.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表：Person</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email       <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">id 是这个表的主键。   </span><br><span class="line">表的每一行都包含一个邮箱地址。邮箱地址不包含大写字母。</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Person 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> email   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> a<span class="variable">@b</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> c<span class="variable">@d</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> a<span class="variable">@b</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> Email   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> a<span class="variable">@b</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line">解释：a<span class="variable">@b</span>.com重复了两次</span><br></pre></td></tr></table></figure>
<p><strong>解法1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Email</span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>解法2：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.Email</span><br><span class="line"><span class="keyword">FROM</span> Person <span class="keyword">AS</span> a, Person <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="operator">!=</span> b.id</span><br><span class="line"><span class="keyword">AND</span> a.Email<span class="operator">=</span>b.Email</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/duplicate-emails">https://leetcode.cn/problems/duplicate-emails</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>180. 连续出现的数字</title>
    <url>/posts/41601/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等<br />
编写一个 SQL 查询，查找所有至少连续出现三次的数字。<br />
返回的结果表中的数据可以按<strong>任意顺序</strong>排列。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Logs (id <span class="type">int</span>, num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Logs</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Logs (id, num) <span class="keyword">values</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表：Logs</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> num         <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">id 是这个表的主键。</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Logs 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">1</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">1</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">1</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> <span class="number">2</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> <span class="number">1</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>  <span class="operator">|</span> <span class="number">2</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>  <span class="operator">|</span> <span class="number">2</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="keyword">Result</span> 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> ConsecutiveNums <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line">解释：<span class="number">1</span> 是唯一连续出现至少三次的数字。</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> l1.Num <span class="keyword">AS</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span> logs l1, logs l2, logs l3</span><br><span class="line"><span class="keyword">WHERE</span> l1.Id <span class="operator">=</span> l2.Id <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">AND</span> l2.Id <span class="operator">=</span> l3.Id <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">AND</span> l1.Num <span class="operator">=</span> l2.Num</span><br><span class="line">      <span class="keyword">AND</span> l2.Num <span class="operator">=</span> l3.Num;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/consecutive-numbers">https://leetcode.cn/problems/consecutive-numbers</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>178. 分数排名</title>
    <url>/posts/32576/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等<br />
编写 SQL 查询对分数进行排序。排名按以下规则计算:</p>
<ul>
<li>分数应按从高到低排列。</li>
<li>如果两个分数相等，那么两个分数的排名应该相同。</li>
<li>在排名相同的分数后，排名数应该是下一个连续的整数。换句话说，排名之间不应该有空缺的数字。<br />
按 <em><strong>score</strong></em> 降序返回结果表。</li>
</ul>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Scores (id <span class="type">int</span>, score <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Scores</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3.5&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3.65&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4.0&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3.85&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4.0&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;3.65&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表：Scores</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> score       <span class="operator">|</span> <span class="type">decimal</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">Id是该表的主键。</span><br><span class="line">该表的每一行都包含了一场比赛的分数。Score是一个有两位小数点的浮点值。</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Scores 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">3.50</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">3.65</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">4.00</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> <span class="number">3.85</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> <span class="number">4.00</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>  <span class="operator">|</span> <span class="number">3.65</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line">输出: </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+</span></span><br><span class="line"><span class="operator">|</span> score <span class="operator">|</span> rank <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4.00</span>  <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4.00</span>  <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3.85</span>  <span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3.65</span>  <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3.65</span>  <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3.50</span>  <span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+</span></span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  Score,</span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line">   <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Score s</span><br><span class="line">         <span class="keyword">FROM</span> Scores) tmp</span><br><span class="line">   <span class="keyword">WHERE</span> s <span class="operator">&gt;=</span> Score) Rank</span><br><span class="line"><span class="keyword">FROM</span> Scores</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/rank-scores">https://leetcode.cn/problems/rank-scores</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>181. 超过经理收入的员工</title>
    <url>/posts/58200/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
编写一个SQL查询来查找收入比经理高的员工。<br />
以<strong>任意顺序</strong>返回结果表。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">255</span>), salary <span class="type">int</span>, managerId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, managerId) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>, <span class="string">&#x27;70000&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, managerId) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Henry&#x27;</span>, <span class="string">&#x27;80000&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, managerId) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Sam&#x27;</span>, <span class="string">&#x27;60000&#x27;</span>, <span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, name, salary, managerId) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;90000&#x27;</span>, <span class="string">&#x27;None&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表：Employee</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary      <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> managerId   <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">Id是该表的主键。</span><br><span class="line">该表的每一行都表示雇员的ID、姓名、工资和经理的ID。</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Employee 表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> salary <span class="operator">|</span> managerId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Joe   <span class="operator">|</span> <span class="number">70000</span>  <span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> Henry <span class="operator">|</span> <span class="number">80000</span>  <span class="operator">|</span> <span class="number">4</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> Sam   <span class="operator">|</span> <span class="number">60000</span>  <span class="operator">|</span> <span class="keyword">Null</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> Max   <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span> <span class="keyword">Null</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+-----------+</span></span><br><span class="line">输出: </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> Employee <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> Joe      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line">解释: Joe 是唯一挣得比经理多的雇员。</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.Name <span class="keyword">AS</span> Employee</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> a, Employee <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.Salary <span class="operator">&gt;</span> b.Salary</span><br><span class="line"><span class="keyword">AND</span> a.ManagerId <span class="operator">=</span> b.Id</span><br><span class="line"><span class="keyword">AND</span> a.ManagerId <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/employees-earning-more-than-their-managers">https://leetcode.cn/problems/employees-earning-more-than-their-managers</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>176. 第二高的薪水</title>
    <url>/posts/23560/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 中等<br />
编写一个 SQL 查询，获取并返回 Employee 表中第二高的薪水 。如果不存在第二高的薪水，查询应该返回 null 。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (id <span class="type">int</span>, salary <span class="type">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, salary) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;100&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, salary) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;200&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, salary) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;300&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表: Employee</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name <span class="operator">|</span> Type <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary      <span class="operator">|</span> <span class="type">int</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------+</span></span><br><span class="line">id 是这个表的主键。</span><br><span class="line">表的每一行包含员工的工资信息。</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">200</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">300</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> SecondHighestSalary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">200</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line">输出：</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> SecondHighestSalary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">null</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(Salary) SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">WHERE</span> Salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(Salary) <span class="keyword">FROM</span> Employee)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/second-highest-salary">https://leetcode.cn/problems/second-highest-salary</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Gerrit没有出现Verify按钮问题解决</title>
    <url>/posts/18923/</url>
    <content><![CDATA[<p>今天在本地修复了个小问题，然后提交到Gerrit。刚好老板看到了，提了点意见，给的分数为-2。对过意见后，做了点修改然后再一次提交到Gerrit，这时老板开会去了。找了另一个同事来review，但是发现即使给了+2分，也没有出现Verify按钮。鼓捣了老半天，才发现，原来，如果出现了-2，需要重新提交新的patch set，或者由给出-2分的成员批准才能Verify并入库。</p>
]]></content>
      <categories>
        <category>随笔备忘</category>
      </categories>
      <tags>
        <tag>Gerrit</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>6、处理代码评审过程产生的抵触问题</title>
    <url>/posts/45937/</url>
    <content><![CDATA[<p>Sometimes a developer will push back on a code review. Either they will disagree with your suggestion or they will complain that you are being too strict in general.<br />
有时开发人员可能会对某次代码审查结果产生抵触。他要么就是不同意你的建议，要么就是抱怨你太严格了。</p>
<span id="more"></span>
<h2 id="who-is-right"><a class="markdownIt-Anchor" href="#who-is-right"></a> Who is right?</h2>
<h2 id="谁是对的"><a class="markdownIt-Anchor" href="#谁是对的"></a> 谁是对的？</h2>
<p>When a developer disagrees with your suggestion, first take a moment to consider if they are correct. Often, they are closer to the code than you are, and so they might really have a better insight about certain aspects of it. Does their argument make sense? Does it make sense from a code health perspective? If so, let them know that they are right and let the issue drop.<br />
当开发人员不同意你的建议时，可以先花点时间考虑下他们是不是对的。通常，他们比你更接近代码，因此他们可能会对代码的某些方面有更好的了解。他们的异议是否有意义？从代码质量的角度来看这些争议是否有意义？如果是的话，那就让他们知道他们是对的，然后关闭问题。</p>
<p>However, developers are not always right. In this case the reviewer should further explain why they believe that their suggestion is correct. A good explanation demonstrates both an understanding of the developer’s reply, and additional information about why the change is being requested.<br />
然而，开发人员并不总是对的。在这种情况下，审查人员应该进一步解释为什么相信他们的建议是对的。一个好的解释不仅表明了对开发人员的回复的理解，也深入阐述了为什么要这么改。</p>
<p>In particular, when the reviewer believes their suggestion will improve code health, they should continue to advocate for the change, if they believe the resulting code quality improvement justifies the additional work requested. <strong>Improving code health tends to happen in small steps.</strong><br />
尤其是，当审查人员认为他们的建议会改善代码质量并且觉得由此带来的额外工作量是合理时，他们应该继续倡导修改。<strong>改善代码质量总是在小步中进行的。</strong></p>
<p>Sometimes it takes a few rounds of explaining a suggestion before it really sinks in. Just make sure to always stay <a href="comments.md#courtesy">polite</a> and let the developer know that you <em>hear</em> what they’re saying, you just don’t <em>agree</em>.<br />
有时需要来回对建议解释个几轮才能让开发人员真正理解。在这过程中，也要记得保证礼貌并且让开发人员知道你<em>知道</em>他们在说什么，只是不<em>同意</em>而已</p>
<h2 id="upsetting-developers"><a class="markdownIt-Anchor" href="#upsetting-developers"></a> Upsetting Developers</h2>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
<p>Reviewers sometimes believe that the developer will be upset if the reviewer insists on an improvement. Sometimes developers do become upset, but it is usually brief and they become very thankful later that you helped them improve the quality of their code. Usually, if you are <a href="comments.md#courtesy">polite</a> in your comments, developers actually don’t become upset at all, and the worry is just in the reviewer’s mind. Upsets are usually more about <a href="comments.md#courtesy">the way comments are written</a> than about the reviewer’s insistence on code quality.<br />
审查人员有时会觉得如果审查人员坚持代码改进会让开发人员感到沮丧。开发人员有时也确实会感到沮丧，但这种感觉通常是短暂的，并且后续还会感激你帮助他们改善代码质量。通常情况下，如果你在评注里保持着礼貌，开发人员实际上是不会感到抗拒的，这个担心只是审查人员自身觉得的而已。比起审查人员坚持代码改善，反而是审查意见的编写方式更容易让开发人员感到不快。</p>
<h2 id="cleaning-it-up-later"><a class="markdownIt-Anchor" href="#cleaning-it-up-later"></a> Cleaning It Up Later</h2>
<h2 id="后续优化"><a class="markdownIt-Anchor" href="#后续优化"></a> 后续优化</h2>
<p>A common source of push back is that developers (understandably) want to get things done. They don’t want to go through another round of review just to get this CL in. So they say they will clean something up in a later CL, and thus you should LGTM <em>this</em> CL now. Some developers are very good about this, and will immediately write a follow-up CL that fixes the issue. However, experience shows that as more time passes after a developer writes the original CL, the less likely this clean up is to happen. In fact, usually unless the developer does the clean up <em>immediately</em> after the present CL, it never happens. This isn’t because developers are irresponsible, but because they have a lot of work to do and the cleanup gets lost or forgotten in the press of other work. Thus, it is usually best to insist that the developer clean up their CL <em>now</em>, before the code is in the codebase and “done.” Letting people “clean things up later” is a common way for codebases to degenerate.<br />
发生抵触的一个常见原因是开发人员想完成任务，这是可以理解的。他们不想为了让这个CL通过而进行新一轮的审查。因此他们会说他们会在后续的CL里进行优化，现在你应该先让我通过<em>这个</em>CL。一些开发人员很擅长做这个，还会立即写一个跟进事项。然而，经验表明，开发人员在写下原本的CL之后，随着时间推移，这些跟进事项会越来越难以得到实施。实际上多数情况是，除非开发人员<em>立马</em>处理这些问题，否则以后都不会处理。这不是因为开发人员没有责任心，而是因为他们有很多工作要做，从而这些跟进事项在其它工作的压力下被搁置或者遗忘。因此，最好坚持在代码入库前就让开发人员就处理好这些问题。让人们“稍后跟进”是代码质量下降的常见原因。</p>
<p>If a CL introduces new complexity, it must be cleaned up before submission unless it is an <a href="../emergencies.md">emergency</a>. If the CL exposes surrounding problems and they can’t be addressed right now, the developer should file a bug for the cleanup and assign it to themselves so that it doesn’t get lost. They can optionally also write a TODO comment in the code that references the filed bug.<br />
如果一个CL引入了新的复杂性，那么在提交到代码库前必须进行优化除非这是个紧急任务。如果这个CL暴露了一些别的问题而且无法立马解决，那么开发人员应该提交一个待跟进的bug并把它指派给自己，以此来让它不会被遗忘。开发人员也可以选择在代码里下一个TODO注释来提醒这个被记录下来的bug。</p>
<h2 id="general-complaints-about-strictness"><a class="markdownIt-Anchor" href="#general-complaints-about-strictness"></a> General Complaints About Strictness</h2>
<h2 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> </h2>
<p>If you previously had fairly lax code reviews and you switch to having strict reviews, some developers will complain very loudly. Improving the <a href="speed.md">speed</a> of your code reviews usually causes these complaints to fade away.<br />
如果你之前做代码审核比较宽松，然后（突然）转向严格的审查，一些开发人员会可能意见会比较大。提高你的代码审查<a href="speed.md">速度</a>通常能让这些抱怨消失。</p>
<p>Sometimes it can take months for these complaints to fade away, but eventually developers tend to see the value of strict code reviews as they see what great code they help generate. Sometimes the loudest protesters even become your strongest supporters once something happens that causes them to really see the value you’re adding by being strict.<br />
有时需要花几个月的时间来让这些抵触情绪消失，但最终开发人员会发现严格代码审查所带来的价值，因为他们看到了在审查人员的帮助下写出了出色的代码。一旦意见最大的那几个抗议者看到了你严格审查产生的价值，有时他们甚至会成为你的最坚定的支持者。</p>
<h2 id="resolving-conflicts"><a class="markdownIt-Anchor" href="#resolving-conflicts"></a> Resolving Conflicts</h2>
<h2 id="解决冲突"><a class="markdownIt-Anchor" href="#解决冲突"></a> 解决冲突</h2>
<p>If you are following all of the above but you still encounter a conflict between yourself and a developer that can’t be resolved, see <a href="../51044">The Standard of Code Review</a> for guidelines and principles that can help resolve the conflict.<br />
如果你遵从了上述几点但仍然和开发人员产生了难以解决的意见冲突，那么请参阅<a href="../51044">代码审查标准</a>章节，里面的指南和原则有助于解决冲突。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Google代码评审规约</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>3、代码审查标准</title>
    <url>/posts/51044/</url>
    <content><![CDATA[<p>The primary purpose of code review is to make sure that the overall code health of Google’s code base is improving over time. All of the tools and processes of code review are designed to this end.<br />
代码审查（code review）主要是为了确保Google代码库的整体代码质量能随着时间的推移而不断得到改善。代码审查的所有工具和步骤都是为了这个目的而设计的。</p>
<p>In order to accomplish this, a series of trade-offs have to be balanced.<br />
为了达到这个目的，我们必须做一系列的权衡折中。</p>
<span id="more"></span>
<p>First, developers must be able to make progress on their tasks. If you never submit an improvement to the codebase, then the codebase never improves. Also, if a reviewer makes it very difficult for any change to go in, then developers are disincentivized to make improvements in the future.<br />
首先，开发人员必须能够在他们自己的（开发）任务上取得进展。如果你从未向代码库提交过代码，那么代码库也不会产生变更。同样，如果评审人的评审标准过于苛刻，那么开发人员也会缺乏足够的动力去提交代码。</p>
<p>On the other hand, it is the duty of the reviewer to make sure that each CL is of such a quality that the overall code health of their codebase is not decreasing as time goes on. This can be tricky, because often, codebases degrade through small decreases in code health over time, especially when a team is under significant time constraints and they feel that they have to take shortcuts in order to accomplish their goals.<br />
另一方面，评审人应确保每次的代码变更都能达到这么一个状态：随着时间推移，代码库的整体质量不会下降。要做到这点可能会有点棘手，因为很多时候，代码库的质量会随着提交上来的代码的小幅质量下降而下降，尤其是当团队在处于时间很紧迫的情况下，为了完成任务，团队成员会觉得他们必须走一些捷径。</p>
<p>Also, a reviewer has ownership and responsibility over the code they are reviewing. They want to ensure that the codebase stays consistent, maintainable, and all of the other things mentioned in <a href="../16518">“What to look for in a code review.”</a><br />
同时，评审人对于他们在审核的代码拥有所有权和相应的责任。他们保证代码库的一致性，可维护性，以及<a href="../16518">《代码审查内容》</a>章节里提到的所以内容。</p>
<p>Thus, we get the following rule as the standard we expect in code reviews:<br />
因此，我们制定了以下规则作为代码审查的标准：</p>
<p><strong>In general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isn’t perfect.</strong><br />
<strong>一般情况下，即使某次代码提交并不是很完美，但是它确实提高了系统的整体代码健康状态，那么评审人就应该通过它。</strong></p>
<p>That is the senior principle among all of the code review guidelines.<br />
这是代码审查指南的最高原则。</p>
<p>There are limitations to this, of course. For example, if a CL adds a feature that the reviewer doesn’t want in their system, then the reviewer can certainly deny approval even if the code is well-designed.<br />
当然，这条原则也有一些局限性。例如，如果某次代码提交添加了一个特性（feature），而该特性却不是评审人所想要加到系统里的，那么毋庸置疑，即使该次代码提交设计得再好，评审人也不会让其通过。</p>
<p>A key point here is that there is no such thing as “perfect” code—there is only better code. Reviewers should not require the author to polish every tiny piece of a CL before granting approval. Rather, the reviewer should balance out the need to make forward progress compared to the importance of the changes they are suggesting. Instead of seeking perfection, what a reviewer should seek is continuous improvement. A CL that, as a whole, improves the maintainability, readability, and understandability of the system shouldn’t be delayed for days or weeks because it isn’t “perfect.”<br />
这里有个比较关键的点，那就是，没有完美的代码，只有更好的代码。评审人不应该要求代码作者在代码评审通过前要对每次代码提交都进行“抛光打蜡”。相反，评审人应该在任务进度和代码建议的重要性之间取得平衡。评审人要追求的是持续改进，而不是一次性的完美。如果某次代码提交提高了系统的可维护性，可读性以及可理解性，那么它就不应该因为不够“完美”而被延迟几天或者几周才通过。</p>
<p>Reviewers should always feel free to leave comments expressing that something could be better, but if it’s not very important, prefix it with something like “Nit: “ to let the author know that it’s just a point of polish that they could choose to ignore.<br />
评审人在认为某些代码可以写得更好时，可以随时发表评论，但如果提出的点并不是非常重要，可以在评论前加个前缀“Nit: ”（Not Important的缩写），通过这个方式让代码作者知道：此处的评论只是一个更好的建议而已，如果选择了忽略，那也是可以的。</p>
<p>Note: Nothing in this document justifies checking in CLs that definitely worsen the overall code health of the system. The only time you would do that would be in an emergency.<br />
注意：本文档中虽然没有内容会证明检查代码提交会使整个系统的代码质量变差。但如果评审人在紧迫的情况下，这种现象也是会出现的。</p>
<h2 id="mentoring指导"><a class="markdownIt-Anchor" href="#mentoring指导"></a> Mentoring（指导）</h2>
<p>Code review can have an important function of teaching developers something new about a language, a framework, or general software design principles. It’s always fine to leave comments that help a developer learn something new. Sharing knowledge is part of improving the code health of a system over time. Just keep in mind that if your comment is purely educational, but not critical to meeting the standards described in this document, prefix it with &quot;Nit: &quot; or otherwise indicate that it’s not mandatory for the author to resolve it in this CL.<br />
代码审查有个很重要的作用，那就是可以传授开发人员有关语言、框架或者通用的软件设计原则方面的一些新东西。审查人员可以随时留下能帮助开发人员学到新东西的评论。分享知识也是提高系统代码质量的方式之一。不过要记住一点，就是，如果你的评论只是纯粹的指导性的，但对于满足本文档里所描述的标准这件事本身来说不重要，那么就应该在评论前面加上“Nit：”或者用别的方式标明，并非强制代码作者去解决该次代码变更的评论里提到的问题。</p>
<h2 id="principles原则"><a class="markdownIt-Anchor" href="#principles原则"></a> Principles（原则）</h2>
<ul>
<li>
<p>Technical facts and data overrule opinions and personal preferences.</p>
</li>
<li>
<p>技术事实和数据优先于观点和个人偏好。(译注：技术事实是需要一些实践、贸易或科学专业知识才能发现、验证、解释和理解的事实。技术事实和数据一般由公司沉淀而成。此处可以简单理解为做代码审查时产生的观点或者审查人的个人喜欢，应先遵从于公司既有的技术事实和数据。)</p>
</li>
<li>
<p>On matters of style, the <a href="http://google.github.io/styleguide/">style guide</a> is the absolute authority. Any purely style point (whitespace, etc.) that is not in the style guide is a matter of personal preference. The style should be consistent with what is there. If there is no previous style, accept the author’s.</p>
</li>
<li>
<p>在代码规范问题上，<a href="http://google.github.io/styleguide/">规范规约</a>是绝对权威。 任何不在样式指南中的规范风格（例如空格等）都是个人喜好问题。 代码规范应与现有的规范规约一致。 如果还没有规约，则接受作者的。</p>
</li>
<li>
<p><strong>Aspects of software design are almost never a pure style issue or just a personal preference.</strong> They are based on underlying principles and should be weighed on those principles, not simply by personal opinion. Sometimes there are a few valid options. If the author can demonstrate (either through data or based on solid engineering principles) that several approaches are equally valid, then the reviewer should accept the preference of the author. Otherwise the choice is dictated by standard principles of software design.</p>
</li>
<li>
<p><strong>软件设计的方方面面几乎从来都不是纯粹的规范问题或者只是个人偏好。</strong> 它们（指软件设计的各个方面）都基于一些基本原则，应根据这些原则进行权衡，而不仅仅只是个人意见。有时可能会有好几个可行的方案。如果作者能通过数据或者基于可靠的工程设计原则证明这些方案都行之有效，那么审查人员应该接受作者偏向的方案，否则就得给予软件设计的标准原则来做出决定。</p>
</li>
<li>
<p>If no other rule applies, then the reviewer may ask the author to be consistent with what is in the current codebase, as long as that doesn’t worsen the overall code health of the system.</p>
</li>
<li>
<p>如果没有其它适用的规则，那么审查人员需要要求作者于现有代码库的规则保持一致，因为这有才不会损坏系统的整体代码质量。</p>
</li>
</ul>
<h2 id="resolving-conflicts处理冲突译注指开发人员和代码审查人员的意见冲突"><a class="markdownIt-Anchor" href="#resolving-conflicts处理冲突译注指开发人员和代码审查人员的意见冲突"></a> Resolving Conflicts（处理冲突，译注：指开发人员和代码审查人员的意见冲突）</h2>
<p>In any conflict on a code review, the first step should always be for the developer and reviewer to try to come to consensus, based on the contents of this document and the other documents in <a href="../developer/index.md">The CL Author’s Guide</a> and this <a href="index.md">Reviewer Guide</a>.<br />
对于代码审查过程中产生的任何意见冲突，开发人员和审查人员第一步应该是尝试基于本文档的内容、变更列表作者指南以及审核人员指南达成一致意见。</p>
<p>When coming to consensus becomes especially difficult, it can help to have a face-to-face meeting or a video conference between the reviewer and the author, instead of just trying to resolve the conflict through code review comments. (If you do this, though, make sure to record the results of the discussion as a comment on the CL, for future readers.)<br />
当很难达成共识时，审查人员和代码作者可以进行面对面沟通或者是视频会议沟通，而不是只是仅通过审查评论来去解决冲突。（但如果确实是这么做的，那么要保证将讨论结果记录到代码变更的评论里，供后面的读者参考。）</p>
<p>If that doesn’t resolve the situation, the most common way to resolve it would be to escalate. Often the escalation path is to a broader team discussion, having a Technical Lead weigh in, asking for a decision from a maintainer of the code, or asking an Eng Manager to help out. <strong>Don’t let a CL sit around because the author and the reviewer can’t come to an agreement.</strong><br />
如果通过上述方式还没解决问题，则通常的做法是上升。通常情况下是上升到范围更广的小组讨论，技术leader参与进来，通过询问代码的维护人员来做出决定，或者是让工程经理提供帮助。<strong>不要让（有意见冲突的）代码变更放任不管，因为代码作者和审查人员无法达成统一意见。</strong></p>
<p>Next: <a href="../16518">What to look for in a code review</a><br />
下一章：<a href="../16518">代码审查内容</a></p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Google代码评审规约</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>5、如何写代码审查评论</title>
    <url>/posts/12266/</url>
    <content><![CDATA[<h1 id="how-to-write-code-review-comments"><a class="markdownIt-Anchor" href="#how-to-write-code-review-comments"></a> How to write code review comments</h1>
<h1 id="如何写代码审查评论"><a class="markdownIt-Anchor" href="#如何写代码审查评论"></a> 如何写代码审查评论</h1>
<h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<ul>
<li>
<p>Be kind.</p>
</li>
<li>
<p>Explain your reasoning.</p>
</li>
<li>
<p>Balance giving explicit directions with just pointing out problems and letting the developer decide.</p>
</li>
<li>
<p>Encourage developers to simplify code or add code comments instead of just explaining the complexity to you.</p>
</li>
<li>
<p>语气要和善；</p>
</li>
<li>
<p>解释这么评论的原因；</p>
</li>
<li>
<p>在明确指示与指出问题之间做好平衡，并让开发人员自己决定；</p>
</li>
<li>
<p>鼓励开发人员简化代码或者增加注释，而不只是让他们向你就代码的复杂性进行说明。</p>
</li>
</ul>
<span id="more"></span>
<h2 id="courtesy"><a class="markdownIt-Anchor" href="#courtesy"></a> Courtesy</h2>
<h2 id="礼貌"><a class="markdownIt-Anchor" href="#礼貌"></a> 礼貌</h2>
<p>In general, it is important to be <a href="https://chromium.googlesource.com/chromium/src/+/master/docs/cr_respect.md">courteous and respectful</a> while also being very clear and helpful to the developer whose code you are reviewing. One way to do this is to be sure that you are always making comments about the <em>code</em> and never making comments about the <em>developer</em>. You don’t always have to follow this practice, but you should definitely use it when<br />
saying something that might otherwise be upsetting or contentious. For example:<br />
通常情况下，<a href="https://chromium.googlesource.com/chromium/src/+/master/docs/cr_respect.md">礼貌和尊重</a>是很重要的，做到这两点对于其代码正在被审查的开发人员也是有帮助的。要做到这点的一个做法是，确保你只是对<em>代码</em>做评论，而不是<em>开发人员</em>本身。虽然你不用每次都这么做，但在说一些可能会令人不安或者有争议的话时，就一定要这么做。例如：</p>
<p>Bad: “Why did <strong>you</strong> use threads here when there’s obviously no benefit to be gained from concurrency?”<br />
反例：“为什么这里<strong>你</strong>要使用线程？很明显这里使用并发是没有好处的。”</p>
<p>Good: “The concurrency model here is adding complexity to the system without any actual performance benefit that I can see. Because there’s no performance benefit, it’s best for this code to be single-threaded instead of using multiple threads.”<br />
正例：“这里使用并发模型增加了系统复杂度，我从中看不到实际的性能优势。由于没有性能优势，这里最好使用单线程来替代多线程。”</p>
<h2 id="explain-why"><a class="markdownIt-Anchor" href="#explain-why"></a> Explain Why</h2>
<h2 id="解释为什么"><a class="markdownIt-Anchor" href="#解释为什么"></a> 解释为什么</h2>
<p>One thing you’ll notice about the “good” example from above is that it helps the developer understand <em>why</em> you are making your comment. You don’t always need to include this information in your review comments, but sometimes it’s appropriate to give a bit more explanation around your intent, the best practice you’re following, or how your suggestion improves code health.<br />
从上面的正例你会看到，那样子说明能帮助开发人员理解你的意见。虽然你不用每次都用这种形式来写评论意见，但有时应当适当地对你的意图、你所遵循的最佳实践，或者你的意见如何提高代码质量做多点解释。</p>
<h2 id="giving-guidance"><a class="markdownIt-Anchor" href="#giving-guidance"></a> Giving Guidance</h2>
<h2 id="给予指导"><a class="markdownIt-Anchor" href="#给予指导"></a> 给予指导</h2>
<p><strong>In general it is the developer’s responsibility to fix a CL, not the reviewer’s.</strong> You are not required to do detailed design of a solution or write code for the developer.<br />
<strong>一般情况下，修复CL是开发人员的责任，而不是审核人员的。</strong> 你无需为开发人员做具体的解决方案设计或者写代码。</p>
<p>This doesn’t mean the reviewer should be unhelpful, though. In general you should strike an appropriate balance between pointing out problems and providing direct guidance. Pointing out problems and letting the developer make a decision often helps the developer learn, and makes it easier to do code reviews. It also<br />
can result in a better solution, because the developer is closer to the code than the reviewer is.<br />
但这不意味着审查人员就不用提供帮助。通常，你应该在指出问题和提供指导之间取一个平衡。指出问题并且让开发人员做出决定通常能帮助开发人员学习，并且使得代码审查变得更容易。这么做同时还能产生更好的解决方案，毕竟开发人员才是更接近代码的。</p>
<p>However, sometimes direct instructions, suggestions, or even code are more helpful. The primary goal of code review is to get the best CL possible. A secondary goal is improving the skills of developers so that they require less and less review over time.<br />
然而，有时一些明确的指示，提示甚至是代码会更有用些。代码审查的主要目的是尽可能地获得最好的CL。第二个目的是为了提高开发人员的技能，以便随着时间的推移他们需要越来越少的代码审查。</p>
<p>Remember that people learn from reinforcement of what they are doing well and not just what they could do better. If you see things you like in the CL, comment on those too! Examples: developer cleaned up a messy algorithm, added exemplary test coverage, or you as the reviewer learned something from the CL. Just as with all comments, include <a href="#explain-why">why</a> you liked something, further encouraging the developer to continue good practices.<br />
请记住，当对人们做的好的地方（而不是能做得更好的地方）进行加强（译注：也就是鼓励）时，人们总是能从中得到学习。如果你在CL里看到了你喜欢的点，例如：开发人员清理了混乱的算法，添加了示例性的覆盖测试，或者你作为审查人员从CL里学到的东西，那么也请评注起来！同时，正如其它评注一样，这里的评注也要包含<a href="#explain-why">解释为什么</a>你喜欢这个地方，以此进一步鼓励开发人员继续这些好的实践。</p>
<h2 id="accepting-explanations"><a class="markdownIt-Anchor" href="#accepting-explanations"></a> Accepting Explanations</h2>
<h2 id="接受解释"><a class="markdownIt-Anchor" href="#接受解释"></a> 接受解释</h2>
<p>If you ask a developer to explain a piece of code that you don’t understand, that should usually result in them <strong>rewriting the code more clearly</strong>. Occasionally, adding a comment in the code is also an appropriate response, as long as it’s not just explaining overly complex code.<br />
如果你让开发人员解释一段你不理解的代码，这通常会使得他们<strong>重新把代码写得更清晰一点。</strong> 偶尔，在代码里添加一段注释也是个恰当的回应，前提是这段注释不仅仅只是为了解释过于复杂的代码。</p>
<p><strong>Explanations written only in the code review tool are not helpful to future code readers.</strong> They are acceptable only in a few circumstances, such as when you are reviewing an area you are not very familiar with and the developer explains something that normal readers of the code would have already known.<br />
<strong>只在code review工具里做解释对于以后的代码读者是没有好处的。</strong> 只有少数情况下才会这么做，例如当你在审查一个你不熟悉的功能模块，开发人员就可以解释一下一般读者已经理解的代码。</p>
<p>Next: <a href="pushback.md">Handling Pushback in Code Reviews</a></p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Google代码评审规约</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>175. 组合两个表</title>
    <url>/posts/55850/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
编写一个SQL查询来报告 Person 表中每个人的姓、名、城市和州。如果 personId 的地址不在 Address 表中，则报告为空  null 。<br />
以<strong>任意顺序</strong>返回结果表。</p>
<span id="more"></span>
<p><strong>SQL结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (personId <span class="type">int</span>, firstName <span class="type">varchar</span>(<span class="number">255</span>), lastName <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Address (addressId <span class="type">int</span>, personId <span class="type">int</span>, city <span class="type">varchar</span>(<span class="number">255</span>), state <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (personId, lastName, firstName) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Wang&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (personId, lastName, firstName) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Address</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Address (addressId, personId, city, state) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;New York City&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Address (addressId, personId, city, state) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Leetcode&#x27;</span>, <span class="string">&#x27;California&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表: Person</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> 列名         <span class="operator">|</span> 类型     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> PersonId    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FirstName   <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LastName    <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">personId 是该表的主键列。</span><br><span class="line">该表包含一些人的 ID 和他们的姓和名的信息。</span><br></pre></td></tr></table></figure>
<p>表: Address</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> 列名         <span class="operator">|</span> 类型    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> AddressId   <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PersonId    <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> City        <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> State       <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line">addressId 是该表的主键列。</span><br><span class="line">该表的每一行都包含一个 ID <span class="operator">=</span> PersonId 的人的城市和州的信息。</span><br></pre></td></tr></table></figure>
<p>查询结果格式如下所示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">Person表:</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> personId <span class="operator">|</span> lastName <span class="operator">|</span> firstName <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span> Wang     <span class="operator">|</span> Allen     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> Alice    <span class="operator">|</span> Bob       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+-----------+</span></span><br><span class="line">Address表:</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+------------+</span></span><br><span class="line"><span class="operator">|</span> addressId <span class="operator">|</span> personId <span class="operator">|</span> city          <span class="operator">|</span> state      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="keyword">New</span> York City <span class="operator">|</span> <span class="keyword">New</span> York   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span> Leetcode      <span class="operator">|</span> California <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+------------+</span></span><br><span class="line">输出: </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+----------+</span></span><br><span class="line"><span class="operator">|</span> firstName <span class="operator">|</span> lastName <span class="operator">|</span> city          <span class="operator">|</span> state    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Allen     <span class="operator">|</span> Wang     <span class="operator">|</span> <span class="keyword">Null</span>          <span class="operator">|</span> <span class="keyword">Null</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob       <span class="operator">|</span> Alice    <span class="operator">|</span> <span class="keyword">New</span> York City <span class="operator">|</span> <span class="keyword">New</span> York <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+----------+</span></span><br><span class="line">解释: </span><br><span class="line">地址表中没有 personId <span class="operator">=</span> <span class="number">1</span> 的地址，所以它们的城市和州返回 <span class="keyword">null</span>。</span><br><span class="line">addressId <span class="operator">=</span> <span class="number">1</span> 包含了 personId <span class="operator">=</span> <span class="number">2</span> 的地址信息。</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.FirstName, a.LastName, b.City, b.State</span><br><span class="line"><span class="keyword">FROM</span> Person <span class="keyword">AS</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> a.PersonId <span class="operator">=</span> b.PersonId</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/combine-two-tables">https://leetcode.cn/problems/combine-two-tables</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>9. 回文数</title>
    <url>/posts/35052/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单<br />
给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br />
回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br />
例如，121 是回文，而 123 不是。</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">121</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：x = -<span class="number">121</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：从左向右读, 为 -<span class="number">121</span> 。 从右向左读, 为 <span class="number">121</span>- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">10</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：从右向左读, 为 <span class="number">01</span> 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<p><strong>约束条件</strong></p>
<ul>
<li>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</li>
</ul>
<p><strong>进阶：</strong> 你能不将整数转为字符串来解决这个问题吗？</p>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">original</span> <span class="operator">=</span> x;</span><br><span class="line">            <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">                result = result*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">                x = x/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(result == original)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/palindrome-number">https://leetcode.cn/problems/palindrome-number</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>136. 只出现一次的数字</title>
    <url>/posts/63105/</url>
    <content><![CDATA[<p><strong>难度系数：</strong> 简单</p>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>说明：</strong><br />
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<span id="more"></span>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>约束条件</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>
<li>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></li>
<li>数组里每个元素除了那个只出现一次的元素，其它元素都会出现两次。</li>
</ul>
<p><strong>解法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            result ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原题链接：<a href="https://leetcode.cn/problems/single-number">https://leetcode.cn/problems/single-number</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode题解</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>4、代码审查内容</title>
    <url>/posts/16518/</url>
    <content><![CDATA[<p>Note: Always make sure to take into account <a href="../51044">The Standard of Code Review</a> when considering each of these points.<br />
注意：在审查下面这几点时，请确保也将<a href="../51044">代码审查标准</a>考虑了进去。</p>
<span id="more"></span>
<h2 id="design设计"><a class="markdownIt-Anchor" href="#design设计"></a> Design（设计）</h2>
<p>The most important thing to cover in a review is the overall design of the CL. Do the interactions of various pieces of code in the CL make sense? Does this change belong in your codebase, or in a library? Does it integrate well with the rest of your system? Is now a good time to add this functionality?<br />
代码评审时最重要的一个地方就是该次代码变更的整体设计。该次代码变更的各个代码片段之间的交互是否有意义？该次变更是属于代码库的变更还是属于使用的库的变更？提审的代码是否能与系统的其它部分很好的集成起来？现在是否适合添加这个功能？</p>
<h2 id="functionality功能"><a class="markdownIt-Anchor" href="#functionality功能"></a> Functionality（功能）</h2>
<p>Does this CL do what the developer intended? Is what the developer intended good for the users of this code? The “users” are usually both end-users (when they are affected by the change) and developers (who will have to “use” this code in the future).<br />
该次代码变更是否达到了开发人员想要的效果？开发人员想要达到的效果是否能满足用户？注意，此处的“用户”不仅是指受本次变更影响的终端用户，也指后面会使用这段代码的开发人员。</p>
<p>Mostly, we expect developers to test CLs well-enough that they work correctly by the time they get to code review. However, as the reviewer you should still be thinking about edge cases, looking for concurrency problems, trying to think like a user, and making sure that there are no bugs that you see just by reading the code.<br />
多数情况下，我们希望开发人员在提交代码审核前能对要代码做足够的测试。然而，作为评审人，你仍需考虑边界情况、看下是否有并发问题、试着从用户的角度去思考，以此来确保不会存在那种仅通过阅读代码就能发现的bug。</p>
<p>You <em>can</em> validate the CL if you want—the time when it’s most important for a reviewer to check a CL’s behavior is when it has a user-facing impact, such as a <strong>UI change</strong>. It’s hard to understand how some changes will impact a user when you’re just reading the code. For changes like that, you can have the developer give you a demo of the functionality if it’s too inconvenient to patch in the CL and try it yourself.<br />
如果有需要，评审人也可以去验证提交上来的代码的正确性，如果某次提审的代码变更涉及到影响用户的直观体验（例如UI变了），那么此时评审人去检查该部分的代码是很重要的。如果只是去阅读这些代码，评审人很难想象这些变更会对用户造成什么样的影响。对于这类变更，如果评审人不方便在提审的代码变更里自己做测试，可以让开发人员给一个该功能的样例。</p>
<p>Another time when it’s particularly important to think about functionality during a code review is if there is some sort of <strong>parallel programming</strong> going on in the CL that could theoretically cause deadlocks or race conditions. These sorts of issues are very hard to detect by just running the code and usually need somebody (both the developer and the reviewer) to think through them carefully to be sure that problems aren’t being introduced. (Note that this is also a good reason not to use concurrency models where race conditions or deadlocks are possible—it can make it very complex to do code reviews or understand the code.)<br />
另一个在代码评审时需要重点关注的地方是，提审的代码里是否包含着并发编程，因为这部分代码理论上会引发死锁或者资源竞争问题。这类问题很难通过运行代码被发现，通常需要开发人员和评审人员一起仔细甄别来防止这些问题的出现。（这也是不使用可能引发资源竞争或者死锁问题的并发模型的一个好理由，毕竟这部分代码审核起来比较麻烦而且不容易理解。）</p>
<h2 id="complexity复杂性"><a class="markdownIt-Anchor" href="#complexity复杂性"></a> Complexity（复杂性）</h2>
<p>Is the CL more complex than it should be? Check this at every level of the CL—are individual lines too complex? Are functions too complex? Are classes too complex? “Too complex” usually means <strong>“can’t be understood quickly by code readers.”</strong> It can also mean <strong>“developers are likely to introduce bugs when they try to call or modify this code.”</strong><br />
该次代码变更是否过于复杂了？可以从不同层面去对其进行检查：某些代码行是不是太复杂了？某些函数是不是太复杂了？某些类是不是太复杂了？这里的“太复杂”的定义通常是：<strong>无法被阅读代码的人快速理解。</strong> 它也可以定义为：<strong>开发人员如果尝试调用或者修改该代码，将很容易引入bug。</strong></p>
<p>A particular type of complexity is <strong>over-engineering</strong>, where developers have made the code more generic than it needs to be, or added functionality that isn’t presently needed by the system. Reviewers should be especially vigilant about over-engineering. Encourage developers to solve the problem they know needs to be solved <em>now</em>, not the problem that the developer speculates <em>might</em><br />
need to be solved in the future. The future problem should be solved once it arrives and you can see its actual shape and requirements in the physical universe.<br />
有个比较特殊的复杂场景，那就是<strong>过度设计</strong>，意思是开发人员写的代码过于通用化了，或者为系统添加了当前不需要的功能。评审人员应该要特别警惕过度设计。鼓励开发人员解决他们<strong>当前</strong>需要解决的问题，而不是去解决那些推测未来<strong>可能</strong>需要解决的问题。只有当这些未来的问题到来了，并且能看到具体的内容及需求了，我们才应该立马去解决。</p>
<h2 id="tests测试"><a class="markdownIt-Anchor" href="#tests测试"></a> Tests（测试）</h2>
<p>Ask for unit, integration, or end-to-end<br />
tests as appropriate for the change. In general, tests should be added in the same CL as the production code unless the CL is handling an <a href="../emergencies.md">emergency</a>.<br />
检查开发人员是否已为该次代码变更做了相应的单元测试、集成测试或者端到端测试。通常情况下，测试应该被加入到变更记录里作为产品代码的一部分，除非这个变更是为了处理某次<a href="../">紧急情况</a></p>
<p>Make sure that the tests in the CL are correct, sensible, and useful. Tests do not test themselves, and we rarely write tests for our tests—a human must ensure that tests are valid.<br />
确保代码变更里的的测试是正确的，有意义的，而且是有用的。测试代码本身不会保证其自身是有效的，而且我们也不会去编写测试代码的测试代码，所以我们需要保证测试是有效的。</p>
<p>Will the tests actually fail when the code is broken? If the code changes beneath them, will they start producing false positives? Does each test make simple and useful assertions? Are the tests separated appropriately between different test methods?<br />
当生产代码发生变更时，这些测试代码是否还能运行？这些测试代码发生变更时，是否会产生误报？每个测试是否都做了简单但有用的断言（assertions）？测试案例是否恰当地分开在不同的方法里了？</p>
<p>Remember that tests are also code that has to be maintained. Don’t accept complexity in tests just because they aren’t part of the main binary.<br />
记住，测试也是必须要维护的代码，不能因为它们不属于最终的运行程序包一部分而允许测试代码写的很复杂。</p>
<h2 id="naming命名"><a class="markdownIt-Anchor" href="#naming命名"></a> Naming（命名）</h2>
<p>Did the developer pick good names for everything? A good name is long enough to fully communicate what the item is or does, without being so long that it becomes hard to read.<br />
开发人员是否为每一处需要命名的地方都选取了好的命名？一个好的命名会长度适中，充分表达该条目是什么或者是做什么的，同时也不会因为过长而变得难以阅读。</p>
<h2 id="comments注释"><a class="markdownIt-Anchor" href="#comments注释"></a> Comments（注释）</h2>
<p>Did the developer write clear comments in understandable English? Are all of the comments actually necessary? Usually comments are useful when they <strong>explain why</strong> some code exists, and should not be explaining <em>what</em> some code is doing. If the code isn’t clear enough to explain itself, then the code should be made simpler. There are some exceptions (regular expressions and complex algorithms often benefit greatly from comments that explain what they’re doing, for example) but mostly comments are for information that the code itself can’t possibly contain, like the reasoning behind a decision.<br />
开发人员是否为代码写了清晰的注释？是否所有的注释都是必须的？通常情况下，当一段注释是来<strong>解释为什么</strong>这部分代码需要存在时，那么这段注释就是有用的，而且不应该去解释这部分代码在<em>做什么</em>。如果某段代码无法足够清晰的去进行自解释，那么这段代码就应该写得更简单点。也有些例外的情况（例如，对于正则表达式和复杂的算法，如果有注释来说明这些代码在做什么，将会很有用），但多数情况下，注释是用来标注代码本身无法包含的东西，譬如代码决定这么写的原因。</p>
<p>It can also be helpful to look at comments that were there before this CL. Maybe there is a TODO that can be removed now, a comment advising against this change being made, etc.<br />
有时也可以看下代码里现有的注释。可能有个现在可以移除的TODO，有条建议不要进行此变更的注释，等等。</p>
<p>Note that comments are different from <em>documentation</em> of classes, modules, or functions, which should instead express the purpose of a piece of code, how it should be used, and how it behaves when used.<br />
注意，注释不同于类、模块或者函数的<em>文档</em>，文档应该表述某个代码片段的目的，该代码片段如何使用，以及使用该代码片段时会有什么样的行为。</p>
<h2 id="style代码规范"><a class="markdownIt-Anchor" href="#style代码规范"></a> Style（代码规范）</h2>
<p>We have <a href="http://google.github.io/styleguide/">style guides</a> at Google for all of our major languages, and even for most of the minor languages. Make sure the CL follows the appropriate style guides.<br />
在Google内部，我们为所用到的所有主流语言甚至是多数非主流语言都制定了相应的<a href="http://google.github.io/styleguide/">规范规约</a>。要确保该次代码变更遵从了恰当的代码规范规约。</p>
<p>If you want to improve some style point that isn’t in the style guide, prefix your comment with “Nit:” to let the developer know that it’s a nitpick that you think would improve the code but isn’t mandatory. Don’t block CLs from being submitted based only on personal style preferences.<br />
如果你想改善某些不在规约规范里的点，那么在留言评论时可以在前面加上“Nit：”，以此来让开发人员知道这个只是你个人认为的可以改进的地方，而不是强制性的。不能仅因为个人的规范风格喜好的原因而阻断了代码变更的提交通过。</p>
<p>The author of the CL should not include major style changes combined with other changes. It makes it hard to see what is being changed in the CL, makes merges and rollbacks more complex, and causes other problems. For example, if the author wants to reformat the whole file, have them send you just the reformatting as one CL, and then send another CL with their functional changes after that.<br />
代码变更的作者不应将主要内容为规范变更的代码与其他变更代码混合在一起。这么做会让人难以看出该次代码变更的变更内容是什么，还会使合并和回滚变得复杂，并且引发别的问题。举个例子，如果作者想格式化整个文件，那么应该把格式化作为一次变更提交，然后再将功能性的变更作为一次变更提交。</p>
<h2 id="consistency一致性"><a class="markdownIt-Anchor" href="#consistency一致性"></a> Consistency（一致性）</h2>
<p>What if the existing code is inconsistent with the style guide? Per our <a href="../51044#principles">code review principles</a>, the style guide is the absolute authority: if something is required by the style guide, the CL should follow the guidelines.<br />
如果现有的代码与规范规约不一致怎么办？根据我们的<a href="../51044#principles">代码审查原则</a>，规范规约是绝对的权威：如果是规范规约所要求的，那么代码变更就应该遵从。</p>
<p>In some cases, the style guide makes recommendations rather than declaring requirements. In these cases, it’s a judgment call whether the new code should be consistent with the recommendations or the surrounding code. Bias towards following the style guide unless the local inconsistency would be too confusing.<br />
在某些情况下，规范规约只是做出了推荐做法而不是做强制要求。在这些情况下，需要判断新代码是否要与推荐做法或者现有其它代码保持一致。如果这个不一致性争议性较强，则应该遵从规范规约。</p>
<p>If no other rule applies, the author should maintain consistency with the existing code. Either way, encourage the author to file a bug and add a TODO for cleaning up existing code.<br />
如果没有其它适用规则，那么作者应该与现有代码保持一致。无论是哪种方式，都应鼓励作者记录下问题并添加一个TODO，以此来清理现有代码。</p>
<h2 id="documentation文档"><a class="markdownIt-Anchor" href="#documentation文档"></a> Documentation（文档）</h2>
<p>If a CL changes how users build, test, interact with, or release code, check to see that it also updates associated documentation, including READMEs, g3doc pages, and any generated reference docs. If the CL deletes or deprecates code, consider whether the documentation should also be deleted. If documentation is missing, ask for it.<br />
如果某次代码变更改变了用户构建、测试、交互或者发布代码的方式，那么审查人员也要检查是否同步更新了相关的文档，包括README文档、g3doc页面（g3doc为google内部的文档管理平台）以及任何生成的参考文档。如果该次代码变更删除或者弃用了某些代码，则还要看对应的文档是否也删除了。如果缺失了文档，则应要求作者去补充。</p>
<h2 id="every-line每一行"><a class="markdownIt-Anchor" href="#every-line每一行"></a> Every Line（每一行）</h2>
<p>In the general case, look at <em>every</em> line of code that you have been assigned to review. Some things like data files, generated code, or large data structures you can scan over sometimes, but don’t scan over a human-written class, function, or block of code and assume that what’s inside of it is okay. Obviously some code deserves more careful scrutiny than other code—that’s a judgment call that you have to make—but you should at least be sure that you <em>understand</em> what all the code is doing.<br />
一般情况下，审查人员需要审查<em>每</em>一行提交上来的代码。对于诸如数据文件、自动生成的代码，或者大型的数据结构，审查人员可以另外找个时间再来进行扫视，但对于手写的类、函数或者代码块，则不能假设这里面是没问题然后只是简单的一扫而过。（对于要审查的代码）有些代码比其它代码更值得审阅，这是审查人员必须要做的判断，但是审查人员至少要确保<em>理解</em>这些代码都实现了什么功能行为。</p>
<p>If it’s too hard for you to read the code and this is slowing down the review, then you should let the developer know that and wait for them to clarify it before you try to review it. At Google, we hire great software engineers, and you are one of them. If you can’t understand the code, it’s very likely that other developers won’t either. So you’re also helping future developers understand this code, when you ask the developer to clarify it.<br />
审查人员在审查过程中如果发觉阅读这些代码很困难，并且使得审查进度慢了下来，那么审查人员应该让开发人员知道这点，等开发人员解释说明清楚后再去审查。在Google，我们雇佣了很多很棒的软件工程师，而审查人员也是他们中的一员。如果审查人员无法理解某段代码，那么其他的工程师也很可能无法理解。所以，当审查人员在让开发人员解释说明某段代码时，也是在帮助以后的开发人员理解这段代码。</p>
<p>If you understand the code but you don’t feel qualified to do some part of the review, <a href="#exceptions-every-line-exceptions">make sure there is a reviewer</a> on the CL who is qualified, particularly for complex issues such as privacy, security, concurrency, accessibility, internationalization, etc.<br />
如果你理解该部分代码但是又觉得好像不够资格来去做这部分代码审查，那么要确保能有个足够资格的人来去审核它，尤其是面对诸如隐私，安全，并发，可访问性，国际化等复杂问题时。</p>
<h3 id="exceptions例外情况"><a class="markdownIt-Anchor" href="#exceptions例外情况"></a> Exceptions（例外情况）</h3>
<p>What if it doesn’t make sense for you to review every line? For example, you are one of multiple reviewers on a CL and may be asked:<br />
如果审查每一行对你来说没有意义怎么办？例如，你是评审人之一然后可能会被要求：</p>
<ul>
<li>To review only certain files that are part of a larger change.</li>
<li>对于某次大的变更提交，你只需审查某些指定的文件。</li>
<li>To review only certain aspects of the CL, such as the high-level design, privacy or security implications, etc.</li>
<li>只需审查该次变更提交的某些层面，例如高层次的设计，隐私或者安全影响等。</li>
</ul>
<p>In these cases, note in a comment which parts you reviewed. Prefer giving <a href="speed.md#lgtm-with-comments">LGTM with comments</a>.<br />
在这些场景下，在评论里标注你审核了哪些内容。建议可以在评论里给一个“LGTM”（Look Good To Me的缩写，对应到Gerrit就是+1）。</p>
<p>If you instead wish to grant LGTM after confirming that other reviewers have reviewed other parts of the CL, note this explicitly in a comment to set expectations. Aim to <a href="speed.md#responses">respond quickly</a> once the CL has reached the desired state.<br />
如果在确认其他审查人员已经审查了其它部分的情况下，你仍然希望给一个LGTM，那么请在评论里明确写下你的期望建议。目的是为了当有代码变更提交上来时，能做到快速响应。</p>
<h2 id="context上下文"><a class="markdownIt-Anchor" href="#context上下文"></a> Context（上下文）</h2>
<p>It is often helpful to look at the CL in a broad context. Usually the code review tool will only show you a few lines of code around the parts that are being changed. Sometimes you have to look at the whole file to be sure that the change actually makes sense. For example, you might see only four new lines being added, but when you look at the whole file, you see those four lines are in a 50-line method that now really needs to be broken up into smaller methods.<br />
看一下当前代码变更的上下文对于代码审查会很有帮助。通常情况下，代码审查工具只会展示变更了的那几行代码。有时你需要看下整个文件来确保该次变更是有意义的。例如，在看上下文之前，你可能会觉得就只是加了4行新代码而已，但如果你看下整个文件，你会发现这4行代码是包含在一个50行代码的函数里的，这时候这个函数就必须分割成几个更小的函数了。</p>
<p>It’s also useful to think about the CL in the context of the system as a whole. Is this CL improving the code health of the system or is it making the whole system more complex, less tested, etc.? <strong>Don’t accept CLs that degrade the code health of the system.</strong> Most systems become complex through many small changes that add up, so it’s important to prevent even small complexities in new changes.<br />
基于整个系统上下文来去审查代码也是很有用的。该次代码变更是否提高了系统代码质量？还是说使得整个系统变得更复杂了，测试覆盖率变低了？<strong>不能让降低了系统代码质量的代码提交通过。</strong> 大多数系统都是随着变更的不断提交而变得复杂起来，所以我们应该在每一个新的提交里都去防止哪怕很小的复杂性的出现，这一点是很重要的。</p>
<h2 id="good-things好的地方"><a class="markdownIt-Anchor" href="#good-things好的地方"></a> Good Things（好的地方）</h2>
<p>If you see something nice in the CL, tell the developer, especially when they addressed one of your comments in a great way. Code reviews often just focus on mistakes, but they should offer encouragement and appreciation for good practices, as well. It’s sometimes even more valuable, in terms of mentoring, to tell a developer what they did right than to tell them what they did wrong.<br />
如果你在变更集里看到了好的实践，那么请告诉相应的开发人员，特别是当他们针对你的评注以不错的方式进行了处理。代码评审通常会专注于错误的提出，但同时也应该鼓励赞美好的实践。有时告诉开发人员做对了什么比告诉他们做错了什么更有指导意义。</p>
<h2 id="summary总结"><a class="markdownIt-Anchor" href="#summary总结"></a> Summary（总结）</h2>
<p>In doing a code review, you should make sure that:</p>
<ul>
<li>The code is well-designed.</li>
<li>The functionality is good for the users of the code.</li>
<li>Any UI changes are sensible and look good.</li>
<li>Any parallel programming is done safely.</li>
<li>The code isn’t more complex than it needs to be.</li>
<li>The developer isn’t implementing things they <em>might</em> need in the future but don’t know they need now.</li>
<li>Code has appropriate unit tests.</li>
<li>Tests are well-designed.</li>
<li>The developer used clear names for everything.</li>
<li>Comments are clear and useful, and mostly explain <em>why</em> instead of <em>what</em>.</li>
<li>Code is appropriately documented (generally in g3doc).</li>
<li>The code conforms to our style guides.</li>
</ul>
<p>在做代码审查时，应该审查以下几点：</p>
<ul>
<li>代码是设计良好的。</li>
<li>用户（包括终端用户和使用这部分代码的开发人员）是可以放心使用这部分功能的。</li>
<li>任何UI上的改动都是有意义的并且看起来还不错。</li>
<li>所有的多线程编程都应该是安全的。</li>
<li>代码已经足够简洁。</li>
<li>不会过度设计，不会实现还用不到的功能。</li>
<li>代码里包含着恰当的单元测试。</li>
<li>测试代码也是设计良好的。</li>
<li>代码里所有用到的命名都做到了见名知意。</li>
<li>注释是清晰而且有用的，同时主要是解释了“为什么”而不是“什么”。</li>
<li>代码有恰当的文档。</li>
<li>代码符合我们的开发规范。</li>
</ul>
<p>Make sure to review <strong>every line</strong> of code you’ve been asked to review, look at the <strong>context</strong>, make sure you’re <strong>improving code health</strong>, and compliment developers on <strong>good things</strong> that they do.<br />
当你被指定去审核代码时，要切实审查了每一行代码，看看<strong>上下文</strong>，确保你是在帮助<strong>提高代码质量</strong>，同时对于开发人员做得好的地方，还要对其进行表扬。</p>
<p>Next: <a href="navigate.md">Navigating a CL in Review</a></p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Google代码评审规约</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>2、如何进行代码审查</title>
    <url>/posts/41083/</url>
    <content><![CDATA[<h1 id="如何进行代码审查"><a class="markdownIt-Anchor" href="#如何进行代码审查"></a> 如何进行代码审查</h1>
<p>The pages in this section contain recommendations on the best way to do code reviews, based on long experience. All together they represent one complete document, broken up into many separate sections. You don’t have to read them all, but many people have found it very helpful to themselves and their team to read the entire set.</p>
<p>本文档包含了关于代码审查最佳实践的一些建议，这些建议都是基于长期实践总结出来的。我们将在不同的章节对它们进行阐述。你无需全部阅读它们，但很多人发现读完整个文档对他们自己或者团队都非常有帮助。</p>
<span id="more"></span>
<ul>
<li>
<p><a href="../51044">The Standard of Code Review</a></p>
</li>
<li>
<p><a href="../16518">What to Look For In a Code Review</a></p>
</li>
<li>
<p>Navigating a CL in Review</p>
</li>
<li>
<p>Speed of Code Reviews</p>
</li>
<li>
<p><a href="../12266">How to Write Code Review Comments</a></p>
</li>
<li>
<p><a href="../45937">Handling Pushback in Code Reviews</a></p>
</li>
<li>
<p><a href="../51044">代码审查的标准</a></p>
</li>
<li>
<p><a href="../16518">代码审查要做什么</a></p>
</li>
<li>
<p>在审查里定向变更记录</p>
</li>
<li>
<p>代码审查的速度</p>
</li>
<li>
<p><a href="../12266">如何编写代码审查评论</a></p>
</li>
<li>
<p><a href="../45937">处理代码评审过程产生的抵触问题</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Google代码评审规约</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>1、代码评审开发者指南</title>
    <url>/posts/35152/</url>
    <content><![CDATA[<h2 id="introduction介绍"><a class="markdownIt-Anchor" href="#introduction介绍"></a> Introduction（介绍）</h2>
<p>A code review is a process where someone other than the author(s) of a piece of code examines that code.<br />
所谓的代码审查（code review）就是指让别人来审查自己的代码的过程。</p>
<p>At Google, we use code review to maintain the quality of our code and products.<br />
在Google内部，我们会通过代码审查来保证代码和产品的质量。</p>
<p>This documentation is the canonical description of Google’s code review processes and policies.<br />
本文档详述了Google是如何进行代码审查的以及所采用的策略。</p>
<span id="more"></span>
<p>This page is an overview of our code review process. There are two other large documents that are a part of this guide:</p>
<ul>
<li><strong><a href="../41083">How To Do A Code Review</a>:</strong> A detailed guide for code reviewers.</li>
<li><strong>The CL Author’s Guide:</strong> A detailed guide for developers whose CLs are going through review.</li>
</ul>
<p>本页内容大体介绍了下代码审查的过程是怎样的。代码审查指南包含了两大部分：</p>
<ul>
<li><strong><a href="../41083">如何进行代码审查</a>：</strong> 详述了代码评审人应该如何进行代码审查。</li>
<li><strong>变更列表作者指南：</strong> 详述了提交待审核变更列表的开发人员应该如何做。</li>
</ul>
<h2 id="what-do-code-reviewers-look-for代码审查应该关注哪些内容"><a class="markdownIt-Anchor" href="#what-do-code-reviewers-look-for代码审查应该关注哪些内容"></a> What Do Code Reviewers Look For?（代码审查应该关注哪些内容？）</h2>
<p>Code reviews should look at:</p>
<ul>
<li><strong>Design:</strong> Is the code well-designed and appropriate for your system?</li>
<li><strong>Functionality:</strong> Does the code behave as the author likely intended? Is the way the code behaves good for its users?</li>
<li><strong>Complexity:</strong> Could the code be made simpler? Would another developer be able to easily understand and use this code when they come across it in the future?</li>
<li><strong>Tests:</strong> Does the code have correct and well-designed automated tests?</li>
<li><strong>Naming:</strong> Did the developer choose clear names for variables, classes, methods, etc.?</li>
<li><strong>Comments:</strong> Are the comments clear and useful?</li>
<li><strong>Style:</strong> Does the code follow our <a href="http://google.github.io/styleguide/">style guides</a>?</li>
<li><strong>Documentation:</strong> Did the developer also update relevant documentation?</li>
</ul>
<p>代码审查内容应该关注以下几点：</p>
<ul>
<li><strong>设计：</strong> 代码是否设计良好且对于系统而言是否适合？</li>
<li><strong>功能：</strong> 代码实现的行为是否达到了作者想要的效果？代码实现的行为对于用户是否友好？</li>
<li><strong>复杂性：</strong> 代码能否写得更简单点吗？是否能让别的开发人员易于理解而且易于使用？</li>
<li><strong>测试：</strong> 代码是否包含了正确的，设计良好的自动化测试？</li>
<li><strong>命名：</strong> 开发人员是否为变量、类、方法等选取了清晰的名字？</li>
<li><strong>注释：</strong> 注释是否含义清晰并且有用？</li>
<li><strong>代码规范：</strong> 代码是否遵循了<a href="http://google.github.io/styleguide/">归约规范</a>？</li>
<li><strong>文档：</strong> 开发人员是否同步更新了相关文档？</li>
</ul>
<p>See <a href="../41083">How To Do A Code Review</a> for more information.<br />
具体内容详见<a href="../41083">《如何进行代码审查》</a>。</p>
<h3 id="picking-the-best-reviewers挑选最好的评审人"><a class="markdownIt-Anchor" href="#picking-the-best-reviewers挑选最好的评审人"></a> Picking the Best Reviewers（挑选最好的评审人）</h3>
<p>In general, you want to find the <em>best</em> reviewers you can who are capable of responding to your review within a reasonable period of time.<br />
通常情况下，你会倾向于寻找你所能找到的最好的评审人，以保证你的代码能尽快得到审查。</p>
<p>The best reviewer is the person who will be able to give you the most thorough and correct review for the piece of code you are writing. This usually means the owner(s) of the code, who may or may not be the people in the OWNERS file. Sometimes this means asking different people to review different parts of the CL.<br />
好的评审人能够给予你编写的代码较为彻底和正确的审查。这意味着，相关代码的所有者（owner）可能在所有者文件里也可能不在所有者文件里。有时可能需要让不同的人来去审查变更列表的不同部分。</p>
<p>If you find an ideal reviewer but they are not available, you should at least CC them on your change.<br />
如果你找到了理想的评审人但他们却因为某些原因无法为你审查时，你至少需要将你的变更内容抄送给他们。</p>
<h3 id="in-person-reviews-and-pair-programming面对面审查以及结对编程"><a class="markdownIt-Anchor" href="#in-person-reviews-and-pair-programming面对面审查以及结对编程"></a> In-Person Reviews (and Pair Programming)（面对面审查（以及结对编程））</h3>
<p>If you pair-programmed a piece of code with somebody who was qualified to do a good code review on it, then that code is considered reviewed.<br />
如果某部分代码你是与小伙伴结对编程写出来的，同时这个小伙伴被认为能进行合格的代码审查，那么这部分代码也可以被认为是进行过了代码审查。</p>
<p>You can also do in-person code reviews where the reviewer asks questions and the developer of the change speaks only when spoken to.<br />
你也可以采用面对面的代码审查方式，在这种方式下，评审人提出问题，被问的开发人员进行描述答复。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>Google代码评审规约</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Spring-AMQP官方教程（六）--RPC</title>
    <url>/posts/40514/</url>
    <content><![CDATA[<h1 id="remote-procedure-call-rpc远程过程调用"><a class="markdownIt-Anchor" href="#remote-procedure-call-rpc远程过程调用"></a> Remote procedure call (RPC，远程过程调用)</h1>
<p>In the second tutorial we learned how to use <em>Work Queues</em> to distribute time-consuming tasks among multiple workers.</p>
<p>在教程2里我们学习了如何使用工作队列在多个工作者之间分发耗时任务。</p>
<p>But what if we need to run a function on a remote computer and wait for the result? Well, that’s a different story. This pattern is commonly known as <em>Remote Procedure Call or RPC</em>.</p>
<p>但如果我们需要在一个远程电脑上运行一个函数并且等待运行结果的话要怎么办呢？这就变成另一个问题了。这种模式通常被称为远程过程调用（Remote Procedure Call），或者简称RPC。</p>
<p>In this tutorial we’re going to use RabbitMQ to build an RPC system: a client and a scalable RPC server. As we don’t have any time-consuming tasks that are worth distributing, we’re going to create a dummy RPC service that returns Fibonacci numbers.</p>
<p>在本节教程里，我们将用RabbitMQ来构建一个RPC系统，这个系统包括一个客户端和一个可伸缩的RPC服务端。由于我们没有什么耗时任务值得分发，所以我们准备创建一个假的RPC服务，这个服务返回斐波那契（Fibonacci）数值。</p>
<span id="more"></span>
<h3 id="client-interface客户端接口"><a class="markdownIt-Anchor" href="#client-interface客户端接口"></a> Client interface（客户端接口）</h3>
<p>To illustrate how an RPC service could be used we’re going to change the names of our profiles from “Sender” and &quot;Receiver” to “Client” and “Server”. When we call the server we will get back the fibonacci of the argument we call with.</p>
<p>为了说明RPC服务可以如何被使用，我们准备修改我们的配置组，将名称从“Sender”和“Receiver”换成“Client”和“Server”。当我们调用服务端时，我们将会获得我们传入的参数所对应的斐波那契数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">response</span> <span class="operator">=</span> (Integer) template.convertSendAndReceive</span><br><span class="line">(exchange.getName(), <span class="string">&quot;rpc&quot;</span>, start++);</span><br><span class="line">System.out.println(<span class="string">&quot; [.] Got &#x27;&quot;</span> + response + <span class="string">&quot;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="a-note-on-rpcrpc的注意点"><a class="markdownIt-Anchor" href="#a-note-on-rpcrpc的注意点"></a> A note on RPC（RPC的注意点）</h4>
<p>Although RPC is a pretty common pattern in computing, it’s often criticised. The problems arise when a programmer is not aware whether a function call is local or if it’s a slow RPC. Confusions like that result in an unpredictable system and adds unnecessary complexity to debugging. Instead of simplifying software, misused RPC can result in unmaintainable spaghetti code.</p>
<p>虽然RPC在计算领域是很常见的模式，但它通常也是受争议的。但程序员不知道一个函数调用是本地的还是慢速的RPC时就会出现一些问题。像这样的混乱会导致不可预知的系统，而且会给调试增加不必要的复杂性。不恰当地使用RPC不仅不会简化程序，还会导致代码变得很难维护。</p>
<p>Bearing that in mind, consider the following advice:</p>
<p>记住这一点，然后考虑一下几点建议：</p>
<ul>
<li>Make sure it’s obvious which function call is local and which is remote.（确保哪个函数调用是本地的，哪个是远程的。）</li>
<li>Document your system. Make the dependencies between components clear.（为你的系统做好文档。清晰化组件间的依赖。）</li>
<li>Handle error cases. How should the client react when the RPC server is down for a long time?（处理好会发生错误的场景。但RPC服务端长时间挂掉时，客户端应该做出什么反应？）</li>
</ul>
<p>When in doubt avoid RPC. If you can, you should use an asynchronous pipeline - instead of RPC-like blocking, results are asynchronously pushed to a next computation stage.</p>
<p>当你无法对这些问题无法做出明确回答时，就不要使用RPC。如果可以的话，你应该使用异步pipeline，而不是类似于阻塞的RPC。使用异步pipeline，计算结果可以异步推入到下一个计算阶段。</p>
</blockquote>
<h3 id="callback-queue回调队列"><a class="markdownIt-Anchor" href="#callback-queue回调队列"></a> Callback queue（回调队列）</h3>
<p>In general doing RPC over RabbitMQ is easy. A client sends a request message and a server replies with a response message. In order to receive a response we need to send a ‘callback’ queue address with the request. Spring-amqp’s RabbitTemplate handles the callback queue for us when we use the above ‘convertSendAndReceive()’ method. There is no need to do any other setup when using the RabbitTemplate. For a thorough explanation please see <a href="http://docs.spring.io/spring-amqp/reference/htmlsingle/#request-reply">Request/Reply Message</a>.</p>
<p>一般情况下，在RabbitMQ上实现RPC挺简单的。客户端发送请求消息然后服务端返回一个响应消息。为了接收响应消息，我们必须传送一个用于处理请求的回调队列。在我们使用“convertSendAndReceive()”方法时，Spring-amqp框架的RabbitTemplate类为我们做好了回调队列的处理工作。使用RabbitTemplate类时无需在做其它配置。若想看完整的文档，请参阅<a href="https://legacy.gitbook.com/book/jiapengcai/rabbitmq/edit#">请求/发送消息</a>。</p>
<blockquote>
<h4 id="message-properties消息属性"><a class="markdownIt-Anchor" href="#message-properties消息属性"></a> Message properties（消息属性）</h4>
<p>The AMQP 0-9-1 protocol predefines a set of 14 properties that go with a message. Most of the properties are rarely used, with the exception of the following:</p>
<p>AMQP 0-9-1协议预定义了14个消息属性。大部分的属性都很少用到，除了以下几个：</p>
<ul>
<li>deliveryMode: Marks a message as persistent (with a value of 2) or transient (any other value). You may remember this property from the second tutorial.</li>
<li>deliveryMode：将消息标记为要持久化（此时属性值为2）或者瞬态（此时属性值为2以外的其它数字）。教程2里提到过这<br />
个属性，你应该还记得。</li>
<li>contentType: Used to describe the mime-type of the encoding. For example for the often used JSON encoding it is a good practice to set this property to: application/json.</li>
<li>contentType：用来描述编码的mime类型。例如，对于常用的JSON格式，最好将这个属性值设为application/json。</li>
<li>replyTo: Commonly used to name a callback queue.</li>
<li>replayTo：通常用来命名一个回调队列。</li>
<li>correlationId: Useful to correlate RPC responses with requests.</li>
<li>correlationId：该属性用来将RPC响应与请求进行关联。</li>
</ul>
</blockquote>
<h3 id="correlation-id关联id"><a class="markdownIt-Anchor" href="#correlation-id关联id"></a> Correlation Id（关联Id）</h3>
<p>Spring-amqp allows you to focus on the message style you’re working with and hide the details of message plumbing required to support this style. For example, typically the native client would create a callback queue for every RPC request. That’s pretty inefficient so an alternative is to create a single callback queue per client.</p>
<p>Spring-amqp能让你专注于正在处理的消息类型，并隐藏了支持该类型的消息所需的消息管道的实现细节。例如，通常情况下，本地客户端会为每个RPC请求都创建一个回调队列。这种做法效率很低，所以替换方案是每个客户端只创建一个回调队列。</p>
<p>That raises a new issue, having received a response in that queue it’s not clear to which request the response belongs. That’s when the correlationId property is used. Spring-amqp automatically sets a unique value for every request. In addition it handles the details of matching the response with the correct correlationId.</p>
<p>但这会导致一个新的问题，那就是，对于从这个队列里接收的响应，我们无法知道它对应的是哪个请求。这时候，correlationId就派上用场了。spring-amqp自动帮我们为每一个请求设好了唯一的correlationId值。而且，它还帮我们做好了将响应与correlationId进行匹配的细节。</p>
<p>One reason that spring-amqp makes rpc style easier is that sometimes you may want to ignore unknown messages in the callback queue, rather than failing with an error. It’s due to a possibility of a race condition on the server side. Although unlikely, it is possible that the RPC server will die just after sending us the answer, but before sending an acknowledgment message for the request. If that happens, the restarted RPC server will process the request again. The spring-amqp client handles the duplicate responses gracefully, and the RPC should ideally be idempotent.</p>
<p>spring-amqp使得rpc模式变得简单的一个原因是，有时你可能会想忽略回调队列里的一些未知消息，而不是抛出错误。这是因为服务端可能会出现竞争的情况。有可能RPC服务端在给我们发送完响应但却还没来得及发送确认消息时，它就挂了，虽然看起来不大像会这样。如果发生了这种情况，重启RPC服务端会继续再去处理这条请求。spring-amqp客户端会优雅地处理重复的响应，这种情况下，RPC应该是完美幂等的。</p>
<h3 id="summary总结"><a class="markdownIt-Anchor" href="#summary总结"></a> Summary（总结）</h3>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-six.png" alt="image" /></p>
<p>Our RPC will work like this:</p>
<p>我们的RPC系统</p>
<p>1.The Tut6Config will setup a new DirectExchange and a client</p>
<p>在Tut6Config文件里将建立一个新的DirectExchange和一个客户端。</p>
<p>2.The client will leverage the convertSendAndReceive passing the exchange name, the routingKey, and the message.</p>
<p>客户端将使用convertSendAndReceive，并传入交换器名字，路由键和消息。</p>
<p>3.The request is sent to an rpc_queue(“tut.rpc”) queue.</p>
<p>请求被发送到用于rpc的队列里（“tut.rpc”）。</p>
<p>4.The RPC worker (aka: server) is waiting for requests on that queue. When a request appears, it performs the task and sends a message with the result back to the Client, using the queue from the replyTo field.</p>
<p>RPC工作者（也就是服务器）等待发送到队列里的请求。但一个请求出现时，它就执行任务，然后通过使用replyTo域里配置的队列将带有结果的消息发回给客户端。</p>
<p>5.The client waits for data on the callback queue. When a message appears, it checks the correlationId property. If it matches the value from the request it returns the response to the application. Again, this is done automagically via the RabbitTemplate.</p>
<p>客户端等待回调队列里的数据。当一条消息出现时，它会校验correlationId属性。如果属性值与请求匹配，它就将响应返回给应用。这个工作RabbitTemplate自动帮我们完成了。</p>
<h2 id="putting-it-all-together代码整合"><a class="markdownIt-Anchor" href="#putting-it-all-together代码整合"></a> Putting it all together（代码整合）</h2>
<p>The Fibonacci task is a @RabbitListener and is defined as:</p>
<p>计算斐波那契的任务用@RabbitListener进行标注，任务内容的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="type">return</span> <span class="variable">n</span> <span class="operator">=</span>= <span class="number">0</span> ? <span class="number">0</span> : n == <span class="number">1</span> ? <span class="number">1</span> : (fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We declare our fibonacci function. It assumes only valid positive integer input. (Don’t expect this one to work for big numbers, and it’s probably the slowest recursive implementation possible).</p>
<p>我们声明了斐波那契函数。它假定输入的参数是有效的正整数。（不要期望它能用于大数的场景，而且这种方式是最低效的递归实现）。</p>
<p>The code for our <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut6/Tut6Config.java">Tut6Config</a> looks like this:</p>
<p><a href="https://legacy.gitbook.com/book/jiapengcai/rabbitmq/edit#">Tut6Config</a>的代码看起来是如下这样子的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;tut6&quot;,&quot;rpc&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut6Config</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Profile(&quot;client&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClientConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> DirectExchange <span class="title function_">exchange</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;tut.rpc&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut6Client <span class="title function_">client</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut6Client</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;server&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;tut.rpc.requests&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> DirectExchange <span class="title function_">exchange</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;tut.rpc&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(DirectExchange exchange, Queue queue)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;rpc&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut6Server <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut6Server</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It setups up our profiles as “tut6” or “rpc”. It also setups a “client” profile with two beans; 1) the DirectExchange we are using and 2) the Tut6Client itself. We also configure the “server” profile with three beans, the “tut.rpc.requests” queue, the DirectExchange, which matches the client’s exchange, and the binding from the queue to the exchange with the “rpc” routing-key.</p>
<p>它建立了我们的配置组，叫“tut6”或者“rpc”。同时，还建立了一个“client”配置组，这个组里配置了两个bean：一个是我们将要用到的DirectExchange类型的交换器，一个是Tut6Client本身。我们还建立了一个“server”配置组，这个组里配置了三个bean：一个名为“tut.rpc.requests”的队列，一个与客户端交换器相匹配的DirectExchange类型的交换器，以及用名为“rpc”的路由键将队列和交换器的绑定器。</p>
<p>The server code is rather straightforward:</p>
<p>服务端代码更直观点：</p>
<p><a href="http://1.As">1.As</a> usual we start annotating our receiver method with a @RabbitListener and defining the queue its listening on.</p>
<p>像之前那样，我们先用@RabbitListener来注解我们的接收者方法，然后定义它要监听的队列。</p>
<p>2.Our fibanacci method calls fib() with the payload parameter and returns the result.</p>
<p>我们的斐波那契方法被命名为fib()，接收有效参数并返回结果。</p>
<p>The code for our RPC server <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut6/Tut6Server.java">Tut6Server.java</a>:</p>
<p>以下为我们的RPC服务端代码<a href="https://legacy.gitbook.com/book/jiapengcai/rabbitmq/edit#">Tut6Server.java</a>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.amqp.tutorials.tut6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut6Server</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;tut.rpc.requests&quot;)</span></span><br><span class="line">	<span class="comment">// @SendTo(&quot;tut.rpc.replies&quot;) used when the</span></span><br><span class="line">	<span class="comment">// client doesn&#x27;t set replyTo.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot; [x] Received request for &quot;</span> + n);</span><br><span class="line">		<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> fib(n);</span><br><span class="line">		System.out.println(<span class="string">&quot; [.] Returned &quot;</span> + result);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">n</span> <span class="operator">=</span>= <span class="number">0</span> ? <span class="number">0</span> : n == <span class="number">1</span> ? <span class="number">1</span> : (fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The client code <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut6/Tut6Client.java">Tut6Client</a> is as easy as the server:</p>
<p>客户端代码<a href="https://legacy.gitbook.com/book/jiapengcai/rabbitmq/edit#">Tut6Client</a>与服务端代码一样简单：</p>
<p>1.We autowire the RabbitTemplate and the DirectExchange bean as defined in the Tut6Config.</p>
<p>我们自动注入Tut6Config里定义的类型为RabbitTemplate和DirectExchange的bean。</p>
<p>2.We invoke template.convertSendAndReceive with the parameters exchange name, routing key and message.</p>
<p>我们调用template.convertSendAndReceive，传入的参数为交换器名字，路由键以及消息。</p>
<p>3.We print the result.</p>
<p>打印出结果。</p>
<p>Making the Client request is simply:</p>
<p>发起客户端请求也很简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut6Client</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DirectExchange exchange;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Scheduled(fixedDelay = 1000, initialDelay = 500)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot; [x] Requesting fib(&quot;</span> + start + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">response</span> <span class="operator">=</span> (Integer) template.convertSendAndReceive(exchange.getName(), <span class="string">&quot;rpc&quot;</span>, start++);</span><br><span class="line">		System.out.println(<span class="string">&quot; [.] Got &#x27;&quot;</span> + response + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using the project setup as defined in (see tutorial one) with <a href="http://start.spring.io">start.spring.io</a> and SpringInitialzr the preparing the runtime is the same as the other tutorials:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>We can start the server with:</p>
<p>我们可以用以下命令来启动服务端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=rpc,server</span><br><span class="line">--tutorial.client.duration=6000</span><br></pre></td></tr></table></figure>
<p>To request a fibonacci number run the client:</p>
<p>若要请求斐波那契数值，可以用以下命令来启动客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=rpc,server</span><br><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=rpc,client</span><br></pre></td></tr></table></figure>
<p>The design presented here is not the only possible implementation of a RPC service, but it has some important advantages:</p>
<p>以上展示的设计不仅仅是实现RPC服务的一种方式，而且还有一些重要的优点：</p>
<p>1.If the RPC server is too slow, you can scale up by just running another one. Try running a second RPC Server in a new console.</p>
<p>如果RPC服务端太慢，你可以仅仅通过额外再运行一个服务端来增大其规模。可以尝试着在新的控制台里运行第二个RPC服务端。</p>
<p>2.On the client side, the RPC requires sending and receiving only one message with one method. No synchronous calls like queueDeclare are required. As a result the RPC client needs only one network round trip for a single RPC request.</p>
<p>在客户端这一边，RPC要求只能一个方法里发送和接收一条消息。不需要像queueDelare那样的同步调用。于是，对于一个RPC请求，RPC客户端只需一个网络回路。</p>
<p>Our code is still pretty simplistic and doesn’t try to solve more complex (but important) problems, like:</p>
<p>我们的代码仍然很简单，而且没有处理很多复杂（但重要）的问题，像：</p>
<p>1.How should the client react if there are no servers running?</p>
<p>如果没有服务端正在运行，客户端应该做出什么反应？</p>
<p>2.Should a client have some kind of timeout for the RPC?</p>
<p>客户端需要为RPC做超时处理吗？</p>
<p>3.If the server malfunctions and raises an exception, should it be forwarded to the client?</p>
<p>如果服务端出现故障并引起了异常，它是否应该告知客户端？</p>
<p>4.Protecting against invalid incoming messages (eg checking bounds, type) before processing.</p>
<p>在处理进来的消息之前先处理掉无效的消息（如校验边界，类型）。</p>
<blockquote>
<p>If you want to experiment, you may find the <a href="https://www.rabbitmq.com/management.html">management UI</a> useful for viewing the queues.</p>
<p>如果你想做些实验，可以通过<a href="https://legacy.gitbook.com/book/jiapengcai/rabbitmq/edit#">管理界面</a>来查看队列，你会发现它很有用的。</p>
</blockquote>
<p>There is one other nice feature of RabbitMQ. It is featured as a supported tile on Pivotal Cloud Foundry (PCF) as a service.</p>
<p>RabbitMQ还有另一个很棒的特性。它作为服务在Pivotal Cloud Foundry（PCF）上被支持。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>RabbitMQ Spring-AMQP官方教程</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Spring-AMQP官方教程（五）--主题</title>
    <url>/posts/2339/</url>
    <content><![CDATA[<h1 id="topics主题"><a class="markdownIt-Anchor" href="#topics主题"></a> Topics（主题）</h1>
<p>In the previous tutorial we improved our messaging flexibility. Instead of using a fanout exchange only capable of dummy broadcasting, we used a direct one, and gained a possibility of selectively receiving the message based on the routing key.</p>
<p>在上一个教程里我们改善了我们的消息队列的灵活性。我们使用直接交换器来替代只会傻傻地广播消息的广播交换器，使得根据路由键来选择性接收消息成为了可能。</p>
<p>Although using the direct exchange improved our system, it still has limitations - it can’t do routing based on multiple criteria.</p>
<p>虽然使用直接交换器改善了我们的系统，但它仍然有一些限制——它无法根据多个标准来进行路由。</p>
<span id="more"></span>
<p>In our messaging system we might want to subscribe to not only queues based on the routing key, but also based on the source which produced the message. You might know this concept from the syslog unix tool, which routes logs based on both severity (info/warn/crit…) and facility (auth/cron/kern…). Our example is a little simpler than this.</p>
<p>在我们的消息队列系统中，我们可能不仅仅想订阅基于路由键的队列，可能还想订阅基于消息源的队列。你可以通过unix工具syslog来理解这个概念，这个工具同时基于严重级别（info/warn/crit…）和组件类型（auth/cron/kern…）来路由日志。我们的例子有点类似于这个。</p>
<p>That example would give us a lot of flexibility - we may want to listen to just critical errors coming from ‘cron’ but also all logs from ‘kern’.</p>
<p>这个例子将给予我们很大便利性—我们可能想监听级别为严重错误的日志，而且这些日志来自“cron”和“kern”。</p>
<p>To implement that flexibility in our logging system we need to learn about a more complex topic exchange.</p>
<p>为了在我们的日志系统中实现这个灵活性，我们需要了解更复杂的关于主题交换器的知识。</p>
<h2 id="topic-exchange主题交换器"><a class="markdownIt-Anchor" href="#topic-exchange主题交换器"></a> Topic exchange（主题交换器）</h2>
<p>Messages sent to a topic exchange can’t have an arbitrary routing_key - it must be a list of words, delimited by dots. The words can be anything, but usually they specify some features connected to the message. A few valid routing key examples: “stock.usd.nyse”, “nyse.vmw”, “quick.orange.rabbit”. There can be as many words in the routing key as you like, up to the limit of 255 bytes.</p>
<p>发送到主题交换器的消息不能有任意的路由键——它必须是一个由点号隔开的单词组。这些单词可以是任意词语，但通常情况下它们能说明消息的特征。举几个有效的路由键的例子：“stock.usd.nyse”，“nyse.vmw”，“quick.orange.rabbit”。路由键里的单词数你想要多少个都可以，但上限是255的字节。</p>
<p>The binding key must also be in the same form. The logic behind the topic exchange is similar to a direct one - a message sent with a particular routing key will be delivered to all the queues that are bound with a matching binding key. However there are two important special cases for binding keys:</p>
<p>绑定键也必须是相同的格式。主题交换器背后的逻辑类似于直接交换器——一条带着特定路由键的消息将会被发送所有绑定着匹配的绑定键的队列。不过，绑定键由两个重要的特殊情况：</p>
<p>*(star) can substitute for exactly one word.</p>
<p>星号可以替代一个单词。</p>
<p>#(hash) can substitute for zero or more words.</p>
<p>哈希号可以替代0个或多个单词。</p>
<p>It’s easiest to explain this in an example:</p>
<p>用一个例子可以很容易地解释：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-five.png" alt="image" /></p>
<p>In this example, we’re going to send messages which all describe animals. The messages will be sent with a routing key that consists of three words (two dots). The first word in the routing key will describe speed, second a colour and third a species: “&lt;speed&gt;.&lt;colour&gt;.&lt;species&gt;”.</p>
<p>在图例中，我们将发送所有描述动物的消息。每条消息将和包含着由三个单词组成（两个点号）的路由键一起被发送。路由键中的第一个单词将描述速度，第二个单词描述颜色，第三个单词描述种类，即格式为：“&lt;speed&gt;.&lt;colour&gt;.&lt;species&gt;”。</p>
<p>We created three bindings: Q1 is bound with binding key “*.orange.*” and Q2 with “*.*.rabbit” and “lazy.#”.</p>
<p>我们建立了三个绑定：队列Q1使用绑定键“*.orange.*”，队列Q2使用“*.*.rabbit”和“lazy.#”。</p>
<p>These bindings can be summarised as:</p>
<p>这些绑定可以总结描述为：</p>
<p>Q1 is interested in all the orange animals.</p>
<p>队列Q1对所有橙色的动物感兴趣。</p>
<p>Q2 wants to hear everything about rabbits, and everything about lazy animals.</p>
<p>队列Q2想监听所有的兔子，以及所有带有懒惰属性的动物。</p>
<p>A message with a routing key set to “quick.orange.rabbit” will be delivered to both queues. Message “lazy.orange.elephant” also will go to both of them. On the other hand “quick.orange.fox” will only go to the first queue, and “lazy.brown.fox” only to the second. “lazy.pink.rabbit” will be delivered to the second queue only once, even though it matches two bindings. “quick.brown.fox” doesn’t match any binding so it will be discarded.</p>
<p>带有路由键为“quick.orange.rabbit”的消息将同时被发送给队列Q1和Q2。带有路由键为“lazy.orange.elephant”的消息也同样将被发送给这两条队列。另一方面，路由键为“quick.orange.fox”的消息将仅被发送给队列Q1，而路由键为“lazy.brown.fox”的消息将仅被发送给队列Q2。路由键为“lazy.pink.rabbit”的消息将只被发送给队列Q2一次，即使它匹配队列Q2的两个绑定。路由键“quick.brown.fox”的消息由于不匹配任何绑定，所以它将被丢弃。</p>
<p>What happens if we break our contract and send a message with one or four words, like “orange” or “quick.orange.male.rabbit”? Well, these messages won’t match any bindings and will be lost.</p>
<p>如果我们打破了约定并发送了路由键为一个或四个单词的消息，如“orange”或者“quick.orange.male.rabbit”，会发生什么现象？没事，由于这些消息不能匹配任何绑定，所以它们也将被丢弃。</p>
<p>On the other hand “lazy.orange.male.rabbit”, even though it has four words, will match the last binding and will be delivered to the second queue.</p>
<p>另一方面，虽然“lazy.orange.male.rabbit”包含了四个词，但它匹配了最后一条绑定规则，所以它将被发送给队列Q2。</p>
<blockquote>
<h4 id="topic-exchange主题交换器-2"><a class="markdownIt-Anchor" href="#topic-exchange主题交换器-2"></a> Topic exchange（主题交换器）</h4>
<p>Topic exchange is powerful and can behave like other exchanges.</p>
<p>主题交换器很强大，而且还能表现出与其它类型的交换器相同的行为。</p>
<p>When a queue is bound with “#” (hash) binding key - it will receive all the messages, regardless of the routing key - like in fanout exchange.</p>
<p>当一个队列与“#”（哈希号）绑定键绑定时，它将接收所有的消息，而不管消息的路由键是什么，此时的队列看起来就像与广播交换器绑定了一样。</p>
<p>When special characters “*” (star) and “#” (hash) aren’t used in bindings, the topic exchange will behave just like a direct one.</p>
<p>当特殊符号“*”（星号）和“#”（哈希号）没有出现在绑定键时，主题交换器就表现得跟直接交换器一样。</p>
</blockquote>
<h2 id="putting-it-all-together代码整合"><a class="markdownIt-Anchor" href="#putting-it-all-together代码整合"></a> Putting it all together（代码整合）</h2>
<p>We’re going to use a topic exchange in our messaging system. We’ll start off with a working assumption that the routing keys will take advantage of both wildcards and a hash tag.</p>
<p>我们将在我们的消息队列系统中使用主题交换器。开始之前，我们先假设路由键将会用到通配符和哈希标签。</p>
<p>The code is almost the same as in the previous tutorial.</p>
<p>代码几乎与上一个教程的代码一样。</p>
<p>First let’s configure some profiles and beans in the Tut5Config.java of the tut5 package:</p>
<p>首先，我们在tut5包目录下新建Tut5Config.java，并在这个配置类里配置好一些配置组和bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;tut5&quot;,&quot;topics&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut5Config</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> TopicExchange <span class="title function_">topic</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;tut.topic&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;receiver&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReceiverConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut5Receiver <span class="title function_">receiver</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut5Receiver</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding1a</span><span class="params">(TopicExchange topic, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(topic).with(<span class="string">&quot;*.orange.*&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding1b</span><span class="params">(TopicExchange topic, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(topic).with(<span class="string">&quot;*.*.rabbit&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding2a</span><span class="params">(TopicExchange topic, Queue autoDeleteQueue2)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(topic).with(<span class="string">&quot;lazy.#&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;sender&quot;)</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Tut5Sender <span class="title function_">sender</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut5Sender</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We setup our profiles for executing the topics as the choice of “tut5” or “topics”. We then created the bean for our TopicExchange. The “receiver” profile is the ReceiverConfig defining our receiver, two AnonymousQueues as in the previous tutorial and the bindings for the topics utilizing the topic syntax. We also create the “sender” profile as the creation of the Tut5Sender class.</p>
<p>我们将配置组的名字设置为“tut5”或“topics”，要运行主题时任选一个即可。然后我们创建了类型为TopicExchange的bean。接收者配置组为ReceiveConfig类，在其里面定义了我们的接收者，两个AnonymousQueue类型的队列（就像上一个教程那样），同时还通过主体语法为主体定义了一系列绑定。我们还创建了发送者配置组，用于创建Tut5Sender类的bean。</p>
<p>The Tut5Receiver again uses the @RabbitListener to receive messages from the respective topics.</p>
<p>Tut5Receiver类同样使用了@RabbitListener来接收相应主题的消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut5Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;#&#123;autoDeleteQueue1.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		receive(in, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;#&#123;autoDeleteQueue2.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		receive(in, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String in, <span class="type">int</span> receiver)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">		watch.start();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + receiver + <span class="string">&quot; [x] Received &#x27;&quot;</span> + in + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		doWork(in);</span><br><span class="line">		watch.stop();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + receiver + <span class="string">&quot; [x] Done in &quot;</span> + watch.getTotalTimeSeconds() + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">char</span> ch : in.toCharArray()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code for Tut5Sender.java:</p>
<p>以下为Tut5Sender.java的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut5Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TopicExchange topic;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String[] keys = &#123;<span class="string">&quot;quick.orange.rabbit&quot;</span>,</span><br><span class="line">	<span class="string">&quot;lazy.orange.elephant&quot;</span>, <span class="string">&quot;quick.orange.fox&quot;</span>,</span><br><span class="line">	<span class="string">&quot;lazy.brown.fox&quot;</span>, <span class="string">&quot;lazy.pink.rabbit&quot;</span>, <span class="string">&quot;quick.brown.fox&quot;</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Scheduled(fixedDelay = 1000, initialDelay = 500)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello to &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (++<span class="built_in">this</span>.index == keys.length) &#123;</span><br><span class="line">			<span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys[<span class="built_in">this</span>.index];</span><br><span class="line">		builder.append(key).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		builder.append(Integer.toString(++<span class="built_in">this</span>.count));</span><br><span class="line">		<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> builder.toString();</span><br><span class="line">		template.convertAndSend(topic.getName(), key, message);</span><br><span class="line">		System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile and run the examples as described in Tutorial 1 . Or if you have been following along through the tutorials you only need to do the following:</p>
<p>像教程1描述的那样去编译并运行实例代码。或者如果你是一直跟着教程学习的，那么你只需接着跟着往下做：</p>
<p>To build the project:</p>
<p>先构建项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>To execute the sender and receiver with the correct profiles execute the jar with the correct parameters:</p>
<p>接着，分别使用正确的配置组来运行发送者和接收者，运行jar包时要使用正确的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=topics,receiver</span><br><span class="line">--tutorial.client.duration=60000</span><br><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=topics,sender</span><br><span class="line">--tutorial.client.duration=60000</span><br></pre></td></tr></table></figure>
<p>The output from the sender will look something like:</p>
<p>发送者进程的输出看起来是类似于下面这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ready ... running for 60000ms</span><br><span class="line">[x] Sent &#x27;Hello to lazy.orange.elephant 1&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to quick.orange.fox 2&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to lazy.brown.fox 3&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to lazy.pink.rabbit 4&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to quick.brown.fox 5&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to quick.orange.rabbit 6&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to lazy.orange.elephant 7&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to quick.orange.fox 8&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to lazy.brown.fox 9&#x27;</span><br><span class="line">[x] Sent &#x27;Hello to lazy.pink.rabbit 10&#x27;</span><br></pre></td></tr></table></figure>
<p>And the receiver will respond with the following output:</p>
<p>然后接收者进程的响应输出如下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">instance 1 [x] Received &#x27;Hello to lazy.orange.elephant 1&#x27;</span><br><span class="line">instance 2 [x] Received &#x27;Hello to lazy.orange.elephant 1&#x27;</span><br><span class="line">instance 2 [x] Done in 2.005s</span><br><span class="line">instance 1 [x] Done in 2.005s</span><br><span class="line">instance 1 [x] Received &#x27;Hello to quick.orange.fox 2&#x27;</span><br><span class="line">instance 2 [x] Received &#x27;Hello to lazy.brown.fox 3&#x27;</span><br><span class="line">instance 1 [x] Done in 2.003s</span><br><span class="line">instance 2 [x] Done in 2.003s</span><br><span class="line">instance 1 [x] Received &#x27;Hello to lazy.pink.rabbit 4&#x27;</span><br><span class="line">instance 2 [x] Received &#x27;Hello to lazy.pink.rabbit 4&#x27;</span><br><span class="line">instance 1 [x] Done in 2.006s</span><br><span class="line">instance 2 [x] Done in 2.006s</span><br></pre></td></tr></table></figure>
<p>Have fun playing with these programs. Note that the code doesn’t make any assumption about the routing or binding keys, you may want to play with more than two routing key parameters.</p>
<p>可以多玩一玩这几个程序。注意，代码没有对路由或绑定键作任何假设，你可能需要使用两个以上的路由键参数。</p>
<p>(Full source code for <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5/Tut5Receiver.java">Tut5Receiver.java source</a> and <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5/Tut5Sender.java">Tut5Sender.java source</a>. The configuration is in <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5/Tut5Config.java">Tut5Config.java source</a>. )</p>
<p>（完整的代码请参阅<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5/Tut5Receiver.java">Tut5Receiver.java</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5/Tut5Sender.java">Tut5Sender.java</a> 。配置在<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut5/Tut5Config.java">Tut5Config.java</a>里）</p>
<p>Next, find out how to do a round trip message as a remote procedure call in tutorial 6.</p>
<p>接下来，我们将进入教程6，看看如何进行消息交互，即远程过程调用。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>RabbitMQ Spring-AMQP官方教程</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Spring-AMQP官方教程（四）--路由</title>
    <url>/posts/48556/</url>
    <content><![CDATA[<h1 id="routing路由"><a class="markdownIt-Anchor" href="#routing路由"></a> Routing（路由）</h1>
<p>In the previous tutorial we built a simple fanout exchange. We were able to broadcast messages to many receivers.</p>
<p>在上一个教程里，我们构建了一个简单的广播交换器。通过它我们能将消息广播到多个接收者。</p>
<p>In this tutorial we’re going to add a feature to it - we’re going to make it possible to subscribe only to a subset of the messages. For example, we will be able to direct only messages to the certain colors of interest (“orange”, “black”, “green”), while still being able to print all of the messages on the console.</p>
<p>在本教程里，我们将往里添加一个功能——我们准备让接收者可以只订阅部分消息。例如，我们将只要某些我们感兴趣的颜色（“橙色”，“黑色”，“绿色”）的消息，但仍能在控制台里打印出所有的信息。</p>
<span id="more"></span>
<h2 id="bindings绑定"><a class="markdownIt-Anchor" href="#bindings绑定"></a> Bindings（绑定）</h2>
<p>In previous examples we were already creating bindings. You may recall code like this in our Tut3Config file:</p>
<p>在之前的例子当中，我们创建了绑定器。通过下面的代码片段回顾下我们的Tut3Config配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">binding1</span><span class="params">(FanoutExchange fanout, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(fanout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A binding is a relationship between an exchange and a queue. This can be simply read as: the queue is interested in messages from this exchange.</p>
<p>交换器和队列是通过绑定器连结在一起的。这种关系可以读作：这个队列对这个交换器里的消息感兴趣。</p>
<p>Bindings can take an extra routingKey parameter. Spring-amqp uses a fluent API to make this relationship very clear. We pass in the exchange and queue into the BindingBuilder and simply bind the queue “to” the exchange “with a routing key” as follows:</p>
<p>可以再传一个路由键（routingKey）参数给绑定。在这点上，Spring-amqp使用了流式API，使得队列，交换器和路由键之间的关系变得很清晰。我们将某个交换器和某个队列传给BindingBuilder，将传入的队列用某个路由键绑定到传入的交换器上，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">binding1a</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(direct).with(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The meaning of a binding key depends on the exchange type. The fanout exchanges, which we used previously, simply ignored its value.</p>
<p>绑定键的含义取决与交换器的类型。我们之前使用的广播交换器就忽略了这个值。</p>
<h2 id="direct-exchange直接交换器"><a class="markdownIt-Anchor" href="#direct-exchange直接交换器"></a> Direct exchange（直接交换器）</h2>
<p>Our messaging system from the previous tutorial broadcasts all messages to all consumers. We want to extend that to allow filtering messages based on their color type. For example, we may want a program which writes log messages to the disk to only receive critical errors, and not waste disk space on warning or info log messages.</p>
<p>在上一个教程里，我们的消息队列系统将所有消息广播给所有的消费者。现在我们需要让消息队列系统可以基于消息的颜色类型进行消息过滤。例如，对于一个将日志消息写入磁盘的程序，我们可能只想让它接收严重错误类型的日志消息，而不是警告或者信息级别的日志消息，从而不致于浪费磁盘空间。</p>
<p>We were using a fanout exchange, which doesn’t give us much flexibility - it’s only capable of mindless broadcasting.</p>
<p>在上一个教程里，我们用到的广播交换器不能给我们这个灵活性，因为它只会做机械广播。</p>
<p>We will use a direct exchange instead. The routing algorithm behind a direct exchange is simple - a message goes to the queues whose binding key exactly matches the routing key of the message.</p>
<p>我们将使用直连交换器来替换它。直连交换器背后的路由算法很简单——当消息被推入到某个队列时，这个队列绑定的键要与消息的路由键完全匹配。</p>
<p>To illustrate that, consider the following setup:</p>
<p>为了说明这一点，考虑下面的情况：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/direct-exchange.png" alt="image" /></p>
<p>In this setup, we can see the direct exchange X with two queues bound to it. The first queue is bound with binding key orange, and the second has two bindings, one with binding key black and the other one with green.</p>
<p>从图中我们可以看到，有两个队列绑定了直连交换器X。第一个队列绑定时用了orange键，第二个队列用了两个，一个是black键，另一个是green键。</p>
<p>In such a setup a message published to the exchange with a routing key orange will be routed to queue Q1. Messages with a routing key of black or green will go to Q2. All other messages will be discarded.</p>
<p>在这种情况下，带有orange路由键的消息被发布到交换器时，会被路由到队列Q1。带有black键或green键的消息将被推入到队列Q2。所有其它的消息将被丢弃。</p>
<h2 id="multiple-bindings多绑定"><a class="markdownIt-Anchor" href="#multiple-bindings多绑定"></a> Multiple bindings（多绑定）</h2>
<p><img src="https://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png" alt="image" /></p>
<p>It is perfectly legal to bind multiple queues with the same binding key. In our example we could add a binding between X and Q1 with binding key black. In that case, the direct exchange will behave like fanout and will broadcast the message to all the matching queues. A message with routing key black will be delivered to both Q1 and Q2.</p>
<p>多个队列用同个键绑定到同个交换器是完全合法的。在我们的例子当中，我们可以用键black在交换器X和队列Q1之间添加绑定。在这种情况下，直接交换器的行为将和广播交换器一样，将消息广播给所有匹配的队列。带有路由键black的消息将被发送给队列Q1和队列Q2。</p>
<h2 id="publishing-messages发布消息"><a class="markdownIt-Anchor" href="#publishing-messages发布消息"></a> Publishing messages（发布消息）</h2>
<p>We’ll use this model for our routing system. Instead of fanout we’ll send messages to a direct exchange. We will supply the color as a routing key. That way the receiving program will be able to select the color it wants to receive (or subscribe to). Let’s focus on sending messages first.</p>
<p>我们将在我们的路由系统中使用这种模型。我们将发送消息给直连交换器，而不是广播交换器。我们将使用颜色作为路由键。这么做的话接收者程序就可以选择它想接收（或者说订阅）的颜色。让我们先看看如何发送消息。</p>
<p>As always, we do some spring boot configuration in Tut4Config:</p>
<p>照例，我们在Tut4Config配置文件里做些spring boot配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FanoutExchange <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;tut.fanout&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And we’re ready to send a message. Colors, as in the diagram, can be one of ‘orange’, ‘black’, or ‘green’.</p>
<p>现在我们准备发送一条消息。如图所示，颜色可以是&quot;orange&quot;，“black”，或者“green”</p>
<h2 id="subscribing订阅"><a class="markdownIt-Anchor" href="#subscribing订阅"></a> Subscribing（订阅）</h2>
<p>Receiving messages will work just like in the previous tutorial, with one exception - we’re going to create a new binding for each color we’re interested in. This also goes into the Tut4Config.</p>
<p>接收消息将会像上一个教程那样，除了有一点不同——我们将为每一个我们感兴趣的颜色创建一个新的绑定器。这一点也将在Tut4Config里体现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">direct</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;tut.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">binding1a</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(direct).with(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="putting-it-all-together整合代码"><a class="markdownIt-Anchor" href="#putting-it-all-together整合代码"></a> Putting it all together（整合代码）</h2>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-four.png" alt="image" /></p>
<p>As in the previous tutorials, create a new package for this tutorial called “tut4” and create the Tut4Config class. The code for Tut4Config.java class:</p>
<p>像之前的教程那样，为本教程创建一个新的包目录“tut4”，并创建Tut4Config类。以下为TutConfig.java的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;tut4&quot;,&quot;routing&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut4Config</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> DirectExchange <span class="title function_">direct</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;tut.direct&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;receiver&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReceiverConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding1a</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(direct).with(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding1b</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(direct).with(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding2a</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue2)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(direct).with(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding2b</span><span class="params">(DirectExchange direct, Queue autoDeleteQueue2)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(direct).with(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut4Receiver <span class="title function_">receiver</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut4Receiver</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;sender&quot;)</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Tut4Sender <span class="title function_">sender</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut4Sender</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code for our sender class is:</p>
<p>我们的发送者类是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut4Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DirectExchange direct;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String[] keys = &#123;<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;green&quot;</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Scheduled(fixedDelay = 1000, initialDelay = 500)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello to &quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (++<span class="built_in">this</span>.index == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys[<span class="built_in">this</span>.index];</span><br><span class="line">		builder.append(key).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		builder.append(Integer.toString(++<span class="built_in">this</span>.count));</span><br><span class="line">		<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> builder.toString();</span><br><span class="line">		template.convertAndSend(direct.getName(), key, message);</span><br><span class="line">		System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code for Tut4Receiver.java is:</p>
<p>然后下面为Tut4Receiver.java的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut4Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;#&#123;autoDeleteQueue1.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		receive(in, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;#&#123;autoDeleteQueue2.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		receive(in, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String in, <span class="type">int</span> receiver)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">		watch.start();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + receiver + <span class="string">&quot; [x] Received &#x27;&quot;</span> + in + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		doWork(in);</span><br><span class="line">		watch.stop();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + receiver + <span class="string">&quot; [x] Done in &quot;</span> + watch.getTotalTimeSeconds() + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">char</span> ch : in.toCharArray()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile as usual (see tutorial one for maven compilation and executing the options from the jar).</p>
<p>像之前那样去编译（对于如何用maven进行编译以及如何通过参数来运行jar包，请见教程1）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>In one terminal window you can run:</p>
<p>打开一个终端窗口，运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=routing,receiver</span><br><span class="line">--tutorial.client.duration=60000</span><br></pre></td></tr></table></figure>
<p>and in the other temrinal window run the sender：</p>
<p>打开另一个终端窗口，输入以下命令来运行发送者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar</span><br><span class="line">--spring.profiles.active=routing,sender</span><br><span class="line">--tutorial.client.duration=60000</span><br></pre></td></tr></table></figure>
<p>Full source code for <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4/Tut4Receiver.java">Tut4Receiver.java source</a> and <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4/Tut4Sender.java">Tut4Sender.java source</a>. The configuration is in<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4/Tut4Config.java">Tut4Config.java source</a>.</p>
<p>完整的源代码可以参考<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4/Tut4Receiver.java">Tut4Receiver.java源码</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4/Tut4Sender.java">Tut4Sender.java源码</a>。配置类请参考<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/spring-amqp/src/main/java/org/springframework/amqp/tutorials/tut4/Tut4Config.java">Tut4Config.java源码</a></p>
<p>Move on to tutorial 5 to find out how to listen for messages based on a pattern.</p>
<p>下面开始教程5，看看如何基于主题来监听消息。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>RabbitMQ Spring-AMQP官方教程</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Spring-AMQP官方教程（三）--发布/订阅</title>
    <url>/posts/14583/</url>
    <content><![CDATA[<h1 id="publishsubscribe发布订阅"><a class="markdownIt-Anchor" href="#publishsubscribe发布订阅"></a> Publish/Subscribe（发布/订阅）</h1>
<p>In the first tutorial we showed how to use <a href="http://start.spring.io">start.spring.io</a> to leverage Spring Initializr to create a project with the RabbitMQ starter dependency for create spring-amqp applications.</p>
<p>在第一个教程中，我们展示了如何通过<a href="https://start.spring.io/">start.spring.io</a>上的Spring初始化手脚架来创建一个包含了RabbitMQ starter依赖的项目，并以此创建基于spring-amqp的应用。</p>
<p>In the previous tutorial we created a new package (tut2) to place our config, sender and receiver and created a work queue with two consumers. The assumption behind a work queue is that each task is delivered to exactly one worker.</p>
<p>在上一个教程当中，我们创建了一个新的包（tut2）来放置我们的配置类，发送者类和接收者类，并创建了一个对应着两个消费者的队列。工作队列背后的原理假设是，每个任务都发送给某个恰当的工作者。</p>
<p>In this part we’ll implement the fanout pattern to deliver a message to multiple consumers. This pattern is known as “publish/subscribe” and is implementing by configuring a number of beans in our Tut3Config file.</p>
<p>在这部分教程中，我们将实现广播模式（fanout pattern），从而将一条消息发送给多个消费者。这个模式被称为“发布/订阅”，我们将在Tut3Config文件里配置一系列bean来实现这个模式。</p>
<span id="more"></span>
<p>Essentially, published messages are going to be broadcast to all the receivers.</p>
<p>本质上，发布的消息将被广播给所有的接收者。</p>
<h2 id="exchanges交换器"><a class="markdownIt-Anchor" href="#exchanges交换器"></a> Exchanges（交换器）</h2>
<p>In previous parts of the tutorial we sent and received messages to and from a queue. Now it’s time to introduce the full messaging model in Rabbit.</p>
<p>在前面的教程里，我们通过一个队列来发送消息，并从这个队列里接收消息。接下来我们将介绍RabbitMQ完整的消息队列模型。</p>
<p>Let’s quickly go over what we covered in the previous tutorials:</p>
<p>我们先来快速过一遍前面的教程里涉及到的内容：</p>
<p>A <em>producer</em> is a user application that sends messages.</p>
<p>生产者是值发送消息的应用。</p>
<p>A <em>queue</em> is a buffer that stores messages.</p>
<p>队列是指存储消息的缓存。</p>
<p>A <em>consumer</em> is a user application that receives messages.</p>
<p>消费者是指接收消息的应用。</p>
<p>The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue. Actually, quite often the producer doesn’t even know if a message will be delivered to any queue at all.</p>
<p>RabbitMQ的消息队列模型的核心概念是：生产者从不直接往队列里发送任何消息。实际上，多数情况下生产者甚至不知道消息是否会被发送到队列里。</p>
<p>Instead, the producer can only send messages to an <em>exchange</em>. An exchange is a very simple thing. On one side it receives messages from producers and the other side it pushes them to queues. The exchange must know exactly what to do with a message it receives. Should it be appended to a particular queue? Should it be appended to many queues? Or should it get discarded. The rules for that are defined by the <em>exchange type</em>.</p>
<p>与此相反，生产者只能将消息发送到一个交换器里。交换器做的事情很简单。一方面它接收生产者发送过来的消息，另一方面它将收到的消息推入队列里。交换器必须明确对于收到的消息它该怎么处理。这条消息是否应该附加到某个特定的队列后面？这条消息是否应该附加到多个队列后面？这条消息是否应该被丢弃？这些规则都由交换器类型（exchange type）来定义。</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/exchanges.png" alt="image" /></p>
<p>There are a few exchange types available: direct, topic, headers and fanout. We’ll focus on the last one – the fanout. Let’s configure a bean to describe an exchange of this type, and call it tut.fanout:</p>
<p>有四种交换器类型可供我们选择：直连交换器（direct），主题交换器（topic），头部交换器（headers）和广播交换器（fanout）。我们将专注于最后一个——广播交换器。我们先配置一个bean来描述这种类型的交换器，并把这个交换器命名为tut.fanout：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;tut3&quot;, &quot;pub-sub&quot;, &quot;publish-subscribe&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut3Config</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> FanoutExchange <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;tut.fanout&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;receiver&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReceiverConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding1</span><span class="params">(FanoutExchange fanout, Queue autoDeleteQueue1)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(fanout);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Binding <span class="title function_">binding2</span><span class="params">(FanoutExchange fanout, Queue autoDeleteQueue2)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue2).to(fanout);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut3Receiver <span class="title function_">receiver</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut3Receiver</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;sender&quot;)</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Tut3Sender <span class="title function_">sender</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut3Sender</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We ollow the same approach as in the previous two tutorials. We create three profiles, the tutorial (“tut3”, “pub-sub”, or “publish-subscribe”). They are all synonyms for running the fanout profile tutorial. Next we configure the FanoutExchange as a bean. Within the “receiver” (Tut3Receiver) file we define four beans: two autoDeleteQueues or AnonymousQueues and two bindings to bind those queues to the exchange.</p>
<p>我们采用了与前面两个教程相同的方式。我们创建了三个配置组，“tut3”，“pub-sub”，或者叫“publish-subscribe”。这三个配置在运行本教程时都是等效的。接下来我们会配置一个类型为FanoutExchange的bean。在“receiver”配置组里，我们定义了四个bean：两个AnonymousQueue类型的队列，即autoDeleteQueue1和autoDeleteQueue2，及两个将队列绑定到交换器的绑定器（binding）。</p>
<p>The fanout exchange is very simple. As you can probably guess from the name, it just broadcasts all the messages it receives to all the queues it knows. And that’s exactly what we need for fanning out our messages.</p>
<p>广播交换器很简单。你大概可以从名字上看出，它只是将所有它接收到的消息广播给它所知道的所有队列。广播消息这一点正是我们需要的。</p>
<blockquote>
<h4 id="listing-exchanges列出所有的交换器"><a class="markdownIt-Anchor" href="#listing-exchanges列出所有的交换器"></a> Listing exchanges（列出所有的交换器）</h4>
<p>To list the exchanges on the server you can run the ever useful rabbitmqctl:</p>
<p>你可以通过运行强大的rabbitmqctl来列出服务器上所有的交换器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl list_exchanges</span><br></pre></td></tr></table></figure>
<p>In this list there will be some amq.* exchanges and the default (unnamed) exchange. These are created by default, but it is unlikely you’ll need to use them at the moment.</p>
<p>在这个列表里，会出现一些类似于amq.开头的交换器，以及默认的（未命名）交换器。这些交换器都默认被创建，但这时你不一定会用到它们。</p>
<h4 id="nameless-exchange匿名交换器"><a class="markdownIt-Anchor" href="#nameless-exchange匿名交换器"></a> Nameless exchange（匿名交换器）</h4>
<p>In previous parts of the tutorial we knew nothing about exchanges, but still were able to send messages to queues. That was possible because we were using a default exchange, which we identify by the empty string (“”).</p>
<p>在前面的教程里，我们虽然对交换器一无所知，但依旧能够将消息发送到队列里。之所以能这样是因为我们使用了一个默认的交换器，而这个默认的交换器则用空字符串（“”）来标识。</p>
<p>Recall how we published a message before:</p>
<p>回顾一下我们之前是如何发布消息的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template.convertAndSend(fanout.getName(), &quot;&quot;, message);</span><br></pre></td></tr></table></figure>
<p>The first parameter is the the name of the exchange that was autowired into the sender. The empty string denotes the default or <em>nameless</em> exchange: messages are routed to the queue with the name specified by routingKey, if it exists.</p>
<p>第一个参数是被自动注入到发送者类的交换器的名字。空字符串表示该交换器是默认或者匿名的：如果路由键存在的话，消息则通过这个路由键名被路由到某个队列里：</p>
</blockquote>
<p>Now, we can publish to our named exchange instead:</p>
<p>现在，我们可以将信息发布到我们命名好的交换器里：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FanoutExchange fanout; <span class="comment">// configured in Tut3Config above</span></span><br><span class="line"></span><br><span class="line">template.convertAndSend(fanout.getName(), <span class="string">&quot;&quot;</span>, message);</span><br></pre></td></tr></table></figure>
<p>From now on the fanout exchange will append messages to our queue.</p>
<p>从现在开始，广播交换器将会把信息附加到我们的队列里。</p>
<h2 id="temporary-queues临时队列"><a class="markdownIt-Anchor" href="#temporary-queues临时队列"></a> Temporary queues（临时队列）</h2>
<p>As you may remember previously we were using queues which had a specified name (remember hello). Being able to name a queue was crucial for us – we needed to point the workers to the same queue. Giving a queue a name is important when you want to share the queue between producers and consumers.</p>
<p>就如你记住的那样，之前我们都是使用具有指定名字的队列（前面的教程里用的是hello）。命名一个队列对于我们是至关重要的——我们需要将工作者指到相同的队列上去。当你想要在生产者和消费者之间共享队列时，为队列指定一个名字是很重要的。</p>
<p>But that’s not the case for our fanout example. We want to hear about all messages, not just a subset of them. We’re also interested only in currently flowing messages not in the old ones. To solve that we need two things.</p>
<p>但在我们在用广播交换器时则不用这么做。我们需要收到所有的消息，而不仅仅是部分。我们也只关心当前的消息，而不是旧的那一部分。为了解决这些需求，我们需要做两件事。</p>
<p>Firstly, whenever we connect to Rabbit we need a fresh, empty queue. To do this we could create a queue with a random name, or, even better - let the server choose a random queue name for us.</p>
<p>首先，无论什么时候连接RabbitMQ，我们都需要一个新的而且是空的队列。为了做到这点，我们可以创建一个名字随机的队列，或者更好的做法是，让服务器为我们选一个随机的队列。</p>
<p>Secondly, once we disconnect the consumer the queue should be automatically deleted. To do this with the spring-amqp client, we defined an <em>AnonymousQueue</em>, which creates a non-durable, exclusive, autodelete queue with a generated name:</p>
<p>然后，一旦我们断开了消费者，队列应该被自动删除。我们可以通过spring-amqp客户端来做到这点，在配置里我们定义了一个AnonymousQueue类型的队列，它的名字是由客户端生成的，而且是非持久的，独占的，自动删除的队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">autoDeleteQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnonymousQueue</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>At this point our queue names contain a random queue names. For example it may look like amq.gen-JzTY20BRgKO-HjmUJj0wLg.</p>
<p>此时我们的队列名字是随机的。例如，队列名字可能看起来是这样的：amq.gen-JzTY20BRgKO-HjmUJj0wLg。</p>
<h2 id="bindings绑定器"><a class="markdownIt-Anchor" href="#bindings绑定器"></a> Bindings（绑定器）</h2>
<p><img src="https://www.rabbitmq.com/img/tutorials/bindings.png" alt="image" /></p>
<p>We’ve already created a fanout exchange and a queue. Now we need to tell the exchange to send messages to our queue. That relationship between exchange and a queue is called a <em>binding</em>. In the above Tut3Config you can see that we have two bindings, one for each AnonymousQueue.</p>
<p>我们已经创建了一个广播交换器和一个队列。现在我们需要让交换器将消息发送到我们的队列里。用于连接交换器和队列的对象被称为绑定器（binding）。在上面的Tut3Config里，你会发现我们配置了两个绑定器，分别对应一个AnonymousQueue。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">binding1</span><span class="params">(FanoutExchange fanout, Queue autoDeleteQueue1)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> BindingBuilder.bind(autoDeleteQueue1).to(fanout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="listing-bindings列出所有的绑定"><a class="markdownIt-Anchor" href="#listing-bindings列出所有的绑定"></a> Listing bindings（列出所有的绑定）</h4>
<p>You can list existing bindings using, you guessed it,</p>
<p>你可以通过使用某个命令来列出所有的绑定，猜是哪个，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_bindings</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="putting-it-all-together代码整合"><a class="markdownIt-Anchor" href="#putting-it-all-together代码整合"></a> Putting it all together（代码整合）</h2>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-three-overall.png" alt="image" /></p>
<p>The producer program, which emits messages, doesn’t look much different from the previous tutorial. The most important change is that we now want to publish messages to our fanout exchange instead of the nameless one. We need to supply a routingKey when sending, but its value is ignored for fanout exchanges. Here goes the code for tut3.Sender.java program:</p>
<p>本教程里用于生产消息的生产者程序看起来与前面教程里的生产者程序没什么区别。最大的变化是我们现在想把消息发布到广播交换器里去，而不是匿名交换器。发送消息时我们需要用到路由键（routingKey），但对于广播交换器，它的值是被忽略的。以下是本教程的发送者类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut3Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> FanoutExchange fanout;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">dots</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Scheduled(fixedDelay = 1000, initialDelay = 500)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (dots++ == <span class="number">3</span>) &#123;</span><br><span class="line">			dots = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dots; i++) &#123;</span><br><span class="line">			builder.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		builder.append(Integer.toString(++count));</span><br><span class="line">		<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> builder.toString();</span><br><span class="line">		template.convertAndSend(fanout.getName(), <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">		System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you see, we leverage the beans from the Tut3Config file and autowire in the RabbitTemplate along with our configured FanoutExchange. This step is necessary as publishing to a non-existing exchange is forbidden.</p>
<p>就如你所看到的那样，我们利用Tut3Config文件里配置好的bean，并自动注入RabbitTemplate和FanoutExchange。这一步是很有必要的，因为发布消息到不存在的交换器是不允许的。</p>
<p>The messages will be lost if no queue is bound to the exchange yet, but that’s okay for us; if no consumer is listening yet we can safely discard the message.</p>
<p>如果没有队列绑定到交换器，那么消息将会丢失，但这对于我们来说是可接受的；如果没有消费者在监听队列，那么即使消息丢失也是安全的。</p>
<p>The code forTut3Receiver.java:</p>
<p>以下是发送者类的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut3Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;#&#123;autoDeleteQueue1.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		receive(in, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitListener(queues = &quot;#&#123;autoDeleteQueue2.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		receive(in, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String in, <span class="type">int</span> receiver)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">		watch.start();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + receiver + <span class="string">&quot; [x] Received &#x27;&quot;</span> + in + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		doWork(in);</span><br><span class="line">		watch.stop();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + receiver + <span class="string">&quot; [x] Done in &quot;</span> + watch.getTotalTimeSeconds() + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">char</span> ch : in.toCharArray()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile as before and we’re ready to execute the fanout sender and receiver.</p>
<p>像之前那样编译，我们已经准备好要运行基于广播的发送者程序和接收者程序了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>And of course, to execute the tutorial do the following:</p>
<p>当然，若要运行示例代码，我们还要执行以下命令行语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar --spring.profiles.active=pub-sub,receiver</span><br><span class="line">--tutorial.client.duration=60000</span><br><span class="line">java -jar target/rabbit-tutorials-1.7.1.RELEASE.jar --spring.profiles.active=pub-sub,sender</span><br><span class="line">--tutorial.client.duration=60000</span><br></pre></td></tr></table></figure>
<p>Using rabbitmqctl list_bindings you can verify that the code actually creates bindings and queues as we want. With two ReceiveLogs.java programs running you should see something like:</p>
<p>使用rabbitmqctl list_bindings语句你可以验证上述代码的确按照我们所想的创建了绑定和队列。执行语句后你会看到类似于如下的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl list_bindings</span><br><span class="line">tut.fanout exchange 8b289c9c-a1eb-4a3a-b6a9-163c4fdcb6c2 queue []</span><br><span class="line">tut.fanout exchange d7e7d193-65b1-4128-a532-466a5256fd31 queue []</span><br></pre></td></tr></table></figure>
<p>The interpretation of the result is straightforward: data from exchange logs goes to two queues with server-assigned names. And that’s exactly what we intended.</p>
<p>打印结果的意思很明显：从交换器过来的消息进入了两个由服务器命名的队列。这正是我们想要的结果。</p>
<p>To find out how to listen for a subset of messages, let’s move on to tutorial 4.</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>RabbitMQ Spring-AMQP官方教程</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Spring-AMQP官方教程（二）--工作队列</title>
    <url>/posts/13955/</url>
    <content><![CDATA[<h1 id="2-工作队列work-queues"><a class="markdownIt-Anchor" href="#2-工作队列work-queues"></a> 2 工作队列（Work Queues）</h1>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="image" /></p>
<p>In the first tutorial we wrote programs to send and receive messages from a named queue. In this one we’ll create a <em>Work</em> <em>Queue</em> that will be used to distribute time-consuming tasks among multiple workers.</p>
<p>在第一个教程中，我们编写了两个程序，一个用于往一个命名了的队列发送消息，另一个从这个队列里接收消息。在本教程里，我们将创建一个工作队列（Work Queue），它将被用来在多个工作者之间分发耗时任务。</p>
<span id="more"></span>
<p>The main idea behind Work Queues (aka: <em>Task Queues</em>) is to avoid doing a resource-intensive task immediately and having to wait for it to complete. Instead we schedule the task to be done later. We encapsulate a <em>task</em> as a message and send it to a queue. A worker process running in the background will pop the tasks and eventually execute the job. When you run many workers the tasks will be shared between them.</p>
<p>工作队列（也叫做任务队列）背后的主要目的是为了避免立即执行资源密集型的任务以及避免必须等待任务完成的情况，相反，它计划着让这些任务可以留到后面去执行。我们将任务分装成消息，并将它发送到队列里。运行在后台的工作进程将取出任务并最终执行它。如果你运行了多个工作进程，那么所有的任务将被它们共享。</p>
<p>This concept is especially useful in web applications where it’s impossible to handle a complex task during a short HTTP request window.</p>
<p>对于web应用，这个概念特别有用，因为web应用无法在短短的HTTP请求窗口内处理复杂的任务。</p>
<h3 id="preparation准备工作"><a class="markdownIt-Anchor" href="#preparation准备工作"></a> Preparation（准备工作）</h3>
<p>In the previous part of this tutorial we sent a message containing “Hello World!”. Now we’ll be sending strings that stand for complex tasks. We don’t have a real-world task, like images to be resized or pdf files to be rendered, so let’s fake it by just pretending we’re busy - by using the Thread.sleep() function. We’ll take the number of dots in the string as its complexity; every dot will account for one second of “work”. For example, a fake task described by Hello… will take three seconds.</p>
<p>在教程1里，我们实现了如何发送包含“Hello World!”的消息。现在，我们将发送表示复杂任务的字符串。由于我们没有真实的任务，如调整图片大小或者渲染pdf文件，所以我们通过使用Thread.sleep()函数来模拟繁忙的耗时任务。我们将在字符串中用点号的个数来表示复杂度，点号的个数表示整个任务执行秒的秒数。例如，Hello…表示模拟任务需要执行三秒。</p>
<p>Please see the setup in first tutorial if you have not setup the project. We will follow the same pattern as in the first tutorial: create a package (tut2) and create a Tut2Config, Tut2Receiver, and Tut2Sender. Start by creating a new package (tut2) where we’ll place our three classes. In the configuration class we setup two profiles, the label for the tutorial (“tut2”) and the name of the pattern (“work-queues”). We leverage spring to expose the queue as a bean. We setup the receiver as a profile and define two beans to correspond to the workers in our diagram above： receiver1 and receiver2. Finally, we define a profile for the sender and define the sender bean. The configuration is now done.</p>
<p>如果你还未建立配置好项目，请见教程1的配置过程。我们将采用与教程1相同的方式，新建一个包目录（tut2）并创建一个名为Tut2Config的配置类，一个名为Tut2Receiver的消息接收类，以及一个名为Tut2Sender的消息发送类。首先新建包目录（tut2），我们将在这个包下面放刚说到的那三个类。在配置类里，我们将配置两个配置组，一个作为当前教程的标签（“tut2”），一个作为当前RabbitMQ使用模式的名字（“work-queue”）。我们利用Spring框架将队列暴露为一个bean。我们设置一个接受者配置组，并定义两个bean来对应于上面图中的两个消费者：receiver1和receiver2。最后，我们会定义一个发送者配置组，并定义作为发送者的bean。这样配置就结束了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;tut2&quot;, &quot;work-queues&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut2Config</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Queue <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Profile(&quot;receiver&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReceiverConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut2Receiver <span class="title function_">receiver1</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut2Receiver</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> Tut2Receiver <span class="title function_">receiver2</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut2Receiver</span>(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Profile(&quot;sender&quot;)</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Tut2Sender <span class="title function_">sender</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut2Sender</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sender发送者"><a class="markdownIt-Anchor" href="#sender发送者"></a> Sender（发送者）</h3>
<p>We will modify the sender to provide a means for identifying whether its a longer running task by appending a dot to the message in a very contrived fashion using the same method on the RabbitTemplate to publish the message, convertAndSend. The documentation defines this as, “Convert a Java object to an Amqp Message and send it to a default exchange with a default routing key.”</p>
<p>我们将对发送者类进行修改，在发送方法中，通过人为地在消息后面添加点号来识别当前任务是否耗时，并依旧使用RabbitTemplate的convertAndSend方法来发布消息。文档把convertAndSend方法定义为，“将一个Java对象转换成一个Amqp消息，并用一个默认路由键（routing key）将其发送到一个默认的exchange里。”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut2Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Queue queue;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">dots</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Scheduled(fixedDelay = 1000, initialDelay = 500)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (dots++ == <span class="number">3</span>) &#123;</span><br><span class="line">			dots = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dots; i++) &#123;</span><br><span class="line">			builder.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		builder.append(Integer.toString(++count));</span><br><span class="line">		<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> builder.toString();</span><br><span class="line">		template.convertAndSend(queue.getName(), message);</span><br><span class="line">		System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="receiver接收者"><a class="markdownIt-Anchor" href="#receiver接收者"></a> Receiver（接收者）</h3>
<p>Our receiver, Tut2Receiver, simulates an arbitary length for a fake task in the doWork() method where the number of dots translates into the number of seconds the work will take. Again, we leverage a @RabbitListener on the “hello” queue and a @RabbitHandler to receive the message. The instance that is consuming the message is added to our monitor to show which instance, the message and the length of time to process the message.</p>
<p>我们的接收者类，Tut2Receiver，在doWork()方法里根据消息所带点号的个数，将其转换成任务所需消耗的秒数，以此模拟了任意任务的长度。同样地，我们对“hello”队列使用了@RabbitListener注解，并通过@RabbitHandler注解来接收消息。同时，用一个编号来标识正在消费消息的实例，并将它加入我们的监控中，最终打印出实例编号，消息内容以及处理消息所耗费的时长。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut2Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> instance;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Tut2Receiver</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.instance = i;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RabbitHandler</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		<span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">		watch.start();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + <span class="built_in">this</span>.instance +</span><br><span class="line">		<span class="string">&quot; [x] Received &#x27;&quot;</span> + in + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">		doWork(in);</span><br><span class="line">		watch.stop();</span><br><span class="line">		System.out.println(<span class="string">&quot;instance &quot;</span> + <span class="built_in">this</span>.instance +</span><br><span class="line">		<span class="string">&quot; [x] Done in &quot;</span> + watch.getTotalTimeSeconds() + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String in)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">char</span> ch : in.toCharArray()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="putting-it-all-together代码整合"><a class="markdownIt-Anchor" href="#putting-it-all-together代码整合"></a> Putting it all together（代码整合）</h3>
<p>Compile them using mvn package and run with the following options</p>
<p>使用mvn package来编译上述代码，并在运行时添加下面的命令行参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line">java -jar target/rabbitmq-amqp-tutorials-0.0.1-SNAPSHOT.jar --spring.profiles.active=work-queues,receiver</span><br><span class="line">java -jar target/rabbitmq-amqp-tutorials-0.0.1-SNAPSHOT.jar --spring.profiles.active=work-queues,sender</span><br></pre></td></tr></table></figure>
<p>The output of the sender should look something like:</p>
<p>发送者类的输出看起来应该是类似于这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ready ... running for 10000ms</span><br><span class="line">[x] Sent &#x27;Hello.1&#x27;</span><br><span class="line">[x] Sent &#x27;Hello..2&#x27;</span><br><span class="line">[x] Sent &#x27;Hello...3&#x27;</span><br><span class="line">[x] Sent &#x27;Hello.4&#x27;</span><br><span class="line">[x] Sent &#x27;Hello..5&#x27;</span><br><span class="line">[x] Sent &#x27;Hello...6&#x27;</span><br><span class="line">[x] Sent &#x27;Hello.7&#x27;</span><br><span class="line">[x] Sent &#x27;Hello..8&#x27;</span><br><span class="line">[x] Sent &#x27;Hello...9&#x27;</span><br><span class="line">[x] Sent &#x27;Hello.10&#x27;</span><br></pre></td></tr></table></figure>
<p>And the output from the workers should look something like:</p>
<p>而工作者类的输出看起来应该是类似于这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ready ... running for 10000ms</span><br><span class="line">instance 1 [x] Received &#x27;Hello.1&#x27;</span><br><span class="line">instance 2 [x] Received &#x27;Hello..2&#x27;</span><br><span class="line">instance 1 [x] Done in 1.001s</span><br><span class="line">instance 1 [x] Received &#x27;Hello...3&#x27;</span><br><span class="line">instance 2 [x] Done in 2.004s</span><br><span class="line">instance 2 [x] Received &#x27;Hello.4&#x27;</span><br><span class="line">instance 2 [x] Done in 1.0s</span><br><span class="line">instance 2 [x] Received &#x27;Hello..5&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="message-acknowledgment消息确认"><a class="markdownIt-Anchor" href="#message-acknowledgment消息确认"></a> Message acknowledgment（消息确认）</h3>
<p>Doing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done. Spring AMQP by default takes a conservative approach to <a href="https://www.rabbitmq.com/confirms.html">message acknowledgement</a>. If the listener throws an exception the container calls:</p>
<p>完成一个任务需要耗费几秒。对于一个开始了长任务的消费者，你可能会想知道，当它只完成了部分任务就挂掉时发生了什么。Spring AMQP默认采用保守的方式来进行<a href="https://www.rabbitmq.com/confirms.html">消息确认</a>。如果监听器抛出了一个异常，那么容器会调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicReject(deliveryTag, requeue)</span><br></pre></td></tr></table></figure>
<p>Requeue is true by default unless you explicitly set:</p>
<p>requeue（重入队列）默认为true，除非你显示地将其设置为false：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaultRequeueRejected=false</span><br></pre></td></tr></table></figure>
<p>or the listener throws an AmqpRejectAndDontRequeueException. This is typically the bahavior you want from your listener. In this mode there is no need to worry about a forgotten acknowledgement. After processing the message the listener calls:</p>
<p>否则监听器抛出AmqpRejectAndDontRequeueException异常。这通常会是你想要监听器的行为。在这种模式下，无需担心一个被忘记了的确认。在处理完消息后，监听器会调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicAck()</span><br></pre></td></tr></table></figure>
<p>Acknowledgement must be sent on the same channel the delivery it is for was received on. Attempts to acknowledge using a different channel will result in a channel-level protocol exception. See the <a href="https://www.rabbitmq.com/confirms.html">doc guide on confirmations</a> to learn more. Spring AMQP generally takes care of this but when used in combination with code that uses RabbitMQ Java client directly, this is something to keep in mind.</p>
<p>消息确认必须在与接收信息相同的通道（channel）上进行发送。试图使用不同的通道来进行确认将导致通道级别的协议异常。若想更详细了解，可以参阅<a href="https://www.rabbitmq.com/confirms.html">关于消息确认的文档指南</a>。Spring AMQP一般都会处理好这种问题，但与直接使用RabbitMQ的Java客户端的代码结合使用时，这点要小心。</p>
<blockquote>
<h4 id="forgotten-acknowledgment被遗忘的确认"><a class="markdownIt-Anchor" href="#forgotten-acknowledgment被遗忘的确认"></a> Forgotten acknowledgment（被遗忘的确认）</h4>
<p>It’s a common mistake to miss the basicAck and spring-amqp helps to avoid this through its default configuraiton. The consequences are serious. Messages will be redelivered when your client quits (which may look like random redelivery), but RabbitMQ will eat more and more memory as it won’t be able to release any unacked messages.</p>
<p>忘记调用basciAck方法是常见的一个错误，spring-amqp通过它的默认配置来避免它。这个错误的后果是很严重的。当你的客户端退出后，消息会被重复发送（看起来就像是随机重发），但RabbitMQ将吃掉越来越多的内存，因为它无法释放任何未确认的消息。</p>
<p>In order to debug this kind of mistake you can use rabbitmqctl to print the messages_unacknowledged field:</p>
<p>为了调试这种错误，你可以使用rabbitmqctl来打印messages_unacknowledged域：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure>
<p>On Windows, drop the sudo:</p>
<p>在Windows环境下，去掉sudo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl.bat list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="message-durability消息持久性"><a class="markdownIt-Anchor" href="#message-durability消息持久性"></a> Message durability（消息持久性）</h3>
<p>With spring-amqp there are reasonable default values in the MessageProperties that account for message durability. In particular you can check the table for <a href="http://docs.spring.io/spring-amqp/reference/htmlsingle/#_common_properties">common properties</a>. You’ll see two relevant to our discussion here on durability:</p>
<p>对于spring-amqp，消息属性配置里有很多合理的默认值，这些默认值共同决定了消息的持久性。你可以查阅<a href="http://docs.spring.io/spring-amqp/reference/htmlsingle/#_common_properties">常用属性表</a>。你将会看到与我们正在讨论的消息持久性相关的两个属性：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Property</th>
<th style="text-align:left">default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">durable</td>
<td style="text-align:left">true</td>
<td style="text-align:left">When declareExchange is true the durable flag is set to this value</td>
</tr>
<tr>
<td style="text-align:left">deliveryMode</td>
<td style="text-align:left">PERSISTENT</td>
<td style="text-align:left">PERSISTENT or NON_PERSISTENT to determine whether or not RabbitMQ should persist the messages</td>
</tr>
</tbody>
</table>
<blockquote>
<h4 id="note-on-message-persistence关于消息持久化要注意的地方"><a class="markdownIt-Anchor" href="#note-on-message-persistence关于消息持久化要注意的地方"></a> Note on message persistence（关于消息持久化要注意的地方）</h4>
<p>Marking messages as persistent doesn’t fully guarantee that a message won’t be lost. Although it tells RabbitMQ to save the message to disk, there is still a short time window when RabbitMQ has accepted a message and hasn’t saved it yet. Also, RabbitMQ doesn’t do fsync(2) for every message – it may be just saved to cache and not really written to the disk. The persistence guarantees aren’t strong, but it’s more than enough for our simple task queue. If you need a stronger guarantee then you can use publisher confirms.</p>
<p>将消息标记为持久化并不能完全保证消息将不会丢失。虽然它告诉RabbitMQ要将消息保存到磁盘，但当RabbitMQ接收了某条消息并且还没有保存该消息时，仍有一个小的时间窗口。而且，RabbitMQ不会为每条消息都进行fsync操作——它可能仅仅只是将其缓存起来，但并没有真的将消息写入磁盘。这么做虽然无法完全保证持久化，但对于我们简单的任务队列来说，这已经很足够了。如果你需要完全保证持久化，那么你可以使用发布者确认。</p>
</blockquote>
<h3 id="fair-dispatch-vs-round-robin-dispatching公平调度vs循环调度"><a class="markdownIt-Anchor" href="#fair-dispatch-vs-round-robin-dispatching公平调度vs循环调度"></a> Fair dispatch vs Round-robin dispatching（公平调度vs循环调度）</h3>
<p>By default, RabbitMQ will send each message to the next consumer, in sequence. On average every consumer will get the same number of messages. This way of distributing messages is called round-robin. In this mode dispatching doesn’t necessarily work exactly as we want. For example in a situation with two workers, when all odd messages are heavy and even messages are light, one worker will be constantly busy and the other one will do hardly any work. Well, RabbitMQ doesn’t know anything about that and will still dispatch messages evenly.</p>
<p>默认情况下，RabbitMQ将把每一条消息按顺序逐一发送给下一个消费者。每个消费者都将被平均分到相同的个数的消息。这种消息分派方式被称为循环调度。这种调度模式有时无法完全满足我们的需求。例如，假设有两个工作者，第奇数条消息是重任务，第偶数条消息是轻任务，那么其中一个工作者将会总是很繁忙，而另一个工作者则有可能没什么事做。然而，RabbitMQ并不知道这个状况，并且仍然会这么均匀地分发消息。</p>
<p>This happens because RabbitMQ just dispatches a message when the message enters the queue. It doesn’t look at the number of unacknowledged messages for a consumer. It just blindly dispatches every n-th message to the n-th consumer.</p>
<p>会发生这个情况是因为，当消息进入队列时，RabbitMQ仅仅是将消息分派出去。它不会去看某个消费者未确认的消息的数量。它只是盲目地将消息均匀分派给各个消费者。</p>
<p>However, “Fair dispatch” is the default configuration for spring-amqp. The SimpleMessageListenerContainer defines the value for DEFAULT_PREFETCH_COUNT to be 1. If the DEFAULT_PREFECTH_COUNT were set to 0 the behavior would be round robin messaging as described above.</p>
<p>然而，“公平调度”是spring-amqp的默认配置。SimpleMessageListenerContainer类将DEFAULT_PREFETCH_COUNT的值定义为1。如果DEFAULT_PREFETCH_COUNT的值被设置为0，那么调度方式将变成循环调用。</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/prefetch-count.png" alt="image" /></p>
<p>However, with the prefetchCount set to 1 by default, this tells RabbitMQ not to give more than one message to a worker at a time. Or, in other words, don’t dispatch a new message to a worker until it has processed and acknowledged the previous one. Instead, it will dispatch it to the next worker that is not still busy.</p>
<p>然而，prefetchCount的值默认设为1，这告诉RabbitMQ不要同时将多个消息分派给一个工作者。换句话说，在某个工作者处理完一条消息并确认它之前，RabbitMQ不会给该工作者分派新的消息，而是将新的消息分派给下一个不是很繁忙的工作者。</p>
<blockquote>
<h4 id="note-about-queue-size关于队列大小需要注意的地方"><a class="markdownIt-Anchor" href="#note-about-queue-size关于队列大小需要注意的地方"></a> Note about queue size（关于队列大小需要注意的地方）</h4>
<p>If all the workers are busy, your queue can fill up. You will want to keep an eye on that, and maybe add more workers, or have some other strategy.</p>
<p>如果所有的工作者都繁忙，那么你的队列会被填满。你需要注意这种情况，要么添加多几个工作者，要么就采用其它策略。</p>
</blockquote>
<p>By using spring-amqp you get reasonable values configured for message acknowledgments and fair dispatching. The default durability for queues and persistence for messages provided by spring-amqp allow let the messages to survive even if RabbitMQ is restarted.</p>
<p>通过使用spring-amqp，你会发现，它已经为消息确认和公平调度配置好合理值。spring-amqp为队列和消息持久化提供的默认持久属性使得即使在RabbitMQ重启的情况下，消息还能保存下来。</p>
<p>For more information on Channel methods and MessageProperties, you can browse the <a href="http://docs.spring.io/spring-amqp/docs/current/api/index.html?org/springframework/amqp/package-summary.html">javadocs online</a>. For understanding the underlying foundation for spring-amqp you can find the <a href="https://rabbitmq.github.io/rabbitmq-java-client/api/current/">rabbitmq-java-client</a>.</p>
<p>关于channel方法和MessageProperties的更多信息，可以浏览<a href="http://docs.spring.io/spring-amqp/docs/current/api/index.html?org/springframework/amqp/package-summary.html">在线的javadocs</a>。若要了解spring-amqp的底层机制，可以参阅<a href="https://rabbitmq.github.io/rabbitmq-java-client/api/current/">rabbitmq-java-client文档</a>。</p>
<p>Now we can move on to tutorial 3 and learn how to deliver the same message to many consumers.</p>
<p>现在我们可以开始教程3，学习如何将相同的消息发送给多个消费者。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>RabbitMQ Spring-AMQP官方教程</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Spring-AMQP官方教程（一）--Hello World</title>
    <url>/posts/53264/</url>
    <content><![CDATA[<h1 id="1-hello-world"><a class="markdownIt-Anchor" href="#1-hello-world"></a> 1 “Hello World!”</h1>
<h2 id="introduction简介"><a class="markdownIt-Anchor" href="#introduction简介"></a> Introduction（简介）</h2>
<p>RabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that Mr. Postman will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office and a postman.</p>
<p>RabbitMQ是一个消息代理：它接受并转发消息。你可以将它看成是一个邮局：当你将想发送的邮件丢进邮箱时，你就可以确定邮差最终会把这封邮件送到收件人手上。通过这个类比来看，RabbitMQ既是邮箱，又是邮局，而且还是邮差。</p>
<span id="more"></span>
<p>The major difference between RabbitMQ and the post office is that it doesn’t deal with paper, instead it accepts, stores and forwards binary blobs of data ‒ <em>messages</em>.</p>
<p>RabbitMQ和邮局之间的主要不同点是，RabbitMQ不跟纸打交道，它只接收，存储并转发二进制的数据包—消息。</p>
<p>RabbitMQ, and messaging in general, uses some jargon.</p>
<p>RabbitMQ，一般称它为消息队列，它使用了一些术语。</p>
<p><em>Producing</em> means nothing more than sending. A program that sends messages is a producer:</p>
<p>消息生产其实就是消息发送。发送消息的程序就是生产者：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/producer.png" alt="image" /></p>
<p>A <em>queue</em> is the name for a post box which lives inside RabbitMQ. Although messages flow through RabbitMQ and your applications, they can only be stored inside a <em>queue</em>. A queue is only bound by the host’s memory &amp; disk limits, it’s essentially a large message buffer. Many producers can send messages that go to one queue, and many consumers can try to receive data from one <em>queue</em>. This is how we represent a queue:</p>
<p>队列就是相当于RabbitMQ内部的邮箱。虽然消息在传递时是流经RabbitMQ和你的应用，但它们只能被存储在某个队列里。队列大小只受限于主机内存和硬盘容量，它本质上就是个大的消息缓存。多个生产者可以往一个队列里发送消息，多个消费者可以从一个队列里获取数据。以下是我们表示一个队列的方式：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/queue.png" alt="image" /></p>
<p><em>Consuming</em> has a similar meaning to receiving. A <em>consumer</em> is a program that mostly waits to receive messages:</p>
<p>消息消费其实就是消息接收。等待接收消息的程序就是一个消费者：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/consumer.png" alt="image" /></p>
<p>Note that the producer, consumer, and broker do not have to reside on the same host; indeed in most applications they don’t.</p>
<p>注意，生产者，消费者和代理不一定都在同一个主机里；实际上，在大多数应用中，这三者都不是在同一个主机里。</p>
<h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> “Hello World”</h2>
<p>In this part of the tutorial we’ll write two programs using the spring-amqp library; a producer that sends a single message, and a consumer that receives messages and prints them out. We’ll gloss over some of the detail in the Spring-amqp API, concentrating on this very simple thing just to get started. It’s a “Hello World” of messaging.</p>
<p>在本教程里，我们将写两个基于spring-amqp类库的程序，其中一个是发送单条消息的生产者，另一个是消费者，它接收消息并将它们打印出来。我们将省略Spring-amqp API的一些细节，专注于即将开始的东西。它是消息队列版本的“Hello World”程序。</p>
<p>In the diagram below, “P” is our producer and “C” is our consumer. The box in the middle is a queue - a message buffer that RabbitMQ keeps on behalf of the consumer.</p>
<p>在下面的图中，“P”是我们的生产者，“C”是我们的消费者。图中间的箱子是一个队列，也就是RabbitMQ给消费者用的的消息缓存：</p>
<p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="image" /></p>
<blockquote>
<h4 id="the-spring-amqp-frameworkspring-amqp框架"><a class="markdownIt-Anchor" href="#the-spring-amqp-frameworkspring-amqp框架"></a> The Spring AMQP Framework（Spring AMQP框架）</h4>
<p>RabbitMQ speaks multiple protocols. This tutorial uses AMQP 0-9-1, which is an open, general-purpose protocol for messaging. There are a number of clients for RabbitMQ in many different languages.</p>
<p>RabbitMQ支持多种协议。本教程使用AMQP 0-9-1协议，它是一个开放，通用的消息队列协议。很多编程语言都提供了RabbitMQ客户端。</p>
</blockquote>
<p>Spring AMQP leverages Spring Boot for configuration and dependency management. Spring supports maven or gradle but for this tutorial we’ll select maven with Spring Boot 1.5.2. Open the <a href="http://start.spring.io/">Spring Initializr</a> and provide: the group id (e.g. org.springframework.amqp.tutorials) the artifact id (e.g. rabbitmq-amqp-tutorials). Search for the amqp dependency and select the AMQP dependency.</p>
<p>Spring AMQP利用Spring Boot来进行配置和依赖管理。Spring同时支持maven或者gradle，但在本教程里我们选择用maven，同时采用Spring Boot 1.5.2版本。我们打开<a href="http://start.spring.io/">Spring Initializr</a>并提供group id（如org.springframework.amqp.tutorials）和artifact id（如rabbitmq-amqp-tutorials）。查找amqp依赖并选择AMQP依赖。（译者注：应该是搜索rabbitmq）</p>
<p>Generate the project and unzip the generated project into the location of your choice. This can now be imported into your favorite IDE. Alternatively you can work on it from your favorite editor.</p>
<p>点击Generate Project生成项目，下载并将其解压到你想存放的目录。现在你可以在你喜欢的IDE里面导入这个项目。你也可以在你喜欢的编辑器上进行下一步编辑。</p>
<h3 id="configuring-the-project配置项目"><a class="markdownIt-Anchor" href="#configuring-the-project配置项目"></a> Configuring the project（配置项目）</h3>
<p>Spring Boot offers numerous features but we will only highlight a few here. First, Spring Boot applications have the option of providing their properties through either an application.properties or application.yml file (there are many more options as well but this will get us going). You’ll find an application.properties file in the generated project with nothing in it. Rename application.properties to application.yml file with the following properties:</p>
<p>Spring Boot提供了很多特性，但在这里我们只显示几个需要用到的。首先，Spring Boot应用的配置可以写在application.properties文件或者application.yml文件里（还有许多其它的方式，但对于我们，用这两种文件就足够了）。你在生成的项目里将会找到一个空的application.properties文件。将这个文件重命名为application.yml，并写上这些属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    profiles:</span><br><span class="line">        active: usage_message</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">    level:</span><br><span class="line">        org: ERROR</span><br><span class="line"></span><br><span class="line">tutorial:</span><br><span class="line">    client:</span><br><span class="line">        duration: 10000</span><br></pre></td></tr></table></figure>
<p>Create a new directory (package - tut1) where we can put the tutorial code. We’ll now create a JavaConfig file (Tut1Config.java) to describe our beans in the following manner:</p>
<p>创建一个新的目录（package - tut1）用来放我们的教程代码。现在我们将通过以下方式创建一个Java配置文件（Tut1Config.java）来描述我们的Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.amqp.tutorials.tut1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;tut1&quot;,&quot;hello-world&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut1Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;receiver&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Tut1Receiver <span class="title function_">receiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut1Receiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;sender&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Tut1Sender <span class="title function_">sender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tut1Sender</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that we’ve defined the 1st tutorial profile as either tut1, the package name, or hello-world. We use the @Configuration to let Spring know that this is a Java Configuration and in it we create the definition for our Queue (“hello”) and define our Sender and Receiver beans.</p>
<p>注意，我们已经将教程的第一个配置组定义为tu1（即报名），或者hello-world。我们用@Configuration注解来让Spring知道这是个Java配置，并且在配置里我们定义了队列Queue(“hello”)，而且也定义了我们的发送者和接收者。</p>
<p>We will run all of our tutorials through the Boot Application now by simply passing in which profiles we are using. To enable this we will modify the generated RabbitAmqpTutorialsApplication.java with the following:</p>
<p>现在我们将传入需要用到配置组，通过Boot Application来运行我们的教程。为了做到这一点，我们将修改生成的RabbitAmqpTutorialsApplication.java文件，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitAmqpTutorialsApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;usage_message&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">usage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... arg0)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;This app uses Spring Profiles to control its behavior.\n&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Sample usage: java -jar rabbit-tutorials.jar --spring.profiles.active=helloworld,sender&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;!usage_message&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">tutorial</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitAmqpTutorialsRunner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(RabbitAmqpTutorialsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>and add the RabbitAmqpTutorialsRunner.java code as follows:</p>
<p>然后像下面那样添加RabbitAmqpTutorialsRunner.java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.amqp.tutorials;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitAmqpTutorialsRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;tutorial.client.duration:0&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> duration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigurableApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... arg0)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ready ... running for &quot;</span> + duration + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        Thread.sleep(duration);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sending发送"><a class="markdownIt-Anchor" href="#sending发送"></a> Sending（发送）</h3>
<p><img src="https://www.rabbitmq.com/img/tutorials/sending.png" alt="image" /></p>
<p>Now there is very little code that needs to go into the sender and receiver classes. Let’s call them Tut1Receiver and Tut1Sender. The Sender leverages our config and the RabbitTemplate to send the message.</p>
<p>现在发送者类和接收者类需要写的代码很少。我们把接收者的类名叫做Tut1Receiver，把发送者的类名叫做Tut1Sender。发送者类利用我们的配置和RabbitTemplate类来发送消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sender</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.amqp.tutorials.tut1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut1Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 1000, initialDelay = 500)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.template.convertAndSend(queue.getName(), message);</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You’ll notice that spring-amqp removes the boiler plate code leaving you with only the logic of the messaging to be concerned about. We autowire in the queue that was configured in our bean definition in the Tut1Config class and like many spring connection abstractions, we wrap the boilerplate rabbitmq client classes with a RabbitTemplate that can be autowired into the sender. All that is left is to create a message and invoke the template’s convertAndSend method passing in the queue name from the bean we defined and the message we just created.</p>
<p>你会发觉，spring-amqp移除了样板化代码，让你只专注于消息发送逻辑。我们自动注入了队列queue，它已经在前面的Tut1Config类里做了配置。就像大多数Spring连接抽象，我们用RabbitTemplate包装了样板化的rabbitmq客户端类，并将它自动注入到发送者类里。我们要做的就是创建一条信息，并调用template的convertAndSend方法，传入我们定义的队列bean的名字以及我们刚创建的信息。</p>
<blockquote>
<h4 id="sending-doesnt-work无法发送"><a class="markdownIt-Anchor" href="#sending-doesnt-work无法发送"></a> Sending doesn’t work!（无法发送！）</h4>
<p>If this is your first time using RabbitMQ and you don’t see the “Sent” message then you may be left scratching your head wondering what could be wrong. Maybe the broker was started without enough free disk space (by default it needs at least 200 MB free) and is therefore refusing to accept messages. Check the broker logfile to confirm and reduce the limit if necessary. The configuration file documentation will show you how to set disk_free_limit.</p>
<p>如果这是你第一次使用RabbitMQ并且你看不到打印出来的“Sent”消息，你可能会在那里苦恼着哪里出错了。也许消息代理在启动时不够磁盘空间（默认它需要200MB的空间），由此导致拒绝接收信息。如有必要，检查代理的日志文件来确认并减少所需最小磁盘空间的限制。配置文件文档里会告诉你如何设置disk_free_limit（最小所需磁盘空间）参数</p>
</blockquote>
<h3 id="receiving接收"><a class="markdownIt-Anchor" href="#receiving接收"></a> Receiving（接收）</h3>
<p>The receiver is equally simple. We annotate our Receiver class with @RabbitListener and pass in the name of the queue. We then annotate our receive method with @RabbitHandler passing in the payload that has been pushed to the queue.</p>
<p>接收者类很简单。我们用@RabbitListener来注解我们的接收者类，并往注解里传入队列的名字。然后我们用@RabbitHandler来注解我们的接收方法，接收的参数为推入队列里的负载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.amqp.tutorials.tut1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tut1Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String in)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + in + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="putting-it-all-together代码整合"><a class="markdownIt-Anchor" href="#putting-it-all-together代码整合"></a> Putting it all together（代码整合）</h3>
<p>The app uses Spring Profiles to control what tutorial it’s running, and whether it’s a Sender or Receiver. Choose which tutorial to run by using the profile. For example:</p>
<p>程序通过使用Spring配置组来控制正在运行的是哪个教程代码，以及控制正在运行的是发送者还是接收者。我们选择使用不同的配置组来运行不同的教程代码。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- &#123;tut1|hello-world&#125;,&#123;sender|receiver&#125;</span><br><span class="line">- &#123;tut2|work-queues&#125;,&#123;sender|receiver&#125;</span><br><span class="line">- &#123;tut3|pub-sub|publish-subscribe&#125;,&#123;sender|receiver&#125;</span><br><span class="line">- &#123;tut4|routing&#125;,&#123;sender|receiver&#125;</span><br><span class="line">- &#123;tut5|topics&#125;,&#123;sender|receiver&#125;</span><br><span class="line">- &#123;tut6|rpc&#125;,&#123;client|server&#125;</span><br></pre></td></tr></table></figure>
<p>We’ll come back to this list as we progress through the other five tutorials. After building with maven, run the app however you like to run boot apps (e.g. from the ide, or command line). We’ll show how to run from the command line.</p>
<p>涉及到其它五个教程时我们还会回来参照这个列表。用maven构建完后，你可以用你喜欢的方式来运行程序（例如，通过ide或通过命令行）。我们将展示如何通过命令行来运行。</p>
<p>For example（例如）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># publisher</span><br><span class="line">java -jar rabbitmq-tutorials.jar --spring.profiles.active=hello-world,sender</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># consumer</span><br><span class="line">java -jar rabbitmq-tutorials.jar --spring.profiles.active=hello-world,receiver</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="listing-queues列出队列"><a class="markdownIt-Anchor" href="#listing-queues列出队列"></a> Listing queues（列出队列）</h4>
<p>You may wish to see what queues RabbitMQ has and how many messages are in them. You can do it (as a privileged user) using the rabbitmqctl tool:</p>
<p>你可能希望看一下RabbitMQ有哪些队列，这些队列里有多少消息。你可以通过使用rabbitmqctl工具来查看（但你必须是个授权用户）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl list_queues</span><br></pre></td></tr></table></figure>
<p>On Windows, omit the sudo:</p>
<p>在Windows系统上，输入命令时要去掉sudo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl.bat list_queues</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Time to move on to part 2 and build a simple <em>work queue</em>.</p>
<p>接下来我们开始教程的第2部份，并构建一个简单的工作队列。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>RabbitMQ Spring-AMQP官方教程</category>
      </categories>
      <tags>
        <tag>Translation</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
</search>
